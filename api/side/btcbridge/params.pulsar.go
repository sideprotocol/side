// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package btcbridge

import (
	_ "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Params_6_list)(nil)

type _Params_6_list struct {
	list *[]string
}

func (x *_Params_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Params_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Params_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_6_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Params at list field TrustedNonBtcRelayers as it is not of Message kind"))
}

func (x *_Params_6_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Params_6_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Params_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Params_7_list)(nil)

type _Params_7_list struct {
	list *[]string
}

func (x *_Params_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Params_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Params_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_7_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Params at list field TrustedOracles as it is not of Message kind"))
}

func (x *_Params_7_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Params_7_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Params_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Params_8_list)(nil)

type _Params_8_list struct {
	list *[]*Vault
}

func (x *_Params_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Vault)
	(*x.list)[i] = concreteValue
}

func (x *_Params_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Vault)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_8_list) AppendMutable() protoreflect.Value {
	v := new(Vault)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_8_list) NewElement() protoreflect.Value {
	v := new(Vault)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_8_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                            protoreflect.MessageDescriptor
	fd_Params_confirmations              protoreflect.FieldDescriptor
	fd_Params_max_acceptable_block_depth protoreflect.FieldDescriptor
	fd_Params_btc_voucher_denom          protoreflect.FieldDescriptor
	fd_Params_deposit_enabled            protoreflect.FieldDescriptor
	fd_Params_withdraw_enabled           protoreflect.FieldDescriptor
	fd_Params_trusted_non_btc_relayers   protoreflect.FieldDescriptor
	fd_Params_trusted_oracles            protoreflect.FieldDescriptor
	fd_Params_vaults                     protoreflect.FieldDescriptor
	fd_Params_withdraw_params            protoreflect.FieldDescriptor
	fd_Params_protocol_limits            protoreflect.FieldDescriptor
	fd_Params_protocol_fees              protoreflect.FieldDescriptor
	fd_Params_tss_params                 protoreflect.FieldDescriptor
)

func init() {
	file_side_btcbridge_params_proto_init()
	md_Params = File_side_btcbridge_params_proto.Messages().ByName("Params")
	fd_Params_confirmations = md_Params.Fields().ByName("confirmations")
	fd_Params_max_acceptable_block_depth = md_Params.Fields().ByName("max_acceptable_block_depth")
	fd_Params_btc_voucher_denom = md_Params.Fields().ByName("btc_voucher_denom")
	fd_Params_deposit_enabled = md_Params.Fields().ByName("deposit_enabled")
	fd_Params_withdraw_enabled = md_Params.Fields().ByName("withdraw_enabled")
	fd_Params_trusted_non_btc_relayers = md_Params.Fields().ByName("trusted_non_btc_relayers")
	fd_Params_trusted_oracles = md_Params.Fields().ByName("trusted_oracles")
	fd_Params_vaults = md_Params.Fields().ByName("vaults")
	fd_Params_withdraw_params = md_Params.Fields().ByName("withdraw_params")
	fd_Params_protocol_limits = md_Params.Fields().ByName("protocol_limits")
	fd_Params_protocol_fees = md_Params.Fields().ByName("protocol_fees")
	fd_Params_tss_params = md_Params.Fields().ByName("tss_params")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_side_btcbridge_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Confirmations != int32(0) {
		value := protoreflect.ValueOfInt32(x.Confirmations)
		if !f(fd_Params_confirmations, value) {
			return
		}
	}
	if x.MaxAcceptableBlockDepth != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxAcceptableBlockDepth)
		if !f(fd_Params_max_acceptable_block_depth, value) {
			return
		}
	}
	if x.BtcVoucherDenom != "" {
		value := protoreflect.ValueOfString(x.BtcVoucherDenom)
		if !f(fd_Params_btc_voucher_denom, value) {
			return
		}
	}
	if x.DepositEnabled != false {
		value := protoreflect.ValueOfBool(x.DepositEnabled)
		if !f(fd_Params_deposit_enabled, value) {
			return
		}
	}
	if x.WithdrawEnabled != false {
		value := protoreflect.ValueOfBool(x.WithdrawEnabled)
		if !f(fd_Params_withdraw_enabled, value) {
			return
		}
	}
	if len(x.TrustedNonBtcRelayers) != 0 {
		value := protoreflect.ValueOfList(&_Params_6_list{list: &x.TrustedNonBtcRelayers})
		if !f(fd_Params_trusted_non_btc_relayers, value) {
			return
		}
	}
	if len(x.TrustedOracles) != 0 {
		value := protoreflect.ValueOfList(&_Params_7_list{list: &x.TrustedOracles})
		if !f(fd_Params_trusted_oracles, value) {
			return
		}
	}
	if len(x.Vaults) != 0 {
		value := protoreflect.ValueOfList(&_Params_8_list{list: &x.Vaults})
		if !f(fd_Params_vaults, value) {
			return
		}
	}
	if x.WithdrawParams != nil {
		value := protoreflect.ValueOfMessage(x.WithdrawParams.ProtoReflect())
		if !f(fd_Params_withdraw_params, value) {
			return
		}
	}
	if x.ProtocolLimits != nil {
		value := protoreflect.ValueOfMessage(x.ProtocolLimits.ProtoReflect())
		if !f(fd_Params_protocol_limits, value) {
			return
		}
	}
	if x.ProtocolFees != nil {
		value := protoreflect.ValueOfMessage(x.ProtocolFees.ProtoReflect())
		if !f(fd_Params_protocol_fees, value) {
			return
		}
	}
	if x.TssParams != nil {
		value := protoreflect.ValueOfMessage(x.TssParams.ProtoReflect())
		if !f(fd_Params_tss_params, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "side.btcbridge.Params.confirmations":
		return x.Confirmations != int32(0)
	case "side.btcbridge.Params.max_acceptable_block_depth":
		return x.MaxAcceptableBlockDepth != uint64(0)
	case "side.btcbridge.Params.btc_voucher_denom":
		return x.BtcVoucherDenom != ""
	case "side.btcbridge.Params.deposit_enabled":
		return x.DepositEnabled != false
	case "side.btcbridge.Params.withdraw_enabled":
		return x.WithdrawEnabled != false
	case "side.btcbridge.Params.trusted_non_btc_relayers":
		return len(x.TrustedNonBtcRelayers) != 0
	case "side.btcbridge.Params.trusted_oracles":
		return len(x.TrustedOracles) != 0
	case "side.btcbridge.Params.vaults":
		return len(x.Vaults) != 0
	case "side.btcbridge.Params.withdraw_params":
		return x.WithdrawParams != nil
	case "side.btcbridge.Params.protocol_limits":
		return x.ProtocolLimits != nil
	case "side.btcbridge.Params.protocol_fees":
		return x.ProtocolFees != nil
	case "side.btcbridge.Params.tss_params":
		return x.TssParams != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Params"))
		}
		panic(fmt.Errorf("message side.btcbridge.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "side.btcbridge.Params.confirmations":
		x.Confirmations = int32(0)
	case "side.btcbridge.Params.max_acceptable_block_depth":
		x.MaxAcceptableBlockDepth = uint64(0)
	case "side.btcbridge.Params.btc_voucher_denom":
		x.BtcVoucherDenom = ""
	case "side.btcbridge.Params.deposit_enabled":
		x.DepositEnabled = false
	case "side.btcbridge.Params.withdraw_enabled":
		x.WithdrawEnabled = false
	case "side.btcbridge.Params.trusted_non_btc_relayers":
		x.TrustedNonBtcRelayers = nil
	case "side.btcbridge.Params.trusted_oracles":
		x.TrustedOracles = nil
	case "side.btcbridge.Params.vaults":
		x.Vaults = nil
	case "side.btcbridge.Params.withdraw_params":
		x.WithdrawParams = nil
	case "side.btcbridge.Params.protocol_limits":
		x.ProtocolLimits = nil
	case "side.btcbridge.Params.protocol_fees":
		x.ProtocolFees = nil
	case "side.btcbridge.Params.tss_params":
		x.TssParams = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Params"))
		}
		panic(fmt.Errorf("message side.btcbridge.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "side.btcbridge.Params.confirmations":
		value := x.Confirmations
		return protoreflect.ValueOfInt32(value)
	case "side.btcbridge.Params.max_acceptable_block_depth":
		value := x.MaxAcceptableBlockDepth
		return protoreflect.ValueOfUint64(value)
	case "side.btcbridge.Params.btc_voucher_denom":
		value := x.BtcVoucherDenom
		return protoreflect.ValueOfString(value)
	case "side.btcbridge.Params.deposit_enabled":
		value := x.DepositEnabled
		return protoreflect.ValueOfBool(value)
	case "side.btcbridge.Params.withdraw_enabled":
		value := x.WithdrawEnabled
		return protoreflect.ValueOfBool(value)
	case "side.btcbridge.Params.trusted_non_btc_relayers":
		if len(x.TrustedNonBtcRelayers) == 0 {
			return protoreflect.ValueOfList(&_Params_6_list{})
		}
		listValue := &_Params_6_list{list: &x.TrustedNonBtcRelayers}
		return protoreflect.ValueOfList(listValue)
	case "side.btcbridge.Params.trusted_oracles":
		if len(x.TrustedOracles) == 0 {
			return protoreflect.ValueOfList(&_Params_7_list{})
		}
		listValue := &_Params_7_list{list: &x.TrustedOracles}
		return protoreflect.ValueOfList(listValue)
	case "side.btcbridge.Params.vaults":
		if len(x.Vaults) == 0 {
			return protoreflect.ValueOfList(&_Params_8_list{})
		}
		listValue := &_Params_8_list{list: &x.Vaults}
		return protoreflect.ValueOfList(listValue)
	case "side.btcbridge.Params.withdraw_params":
		value := x.WithdrawParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "side.btcbridge.Params.protocol_limits":
		value := x.ProtocolLimits
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "side.btcbridge.Params.protocol_fees":
		value := x.ProtocolFees
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "side.btcbridge.Params.tss_params":
		value := x.TssParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Params"))
		}
		panic(fmt.Errorf("message side.btcbridge.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "side.btcbridge.Params.confirmations":
		x.Confirmations = int32(value.Int())
	case "side.btcbridge.Params.max_acceptable_block_depth":
		x.MaxAcceptableBlockDepth = value.Uint()
	case "side.btcbridge.Params.btc_voucher_denom":
		x.BtcVoucherDenom = value.Interface().(string)
	case "side.btcbridge.Params.deposit_enabled":
		x.DepositEnabled = value.Bool()
	case "side.btcbridge.Params.withdraw_enabled":
		x.WithdrawEnabled = value.Bool()
	case "side.btcbridge.Params.trusted_non_btc_relayers":
		lv := value.List()
		clv := lv.(*_Params_6_list)
		x.TrustedNonBtcRelayers = *clv.list
	case "side.btcbridge.Params.trusted_oracles":
		lv := value.List()
		clv := lv.(*_Params_7_list)
		x.TrustedOracles = *clv.list
	case "side.btcbridge.Params.vaults":
		lv := value.List()
		clv := lv.(*_Params_8_list)
		x.Vaults = *clv.list
	case "side.btcbridge.Params.withdraw_params":
		x.WithdrawParams = value.Message().Interface().(*WithdrawParams)
	case "side.btcbridge.Params.protocol_limits":
		x.ProtocolLimits = value.Message().Interface().(*ProtocolLimits)
	case "side.btcbridge.Params.protocol_fees":
		x.ProtocolFees = value.Message().Interface().(*ProtocolFees)
	case "side.btcbridge.Params.tss_params":
		x.TssParams = value.Message().Interface().(*TSSParams)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Params"))
		}
		panic(fmt.Errorf("message side.btcbridge.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.Params.trusted_non_btc_relayers":
		if x.TrustedNonBtcRelayers == nil {
			x.TrustedNonBtcRelayers = []string{}
		}
		value := &_Params_6_list{list: &x.TrustedNonBtcRelayers}
		return protoreflect.ValueOfList(value)
	case "side.btcbridge.Params.trusted_oracles":
		if x.TrustedOracles == nil {
			x.TrustedOracles = []string{}
		}
		value := &_Params_7_list{list: &x.TrustedOracles}
		return protoreflect.ValueOfList(value)
	case "side.btcbridge.Params.vaults":
		if x.Vaults == nil {
			x.Vaults = []*Vault{}
		}
		value := &_Params_8_list{list: &x.Vaults}
		return protoreflect.ValueOfList(value)
	case "side.btcbridge.Params.withdraw_params":
		if x.WithdrawParams == nil {
			x.WithdrawParams = new(WithdrawParams)
		}
		return protoreflect.ValueOfMessage(x.WithdrawParams.ProtoReflect())
	case "side.btcbridge.Params.protocol_limits":
		if x.ProtocolLimits == nil {
			x.ProtocolLimits = new(ProtocolLimits)
		}
		return protoreflect.ValueOfMessage(x.ProtocolLimits.ProtoReflect())
	case "side.btcbridge.Params.protocol_fees":
		if x.ProtocolFees == nil {
			x.ProtocolFees = new(ProtocolFees)
		}
		return protoreflect.ValueOfMessage(x.ProtocolFees.ProtoReflect())
	case "side.btcbridge.Params.tss_params":
		if x.TssParams == nil {
			x.TssParams = new(TSSParams)
		}
		return protoreflect.ValueOfMessage(x.TssParams.ProtoReflect())
	case "side.btcbridge.Params.confirmations":
		panic(fmt.Errorf("field confirmations of message side.btcbridge.Params is not mutable"))
	case "side.btcbridge.Params.max_acceptable_block_depth":
		panic(fmt.Errorf("field max_acceptable_block_depth of message side.btcbridge.Params is not mutable"))
	case "side.btcbridge.Params.btc_voucher_denom":
		panic(fmt.Errorf("field btc_voucher_denom of message side.btcbridge.Params is not mutable"))
	case "side.btcbridge.Params.deposit_enabled":
		panic(fmt.Errorf("field deposit_enabled of message side.btcbridge.Params is not mutable"))
	case "side.btcbridge.Params.withdraw_enabled":
		panic(fmt.Errorf("field withdraw_enabled of message side.btcbridge.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Params"))
		}
		panic(fmt.Errorf("message side.btcbridge.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.Params.confirmations":
		return protoreflect.ValueOfInt32(int32(0))
	case "side.btcbridge.Params.max_acceptable_block_depth":
		return protoreflect.ValueOfUint64(uint64(0))
	case "side.btcbridge.Params.btc_voucher_denom":
		return protoreflect.ValueOfString("")
	case "side.btcbridge.Params.deposit_enabled":
		return protoreflect.ValueOfBool(false)
	case "side.btcbridge.Params.withdraw_enabled":
		return protoreflect.ValueOfBool(false)
	case "side.btcbridge.Params.trusted_non_btc_relayers":
		list := []string{}
		return protoreflect.ValueOfList(&_Params_6_list{list: &list})
	case "side.btcbridge.Params.trusted_oracles":
		list := []string{}
		return protoreflect.ValueOfList(&_Params_7_list{list: &list})
	case "side.btcbridge.Params.vaults":
		list := []*Vault{}
		return protoreflect.ValueOfList(&_Params_8_list{list: &list})
	case "side.btcbridge.Params.withdraw_params":
		m := new(WithdrawParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "side.btcbridge.Params.protocol_limits":
		m := new(ProtocolLimits)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "side.btcbridge.Params.protocol_fees":
		m := new(ProtocolFees)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "side.btcbridge.Params.tss_params":
		m := new(TSSParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Params"))
		}
		panic(fmt.Errorf("message side.btcbridge.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in side.btcbridge.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Confirmations != 0 {
			n += 1 + runtime.Sov(uint64(x.Confirmations))
		}
		if x.MaxAcceptableBlockDepth != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxAcceptableBlockDepth))
		}
		l = len(x.BtcVoucherDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DepositEnabled {
			n += 2
		}
		if x.WithdrawEnabled {
			n += 2
		}
		if len(x.TrustedNonBtcRelayers) > 0 {
			for _, s := range x.TrustedNonBtcRelayers {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.TrustedOracles) > 0 {
			for _, s := range x.TrustedOracles {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Vaults) > 0 {
			for _, e := range x.Vaults {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.WithdrawParams != nil {
			l = options.Size(x.WithdrawParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ProtocolLimits != nil {
			l = options.Size(x.ProtocolLimits)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ProtocolFees != nil {
			l = options.Size(x.ProtocolFees)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TssParams != nil {
			l = options.Size(x.TssParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TssParams != nil {
			encoded, err := options.Marshal(x.TssParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if x.ProtocolFees != nil {
			encoded, err := options.Marshal(x.ProtocolFees)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if x.ProtocolLimits != nil {
			encoded, err := options.Marshal(x.ProtocolLimits)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if x.WithdrawParams != nil {
			encoded, err := options.Marshal(x.WithdrawParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.Vaults) > 0 {
			for iNdEx := len(x.Vaults) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Vaults[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.TrustedOracles) > 0 {
			for iNdEx := len(x.TrustedOracles) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.TrustedOracles[iNdEx])
				copy(dAtA[i:], x.TrustedOracles[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TrustedOracles[iNdEx])))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.TrustedNonBtcRelayers) > 0 {
			for iNdEx := len(x.TrustedNonBtcRelayers) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.TrustedNonBtcRelayers[iNdEx])
				copy(dAtA[i:], x.TrustedNonBtcRelayers[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TrustedNonBtcRelayers[iNdEx])))
				i--
				dAtA[i] = 0x32
			}
		}
		if x.WithdrawEnabled {
			i--
			if x.WithdrawEnabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if x.DepositEnabled {
			i--
			if x.DepositEnabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x20
		}
		if len(x.BtcVoucherDenom) > 0 {
			i -= len(x.BtcVoucherDenom)
			copy(dAtA[i:], x.BtcVoucherDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BtcVoucherDenom)))
			i--
			dAtA[i] = 0x1a
		}
		if x.MaxAcceptableBlockDepth != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxAcceptableBlockDepth))
			i--
			dAtA[i] = 0x10
		}
		if x.Confirmations != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Confirmations))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Confirmations", wireType)
				}
				x.Confirmations = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Confirmations |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxAcceptableBlockDepth", wireType)
				}
				x.MaxAcceptableBlockDepth = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxAcceptableBlockDepth |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BtcVoucherDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BtcVoucherDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositEnabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.DepositEnabled = bool(v != 0)
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawEnabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.WithdrawEnabled = bool(v != 0)
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TrustedNonBtcRelayers", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TrustedNonBtcRelayers = append(x.TrustedNonBtcRelayers, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TrustedOracles", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TrustedOracles = append(x.TrustedOracles, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Vaults = append(x.Vaults, &Vault{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Vaults[len(x.Vaults)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.WithdrawParams == nil {
					x.WithdrawParams = &WithdrawParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.WithdrawParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProtocolLimits", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ProtocolLimits == nil {
					x.ProtocolLimits = &ProtocolLimits{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ProtocolLimits); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProtocolFees", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ProtocolFees == nil {
					x.ProtocolFees = &ProtocolFees{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ProtocolFees); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TssParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TssParams == nil {
					x.TssParams = &TSSParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TssParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Vault            protoreflect.MessageDescriptor
	fd_Vault_address    protoreflect.FieldDescriptor
	fd_Vault_pub_key    protoreflect.FieldDescriptor
	fd_Vault_asset_type protoreflect.FieldDescriptor
	fd_Vault_version    protoreflect.FieldDescriptor
)

func init() {
	file_side_btcbridge_params_proto_init()
	md_Vault = File_side_btcbridge_params_proto.Messages().ByName("Vault")
	fd_Vault_address = md_Vault.Fields().ByName("address")
	fd_Vault_pub_key = md_Vault.Fields().ByName("pub_key")
	fd_Vault_asset_type = md_Vault.Fields().ByName("asset_type")
	fd_Vault_version = md_Vault.Fields().ByName("version")
}

var _ protoreflect.Message = (*fastReflection_Vault)(nil)

type fastReflection_Vault Vault

func (x *Vault) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Vault)(x)
}

func (x *Vault) slowProtoReflect() protoreflect.Message {
	mi := &file_side_btcbridge_params_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Vault_messageType fastReflection_Vault_messageType
var _ protoreflect.MessageType = fastReflection_Vault_messageType{}

type fastReflection_Vault_messageType struct{}

func (x fastReflection_Vault_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Vault)(nil)
}
func (x fastReflection_Vault_messageType) New() protoreflect.Message {
	return new(fastReflection_Vault)
}
func (x fastReflection_Vault_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Vault
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Vault) Descriptor() protoreflect.MessageDescriptor {
	return md_Vault
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Vault) Type() protoreflect.MessageType {
	return _fastReflection_Vault_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Vault) New() protoreflect.Message {
	return new(fastReflection_Vault)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Vault) Interface() protoreflect.ProtoMessage {
	return (*Vault)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Vault) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_Vault_address, value) {
			return
		}
	}
	if x.PubKey != "" {
		value := protoreflect.ValueOfString(x.PubKey)
		if !f(fd_Vault_pub_key, value) {
			return
		}
	}
	if x.AssetType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.AssetType))
		if !f(fd_Vault_asset_type, value) {
			return
		}
	}
	if x.Version != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Version)
		if !f(fd_Vault_version, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Vault) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "side.btcbridge.Vault.address":
		return x.Address != ""
	case "side.btcbridge.Vault.pub_key":
		return x.PubKey != ""
	case "side.btcbridge.Vault.asset_type":
		return x.AssetType != 0
	case "side.btcbridge.Vault.version":
		return x.Version != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Vault"))
		}
		panic(fmt.Errorf("message side.btcbridge.Vault does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Vault) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "side.btcbridge.Vault.address":
		x.Address = ""
	case "side.btcbridge.Vault.pub_key":
		x.PubKey = ""
	case "side.btcbridge.Vault.asset_type":
		x.AssetType = 0
	case "side.btcbridge.Vault.version":
		x.Version = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Vault"))
		}
		panic(fmt.Errorf("message side.btcbridge.Vault does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Vault) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "side.btcbridge.Vault.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "side.btcbridge.Vault.pub_key":
		value := x.PubKey
		return protoreflect.ValueOfString(value)
	case "side.btcbridge.Vault.asset_type":
		value := x.AssetType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "side.btcbridge.Vault.version":
		value := x.Version
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Vault"))
		}
		panic(fmt.Errorf("message side.btcbridge.Vault does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Vault) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "side.btcbridge.Vault.address":
		x.Address = value.Interface().(string)
	case "side.btcbridge.Vault.pub_key":
		x.PubKey = value.Interface().(string)
	case "side.btcbridge.Vault.asset_type":
		x.AssetType = (AssetType)(value.Enum())
	case "side.btcbridge.Vault.version":
		x.Version = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Vault"))
		}
		panic(fmt.Errorf("message side.btcbridge.Vault does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Vault) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.Vault.address":
		panic(fmt.Errorf("field address of message side.btcbridge.Vault is not mutable"))
	case "side.btcbridge.Vault.pub_key":
		panic(fmt.Errorf("field pub_key of message side.btcbridge.Vault is not mutable"))
	case "side.btcbridge.Vault.asset_type":
		panic(fmt.Errorf("field asset_type of message side.btcbridge.Vault is not mutable"))
	case "side.btcbridge.Vault.version":
		panic(fmt.Errorf("field version of message side.btcbridge.Vault is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Vault"))
		}
		panic(fmt.Errorf("message side.btcbridge.Vault does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Vault) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.Vault.address":
		return protoreflect.ValueOfString("")
	case "side.btcbridge.Vault.pub_key":
		return protoreflect.ValueOfString("")
	case "side.btcbridge.Vault.asset_type":
		return protoreflect.ValueOfEnum(0)
	case "side.btcbridge.Vault.version":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.Vault"))
		}
		panic(fmt.Errorf("message side.btcbridge.Vault does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Vault) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in side.btcbridge.Vault", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Vault) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Vault) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Vault) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Vault) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Vault)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PubKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AssetType != 0 {
			n += 1 + runtime.Sov(uint64(x.AssetType))
		}
		if x.Version != 0 {
			n += 1 + runtime.Sov(uint64(x.Version))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Vault)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Version != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Version))
			i--
			dAtA[i] = 0x20
		}
		if x.AssetType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AssetType))
			i--
			dAtA[i] = 0x18
		}
		if len(x.PubKey) > 0 {
			i -= len(x.PubKey)
			copy(dAtA[i:], x.PubKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PubKey)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Vault)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Vault: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Vault: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PubKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
				}
				x.AssetType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AssetType |= AssetType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
				}
				x.Version = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Version |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_WithdrawParams                            protoreflect.MessageDescriptor
	fd_WithdrawParams_max_utxo_num               protoreflect.FieldDescriptor
	fd_WithdrawParams_btc_batch_withdraw_period  protoreflect.FieldDescriptor
	fd_WithdrawParams_max_btc_batch_withdraw_num protoreflect.FieldDescriptor
)

func init() {
	file_side_btcbridge_params_proto_init()
	md_WithdrawParams = File_side_btcbridge_params_proto.Messages().ByName("WithdrawParams")
	fd_WithdrawParams_max_utxo_num = md_WithdrawParams.Fields().ByName("max_utxo_num")
	fd_WithdrawParams_btc_batch_withdraw_period = md_WithdrawParams.Fields().ByName("btc_batch_withdraw_period")
	fd_WithdrawParams_max_btc_batch_withdraw_num = md_WithdrawParams.Fields().ByName("max_btc_batch_withdraw_num")
}

var _ protoreflect.Message = (*fastReflection_WithdrawParams)(nil)

type fastReflection_WithdrawParams WithdrawParams

func (x *WithdrawParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_WithdrawParams)(x)
}

func (x *WithdrawParams) slowProtoReflect() protoreflect.Message {
	mi := &file_side_btcbridge_params_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_WithdrawParams_messageType fastReflection_WithdrawParams_messageType
var _ protoreflect.MessageType = fastReflection_WithdrawParams_messageType{}

type fastReflection_WithdrawParams_messageType struct{}

func (x fastReflection_WithdrawParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_WithdrawParams)(nil)
}
func (x fastReflection_WithdrawParams_messageType) New() protoreflect.Message {
	return new(fastReflection_WithdrawParams)
}
func (x fastReflection_WithdrawParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_WithdrawParams) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_WithdrawParams) Type() protoreflect.MessageType {
	return _fastReflection_WithdrawParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_WithdrawParams) New() protoreflect.Message {
	return new(fastReflection_WithdrawParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_WithdrawParams) Interface() protoreflect.ProtoMessage {
	return (*WithdrawParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_WithdrawParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MaxUtxoNum != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxUtxoNum)
		if !f(fd_WithdrawParams_max_utxo_num, value) {
			return
		}
	}
	if x.BtcBatchWithdrawPeriod != int64(0) {
		value := protoreflect.ValueOfInt64(x.BtcBatchWithdrawPeriod)
		if !f(fd_WithdrawParams_btc_batch_withdraw_period, value) {
			return
		}
	}
	if x.MaxBtcBatchWithdrawNum != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxBtcBatchWithdrawNum)
		if !f(fd_WithdrawParams_max_btc_batch_withdraw_num, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_WithdrawParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "side.btcbridge.WithdrawParams.max_utxo_num":
		return x.MaxUtxoNum != uint32(0)
	case "side.btcbridge.WithdrawParams.btc_batch_withdraw_period":
		return x.BtcBatchWithdrawPeriod != int64(0)
	case "side.btcbridge.WithdrawParams.max_btc_batch_withdraw_num":
		return x.MaxBtcBatchWithdrawNum != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.WithdrawParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.WithdrawParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "side.btcbridge.WithdrawParams.max_utxo_num":
		x.MaxUtxoNum = uint32(0)
	case "side.btcbridge.WithdrawParams.btc_batch_withdraw_period":
		x.BtcBatchWithdrawPeriod = int64(0)
	case "side.btcbridge.WithdrawParams.max_btc_batch_withdraw_num":
		x.MaxBtcBatchWithdrawNum = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.WithdrawParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.WithdrawParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_WithdrawParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "side.btcbridge.WithdrawParams.max_utxo_num":
		value := x.MaxUtxoNum
		return protoreflect.ValueOfUint32(value)
	case "side.btcbridge.WithdrawParams.btc_batch_withdraw_period":
		value := x.BtcBatchWithdrawPeriod
		return protoreflect.ValueOfInt64(value)
	case "side.btcbridge.WithdrawParams.max_btc_batch_withdraw_num":
		value := x.MaxBtcBatchWithdrawNum
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.WithdrawParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.WithdrawParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "side.btcbridge.WithdrawParams.max_utxo_num":
		x.MaxUtxoNum = uint32(value.Uint())
	case "side.btcbridge.WithdrawParams.btc_batch_withdraw_period":
		x.BtcBatchWithdrawPeriod = value.Int()
	case "side.btcbridge.WithdrawParams.max_btc_batch_withdraw_num":
		x.MaxBtcBatchWithdrawNum = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.WithdrawParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.WithdrawParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.WithdrawParams.max_utxo_num":
		panic(fmt.Errorf("field max_utxo_num of message side.btcbridge.WithdrawParams is not mutable"))
	case "side.btcbridge.WithdrawParams.btc_batch_withdraw_period":
		panic(fmt.Errorf("field btc_batch_withdraw_period of message side.btcbridge.WithdrawParams is not mutable"))
	case "side.btcbridge.WithdrawParams.max_btc_batch_withdraw_num":
		panic(fmt.Errorf("field max_btc_batch_withdraw_num of message side.btcbridge.WithdrawParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.WithdrawParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.WithdrawParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_WithdrawParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.WithdrawParams.max_utxo_num":
		return protoreflect.ValueOfUint32(uint32(0))
	case "side.btcbridge.WithdrawParams.btc_batch_withdraw_period":
		return protoreflect.ValueOfInt64(int64(0))
	case "side.btcbridge.WithdrawParams.max_btc_batch_withdraw_num":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.WithdrawParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.WithdrawParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_WithdrawParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in side.btcbridge.WithdrawParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_WithdrawParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_WithdrawParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_WithdrawParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*WithdrawParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.MaxUtxoNum != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxUtxoNum))
		}
		if x.BtcBatchWithdrawPeriod != 0 {
			n += 1 + runtime.Sov(uint64(x.BtcBatchWithdrawPeriod))
		}
		if x.MaxBtcBatchWithdrawNum != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxBtcBatchWithdrawNum))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MaxBtcBatchWithdrawNum != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxBtcBatchWithdrawNum))
			i--
			dAtA[i] = 0x18
		}
		if x.BtcBatchWithdrawPeriod != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BtcBatchWithdrawPeriod))
			i--
			dAtA[i] = 0x10
		}
		if x.MaxUtxoNum != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxUtxoNum))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxUtxoNum", wireType)
				}
				x.MaxUtxoNum = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxUtxoNum |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BtcBatchWithdrawPeriod", wireType)
				}
				x.BtcBatchWithdrawPeriod = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BtcBatchWithdrawPeriod |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxBtcBatchWithdrawNum", wireType)
				}
				x.MaxBtcBatchWithdrawNum = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxBtcBatchWithdrawNum |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ProtocolLimits                  protoreflect.MessageDescriptor
	fd_ProtocolLimits_btc_min_deposit  protoreflect.FieldDescriptor
	fd_ProtocolLimits_btc_min_withdraw protoreflect.FieldDescriptor
	fd_ProtocolLimits_btc_max_withdraw protoreflect.FieldDescriptor
)

func init() {
	file_side_btcbridge_params_proto_init()
	md_ProtocolLimits = File_side_btcbridge_params_proto.Messages().ByName("ProtocolLimits")
	fd_ProtocolLimits_btc_min_deposit = md_ProtocolLimits.Fields().ByName("btc_min_deposit")
	fd_ProtocolLimits_btc_min_withdraw = md_ProtocolLimits.Fields().ByName("btc_min_withdraw")
	fd_ProtocolLimits_btc_max_withdraw = md_ProtocolLimits.Fields().ByName("btc_max_withdraw")
}

var _ protoreflect.Message = (*fastReflection_ProtocolLimits)(nil)

type fastReflection_ProtocolLimits ProtocolLimits

func (x *ProtocolLimits) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ProtocolLimits)(x)
}

func (x *ProtocolLimits) slowProtoReflect() protoreflect.Message {
	mi := &file_side_btcbridge_params_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ProtocolLimits_messageType fastReflection_ProtocolLimits_messageType
var _ protoreflect.MessageType = fastReflection_ProtocolLimits_messageType{}

type fastReflection_ProtocolLimits_messageType struct{}

func (x fastReflection_ProtocolLimits_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ProtocolLimits)(nil)
}
func (x fastReflection_ProtocolLimits_messageType) New() protoreflect.Message {
	return new(fastReflection_ProtocolLimits)
}
func (x fastReflection_ProtocolLimits_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ProtocolLimits
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ProtocolLimits) Descriptor() protoreflect.MessageDescriptor {
	return md_ProtocolLimits
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ProtocolLimits) Type() protoreflect.MessageType {
	return _fastReflection_ProtocolLimits_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ProtocolLimits) New() protoreflect.Message {
	return new(fastReflection_ProtocolLimits)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ProtocolLimits) Interface() protoreflect.ProtoMessage {
	return (*ProtocolLimits)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ProtocolLimits) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BtcMinDeposit != int64(0) {
		value := protoreflect.ValueOfInt64(x.BtcMinDeposit)
		if !f(fd_ProtocolLimits_btc_min_deposit, value) {
			return
		}
	}
	if x.BtcMinWithdraw != int64(0) {
		value := protoreflect.ValueOfInt64(x.BtcMinWithdraw)
		if !f(fd_ProtocolLimits_btc_min_withdraw, value) {
			return
		}
	}
	if x.BtcMaxWithdraw != int64(0) {
		value := protoreflect.ValueOfInt64(x.BtcMaxWithdraw)
		if !f(fd_ProtocolLimits_btc_max_withdraw, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ProtocolLimits) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "side.btcbridge.ProtocolLimits.btc_min_deposit":
		return x.BtcMinDeposit != int64(0)
	case "side.btcbridge.ProtocolLimits.btc_min_withdraw":
		return x.BtcMinWithdraw != int64(0)
	case "side.btcbridge.ProtocolLimits.btc_max_withdraw":
		return x.BtcMaxWithdraw != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolLimits"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolLimits does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProtocolLimits) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "side.btcbridge.ProtocolLimits.btc_min_deposit":
		x.BtcMinDeposit = int64(0)
	case "side.btcbridge.ProtocolLimits.btc_min_withdraw":
		x.BtcMinWithdraw = int64(0)
	case "side.btcbridge.ProtocolLimits.btc_max_withdraw":
		x.BtcMaxWithdraw = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolLimits"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolLimits does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ProtocolLimits) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "side.btcbridge.ProtocolLimits.btc_min_deposit":
		value := x.BtcMinDeposit
		return protoreflect.ValueOfInt64(value)
	case "side.btcbridge.ProtocolLimits.btc_min_withdraw":
		value := x.BtcMinWithdraw
		return protoreflect.ValueOfInt64(value)
	case "side.btcbridge.ProtocolLimits.btc_max_withdraw":
		value := x.BtcMaxWithdraw
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolLimits"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolLimits does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProtocolLimits) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "side.btcbridge.ProtocolLimits.btc_min_deposit":
		x.BtcMinDeposit = value.Int()
	case "side.btcbridge.ProtocolLimits.btc_min_withdraw":
		x.BtcMinWithdraw = value.Int()
	case "side.btcbridge.ProtocolLimits.btc_max_withdraw":
		x.BtcMaxWithdraw = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolLimits"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolLimits does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProtocolLimits) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.ProtocolLimits.btc_min_deposit":
		panic(fmt.Errorf("field btc_min_deposit of message side.btcbridge.ProtocolLimits is not mutable"))
	case "side.btcbridge.ProtocolLimits.btc_min_withdraw":
		panic(fmt.Errorf("field btc_min_withdraw of message side.btcbridge.ProtocolLimits is not mutable"))
	case "side.btcbridge.ProtocolLimits.btc_max_withdraw":
		panic(fmt.Errorf("field btc_max_withdraw of message side.btcbridge.ProtocolLimits is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolLimits"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolLimits does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ProtocolLimits) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.ProtocolLimits.btc_min_deposit":
		return protoreflect.ValueOfInt64(int64(0))
	case "side.btcbridge.ProtocolLimits.btc_min_withdraw":
		return protoreflect.ValueOfInt64(int64(0))
	case "side.btcbridge.ProtocolLimits.btc_max_withdraw":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolLimits"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolLimits does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ProtocolLimits) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in side.btcbridge.ProtocolLimits", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ProtocolLimits) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProtocolLimits) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ProtocolLimits) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ProtocolLimits) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ProtocolLimits)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BtcMinDeposit != 0 {
			n += 1 + runtime.Sov(uint64(x.BtcMinDeposit))
		}
		if x.BtcMinWithdraw != 0 {
			n += 1 + runtime.Sov(uint64(x.BtcMinWithdraw))
		}
		if x.BtcMaxWithdraw != 0 {
			n += 1 + runtime.Sov(uint64(x.BtcMaxWithdraw))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ProtocolLimits)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BtcMaxWithdraw != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BtcMaxWithdraw))
			i--
			dAtA[i] = 0x18
		}
		if x.BtcMinWithdraw != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BtcMinWithdraw))
			i--
			dAtA[i] = 0x10
		}
		if x.BtcMinDeposit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BtcMinDeposit))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ProtocolLimits)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProtocolLimits: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProtocolLimits: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BtcMinDeposit", wireType)
				}
				x.BtcMinDeposit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BtcMinDeposit |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BtcMinWithdraw", wireType)
				}
				x.BtcMinWithdraw = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BtcMinWithdraw |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BtcMaxWithdraw", wireType)
				}
				x.BtcMaxWithdraw = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BtcMaxWithdraw |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ProtocolFees              protoreflect.MessageDescriptor
	fd_ProtocolFees_deposit_fee  protoreflect.FieldDescriptor
	fd_ProtocolFees_withdraw_fee protoreflect.FieldDescriptor
	fd_ProtocolFees_collector    protoreflect.FieldDescriptor
)

func init() {
	file_side_btcbridge_params_proto_init()
	md_ProtocolFees = File_side_btcbridge_params_proto.Messages().ByName("ProtocolFees")
	fd_ProtocolFees_deposit_fee = md_ProtocolFees.Fields().ByName("deposit_fee")
	fd_ProtocolFees_withdraw_fee = md_ProtocolFees.Fields().ByName("withdraw_fee")
	fd_ProtocolFees_collector = md_ProtocolFees.Fields().ByName("collector")
}

var _ protoreflect.Message = (*fastReflection_ProtocolFees)(nil)

type fastReflection_ProtocolFees ProtocolFees

func (x *ProtocolFees) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ProtocolFees)(x)
}

func (x *ProtocolFees) slowProtoReflect() protoreflect.Message {
	mi := &file_side_btcbridge_params_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ProtocolFees_messageType fastReflection_ProtocolFees_messageType
var _ protoreflect.MessageType = fastReflection_ProtocolFees_messageType{}

type fastReflection_ProtocolFees_messageType struct{}

func (x fastReflection_ProtocolFees_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ProtocolFees)(nil)
}
func (x fastReflection_ProtocolFees_messageType) New() protoreflect.Message {
	return new(fastReflection_ProtocolFees)
}
func (x fastReflection_ProtocolFees_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ProtocolFees
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ProtocolFees) Descriptor() protoreflect.MessageDescriptor {
	return md_ProtocolFees
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ProtocolFees) Type() protoreflect.MessageType {
	return _fastReflection_ProtocolFees_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ProtocolFees) New() protoreflect.Message {
	return new(fastReflection_ProtocolFees)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ProtocolFees) Interface() protoreflect.ProtoMessage {
	return (*ProtocolFees)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ProtocolFees) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.DepositFee != int64(0) {
		value := protoreflect.ValueOfInt64(x.DepositFee)
		if !f(fd_ProtocolFees_deposit_fee, value) {
			return
		}
	}
	if x.WithdrawFee != int64(0) {
		value := protoreflect.ValueOfInt64(x.WithdrawFee)
		if !f(fd_ProtocolFees_withdraw_fee, value) {
			return
		}
	}
	if x.Collector != "" {
		value := protoreflect.ValueOfString(x.Collector)
		if !f(fd_ProtocolFees_collector, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ProtocolFees) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "side.btcbridge.ProtocolFees.deposit_fee":
		return x.DepositFee != int64(0)
	case "side.btcbridge.ProtocolFees.withdraw_fee":
		return x.WithdrawFee != int64(0)
	case "side.btcbridge.ProtocolFees.collector":
		return x.Collector != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolFees"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolFees does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProtocolFees) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "side.btcbridge.ProtocolFees.deposit_fee":
		x.DepositFee = int64(0)
	case "side.btcbridge.ProtocolFees.withdraw_fee":
		x.WithdrawFee = int64(0)
	case "side.btcbridge.ProtocolFees.collector":
		x.Collector = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolFees"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolFees does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ProtocolFees) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "side.btcbridge.ProtocolFees.deposit_fee":
		value := x.DepositFee
		return protoreflect.ValueOfInt64(value)
	case "side.btcbridge.ProtocolFees.withdraw_fee":
		value := x.WithdrawFee
		return protoreflect.ValueOfInt64(value)
	case "side.btcbridge.ProtocolFees.collector":
		value := x.Collector
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolFees"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolFees does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProtocolFees) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "side.btcbridge.ProtocolFees.deposit_fee":
		x.DepositFee = value.Int()
	case "side.btcbridge.ProtocolFees.withdraw_fee":
		x.WithdrawFee = value.Int()
	case "side.btcbridge.ProtocolFees.collector":
		x.Collector = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolFees"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolFees does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProtocolFees) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.ProtocolFees.deposit_fee":
		panic(fmt.Errorf("field deposit_fee of message side.btcbridge.ProtocolFees is not mutable"))
	case "side.btcbridge.ProtocolFees.withdraw_fee":
		panic(fmt.Errorf("field withdraw_fee of message side.btcbridge.ProtocolFees is not mutable"))
	case "side.btcbridge.ProtocolFees.collector":
		panic(fmt.Errorf("field collector of message side.btcbridge.ProtocolFees is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolFees"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolFees does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ProtocolFees) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.ProtocolFees.deposit_fee":
		return protoreflect.ValueOfInt64(int64(0))
	case "side.btcbridge.ProtocolFees.withdraw_fee":
		return protoreflect.ValueOfInt64(int64(0))
	case "side.btcbridge.ProtocolFees.collector":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.ProtocolFees"))
		}
		panic(fmt.Errorf("message side.btcbridge.ProtocolFees does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ProtocolFees) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in side.btcbridge.ProtocolFees", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ProtocolFees) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProtocolFees) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ProtocolFees) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ProtocolFees) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ProtocolFees)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.DepositFee != 0 {
			n += 1 + runtime.Sov(uint64(x.DepositFee))
		}
		if x.WithdrawFee != 0 {
			n += 1 + runtime.Sov(uint64(x.WithdrawFee))
		}
		l = len(x.Collector)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ProtocolFees)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Collector) > 0 {
			i -= len(x.Collector)
			copy(dAtA[i:], x.Collector)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Collector)))
			i--
			dAtA[i] = 0x1a
		}
		if x.WithdrawFee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.WithdrawFee))
			i--
			dAtA[i] = 0x10
		}
		if x.DepositFee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DepositFee))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ProtocolFees)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProtocolFees: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProtocolFees: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositFee", wireType)
				}
				x.DepositFee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DepositFee |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawFee", wireType)
				}
				x.WithdrawFee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.WithdrawFee |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Collector", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Collector = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TSSParams                                      protoreflect.MessageDescriptor
	fd_TSSParams_dkg_timeout_period                   protoreflect.FieldDescriptor
	fd_TSSParams_participant_update_transition_period protoreflect.FieldDescriptor
)

func init() {
	file_side_btcbridge_params_proto_init()
	md_TSSParams = File_side_btcbridge_params_proto.Messages().ByName("TSSParams")
	fd_TSSParams_dkg_timeout_period = md_TSSParams.Fields().ByName("dkg_timeout_period")
	fd_TSSParams_participant_update_transition_period = md_TSSParams.Fields().ByName("participant_update_transition_period")
}

var _ protoreflect.Message = (*fastReflection_TSSParams)(nil)

type fastReflection_TSSParams TSSParams

func (x *TSSParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TSSParams)(x)
}

func (x *TSSParams) slowProtoReflect() protoreflect.Message {
	mi := &file_side_btcbridge_params_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TSSParams_messageType fastReflection_TSSParams_messageType
var _ protoreflect.MessageType = fastReflection_TSSParams_messageType{}

type fastReflection_TSSParams_messageType struct{}

func (x fastReflection_TSSParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TSSParams)(nil)
}
func (x fastReflection_TSSParams_messageType) New() protoreflect.Message {
	return new(fastReflection_TSSParams)
}
func (x fastReflection_TSSParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TSSParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TSSParams) Descriptor() protoreflect.MessageDescriptor {
	return md_TSSParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TSSParams) Type() protoreflect.MessageType {
	return _fastReflection_TSSParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TSSParams) New() protoreflect.Message {
	return new(fastReflection_TSSParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TSSParams) Interface() protoreflect.ProtoMessage {
	return (*TSSParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TSSParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.DkgTimeoutPeriod != nil {
		value := protoreflect.ValueOfMessage(x.DkgTimeoutPeriod.ProtoReflect())
		if !f(fd_TSSParams_dkg_timeout_period, value) {
			return
		}
	}
	if x.ParticipantUpdateTransitionPeriod != nil {
		value := protoreflect.ValueOfMessage(x.ParticipantUpdateTransitionPeriod.ProtoReflect())
		if !f(fd_TSSParams_participant_update_transition_period, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TSSParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "side.btcbridge.TSSParams.dkg_timeout_period":
		return x.DkgTimeoutPeriod != nil
	case "side.btcbridge.TSSParams.participant_update_transition_period":
		return x.ParticipantUpdateTransitionPeriod != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.TSSParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.TSSParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TSSParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "side.btcbridge.TSSParams.dkg_timeout_period":
		x.DkgTimeoutPeriod = nil
	case "side.btcbridge.TSSParams.participant_update_transition_period":
		x.ParticipantUpdateTransitionPeriod = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.TSSParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.TSSParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TSSParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "side.btcbridge.TSSParams.dkg_timeout_period":
		value := x.DkgTimeoutPeriod
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "side.btcbridge.TSSParams.participant_update_transition_period":
		value := x.ParticipantUpdateTransitionPeriod
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.TSSParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.TSSParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TSSParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "side.btcbridge.TSSParams.dkg_timeout_period":
		x.DkgTimeoutPeriod = value.Message().Interface().(*durationpb.Duration)
	case "side.btcbridge.TSSParams.participant_update_transition_period":
		x.ParticipantUpdateTransitionPeriod = value.Message().Interface().(*durationpb.Duration)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.TSSParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.TSSParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TSSParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.TSSParams.dkg_timeout_period":
		if x.DkgTimeoutPeriod == nil {
			x.DkgTimeoutPeriod = new(durationpb.Duration)
		}
		return protoreflect.ValueOfMessage(x.DkgTimeoutPeriod.ProtoReflect())
	case "side.btcbridge.TSSParams.participant_update_transition_period":
		if x.ParticipantUpdateTransitionPeriod == nil {
			x.ParticipantUpdateTransitionPeriod = new(durationpb.Duration)
		}
		return protoreflect.ValueOfMessage(x.ParticipantUpdateTransitionPeriod.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.TSSParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.TSSParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TSSParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.btcbridge.TSSParams.dkg_timeout_period":
		m := new(durationpb.Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "side.btcbridge.TSSParams.participant_update_transition_period":
		m := new(durationpb.Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.btcbridge.TSSParams"))
		}
		panic(fmt.Errorf("message side.btcbridge.TSSParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TSSParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in side.btcbridge.TSSParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TSSParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TSSParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TSSParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TSSParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TSSParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.DkgTimeoutPeriod != nil {
			l = options.Size(x.DkgTimeoutPeriod)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ParticipantUpdateTransitionPeriod != nil {
			l = options.Size(x.ParticipantUpdateTransitionPeriod)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TSSParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ParticipantUpdateTransitionPeriod != nil {
			encoded, err := options.Marshal(x.ParticipantUpdateTransitionPeriod)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.DkgTimeoutPeriod != nil {
			encoded, err := options.Marshal(x.DkgTimeoutPeriod)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TSSParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TSSParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TSSParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DkgTimeoutPeriod", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DkgTimeoutPeriod == nil {
					x.DkgTimeoutPeriod = &durationpb.Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DkgTimeoutPeriod); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParticipantUpdateTransitionPeriod", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ParticipantUpdateTransitionPeriod == nil {
					x.ParticipantUpdateTransitionPeriod = &durationpb.Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ParticipantUpdateTransitionPeriod); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: side/btcbridge/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AssetType defines the type of asset
type AssetType int32

const (
	// Unspecified asset type
	AssetType_ASSET_TYPE_UNSPECIFIED AssetType = 0
	// BTC
	AssetType_ASSET_TYPE_BTC AssetType = 1
	// BRC20: ordi, sats
	AssetType_ASSET_TYPE_BRC20 AssetType = 2
	// RUNE: dog•go•to•the•moon
	AssetType_ASSET_TYPE_RUNES AssetType = 3
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "ASSET_TYPE_UNSPECIFIED",
		1: "ASSET_TYPE_BTC",
		2: "ASSET_TYPE_BRC20",
		3: "ASSET_TYPE_RUNES",
	}
	AssetType_value = map[string]int32{
		"ASSET_TYPE_UNSPECIFIED": 0,
		"ASSET_TYPE_BTC":         1,
		"ASSET_TYPE_BRC20":       2,
		"ASSET_TYPE_RUNES":       3,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_side_btcbridge_params_proto_enumTypes[0].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_side_btcbridge_params_proto_enumTypes[0]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_side_btcbridge_params_proto_rawDescGZIP(), []int{0}
}

// Params defines the parameters for the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum number of confirmations required for a block to be accepted
	Confirmations int32 `protobuf:"varint,1,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// Indicates the maximum depth or distance from the latest block up to which transactions are considered for acceptance.
	MaxAcceptableBlockDepth uint64 `protobuf:"varint,2,opt,name=max_acceptable_block_depth,json=maxAcceptableBlockDepth,proto3" json:"max_acceptable_block_depth,omitempty"`
	// The denomination of the voucher
	BtcVoucherDenom string `protobuf:"bytes,3,opt,name=btc_voucher_denom,json=btcVoucherDenom,proto3" json:"btc_voucher_denom,omitempty"`
	// Indicates if deposit is enabled
	DepositEnabled bool `protobuf:"varint,4,opt,name=deposit_enabled,json=depositEnabled,proto3" json:"deposit_enabled,omitempty"`
	// Indicates if withdrawal is enabled
	WithdrawEnabled bool `protobuf:"varint,5,opt,name=withdraw_enabled,json=withdrawEnabled,proto3" json:"withdraw_enabled,omitempty"`
	// Trusted relayers for non-btc asset deposit
	TrustedNonBtcRelayers []string `protobuf:"bytes,6,rep,name=trusted_non_btc_relayers,json=trustedNonBtcRelayers,proto3" json:"trusted_non_btc_relayers,omitempty"`
	// Trusted oracles for providing offchain data, e.g. bitcoin fee rate
	TrustedOracles []string `protobuf:"bytes,7,rep,name=trusted_oracles,json=trustedOracles,proto3" json:"trusted_oracles,omitempty"`
	// Asset vaults
	Vaults []*Vault `protobuf:"bytes,8,rep,name=vaults,proto3" json:"vaults,omitempty"`
	// Withdrawal params
	WithdrawParams *WithdrawParams `protobuf:"bytes,9,opt,name=withdraw_params,json=withdrawParams,proto3" json:"withdraw_params,omitempty"`
	// Protocol limitations
	ProtocolLimits *ProtocolLimits `protobuf:"bytes,10,opt,name=protocol_limits,json=protocolLimits,proto3" json:"protocol_limits,omitempty"`
	// Protocol fees
	ProtocolFees *ProtocolFees `protobuf:"bytes,11,opt,name=protocol_fees,json=protocolFees,proto3" json:"protocol_fees,omitempty"`
	// TSS params
	TssParams *TSSParams `protobuf:"bytes,12,opt,name=tss_params,json=tssParams,proto3" json:"tss_params,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_side_btcbridge_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_side_btcbridge_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetConfirmations() int32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *Params) GetMaxAcceptableBlockDepth() uint64 {
	if x != nil {
		return x.MaxAcceptableBlockDepth
	}
	return 0
}

func (x *Params) GetBtcVoucherDenom() string {
	if x != nil {
		return x.BtcVoucherDenom
	}
	return ""
}

func (x *Params) GetDepositEnabled() bool {
	if x != nil {
		return x.DepositEnabled
	}
	return false
}

func (x *Params) GetWithdrawEnabled() bool {
	if x != nil {
		return x.WithdrawEnabled
	}
	return false
}

func (x *Params) GetTrustedNonBtcRelayers() []string {
	if x != nil {
		return x.TrustedNonBtcRelayers
	}
	return nil
}

func (x *Params) GetTrustedOracles() []string {
	if x != nil {
		return x.TrustedOracles
	}
	return nil
}

func (x *Params) GetVaults() []*Vault {
	if x != nil {
		return x.Vaults
	}
	return nil
}

func (x *Params) GetWithdrawParams() *WithdrawParams {
	if x != nil {
		return x.WithdrawParams
	}
	return nil
}

func (x *Params) GetProtocolLimits() *ProtocolLimits {
	if x != nil {
		return x.ProtocolLimits
	}
	return nil
}

func (x *Params) GetProtocolFees() *ProtocolFees {
	if x != nil {
		return x.ProtocolFees
	}
	return nil
}

func (x *Params) GetTssParams() *TSSParams {
	if x != nil {
		return x.TssParams
	}
	return nil
}

// Vault defines the asset vault
type Vault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the vault address for deposit
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// public key of the vault
	PubKey string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// the asset type supported by the vault
	AssetType AssetType `protobuf:"varint,3,opt,name=asset_type,json=assetType,proto3,enum=side.btcbridge.AssetType" json:"asset_type,omitempty"`
	// version
	Version uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Vault) Reset() {
	*x = Vault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_side_btcbridge_params_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vault) ProtoMessage() {}

// Deprecated: Use Vault.ProtoReflect.Descriptor instead.
func (*Vault) Descriptor() ([]byte, []int) {
	return file_side_btcbridge_params_proto_rawDescGZIP(), []int{1}
}

func (x *Vault) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Vault) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *Vault) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (x *Vault) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type WithdrawParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of utxos used to build the signing request; O means unlimited
	MaxUtxoNum uint32 `protobuf:"varint,1,opt,name=max_utxo_num,json=maxUtxoNum,proto3" json:"max_utxo_num,omitempty"`
	// Period for handling btc withdrawal requests
	BtcBatchWithdrawPeriod int64 `protobuf:"varint,2,opt,name=btc_batch_withdraw_period,json=btcBatchWithdrawPeriod,proto3" json:"btc_batch_withdraw_period,omitempty"`
	// Maximum number of btc withdrawal requests to be handled per batch
	MaxBtcBatchWithdrawNum uint32 `protobuf:"varint,3,opt,name=max_btc_batch_withdraw_num,json=maxBtcBatchWithdrawNum,proto3" json:"max_btc_batch_withdraw_num,omitempty"`
}

func (x *WithdrawParams) Reset() {
	*x = WithdrawParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_side_btcbridge_params_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawParams) ProtoMessage() {}

// Deprecated: Use WithdrawParams.ProtoReflect.Descriptor instead.
func (*WithdrawParams) Descriptor() ([]byte, []int) {
	return file_side_btcbridge_params_proto_rawDescGZIP(), []int{2}
}

func (x *WithdrawParams) GetMaxUtxoNum() uint32 {
	if x != nil {
		return x.MaxUtxoNum
	}
	return 0
}

func (x *WithdrawParams) GetBtcBatchWithdrawPeriod() int64 {
	if x != nil {
		return x.BtcBatchWithdrawPeriod
	}
	return 0
}

func (x *WithdrawParams) GetMaxBtcBatchWithdrawNum() uint32 {
	if x != nil {
		return x.MaxBtcBatchWithdrawNum
	}
	return 0
}

// ProtocolLimits defines the params related to the the protocol limitations
type ProtocolLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum deposit amount for btc in sat
	BtcMinDeposit int64 `protobuf:"varint,1,opt,name=btc_min_deposit,json=btcMinDeposit,proto3" json:"btc_min_deposit,omitempty"`
	// The minimum withdrawal amount for btc in sat
	BtcMinWithdraw int64 `protobuf:"varint,2,opt,name=btc_min_withdraw,json=btcMinWithdraw,proto3" json:"btc_min_withdraw,omitempty"`
	// The maximum withdrawal amount for btc in sat
	BtcMaxWithdraw int64 `protobuf:"varint,3,opt,name=btc_max_withdraw,json=btcMaxWithdraw,proto3" json:"btc_max_withdraw,omitempty"`
}

func (x *ProtocolLimits) Reset() {
	*x = ProtocolLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_side_btcbridge_params_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolLimits) ProtoMessage() {}

// Deprecated: Use ProtocolLimits.ProtoReflect.Descriptor instead.
func (*ProtocolLimits) Descriptor() ([]byte, []int) {
	return file_side_btcbridge_params_proto_rawDescGZIP(), []int{3}
}

func (x *ProtocolLimits) GetBtcMinDeposit() int64 {
	if x != nil {
		return x.BtcMinDeposit
	}
	return 0
}

func (x *ProtocolLimits) GetBtcMinWithdraw() int64 {
	if x != nil {
		return x.BtcMinWithdraw
	}
	return 0
}

func (x *ProtocolLimits) GetBtcMaxWithdraw() int64 {
	if x != nil {
		return x.BtcMaxWithdraw
	}
	return 0
}

// ProtocolFees defines the params related to the protocol fees
type ProtocolFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol fee amount for deposit in sat
	DepositFee int64 `protobuf:"varint,1,opt,name=deposit_fee,json=depositFee,proto3" json:"deposit_fee,omitempty"`
	// Protocol fee amount for withdrawal in sat
	WithdrawFee int64 `protobuf:"varint,2,opt,name=withdraw_fee,json=withdrawFee,proto3" json:"withdraw_fee,omitempty"`
	// Protocol fee collector
	Collector string `protobuf:"bytes,3,opt,name=collector,proto3" json:"collector,omitempty"`
}

func (x *ProtocolFees) Reset() {
	*x = ProtocolFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_side_btcbridge_params_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolFees) ProtoMessage() {}

// Deprecated: Use ProtocolFees.ProtoReflect.Descriptor instead.
func (*ProtocolFees) Descriptor() ([]byte, []int) {
	return file_side_btcbridge_params_proto_rawDescGZIP(), []int{4}
}

func (x *ProtocolFees) GetDepositFee() int64 {
	if x != nil {
		return x.DepositFee
	}
	return 0
}

func (x *ProtocolFees) GetWithdrawFee() int64 {
	if x != nil {
		return x.WithdrawFee
	}
	return 0
}

func (x *ProtocolFees) GetCollector() string {
	if x != nil {
		return x.Collector
	}
	return ""
}

// TSSParams defines the params related to TSS
type TSSParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timeout duration for DKG request
	DkgTimeoutPeriod *durationpb.Duration `protobuf:"bytes,1,opt,name=dkg_timeout_period,json=dkgTimeoutPeriod,proto3" json:"dkg_timeout_period,omitempty"`
	// Transition period after which TSS participants update process is completed
	ParticipantUpdateTransitionPeriod *durationpb.Duration `protobuf:"bytes,2,opt,name=participant_update_transition_period,json=participantUpdateTransitionPeriod,proto3" json:"participant_update_transition_period,omitempty"`
}

func (x *TSSParams) Reset() {
	*x = TSSParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_side_btcbridge_params_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSSParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSSParams) ProtoMessage() {}

// Deprecated: Use TSSParams.ProtoReflect.Descriptor instead.
func (*TSSParams) Descriptor() ([]byte, []int) {
	return file_side_btcbridge_params_proto_rawDescGZIP(), []int{5}
}

func (x *TSSParams) GetDkgTimeoutPeriod() *durationpb.Duration {
	if x != nil {
		return x.DkgTimeoutPeriod
	}
	return nil
}

func (x *TSSParams) GetParticipantUpdateTransitionPeriod() *durationpb.Duration {
	if x != nil {
		return x.ParticipantUpdateTransitionPeriod
	}
	return nil
}

var File_side_btcbridge_params_proto protoreflect.FileDescriptor

var file_side_btcbridge_params_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x69, 0x64, 0x65, 0x2f, 0x62, 0x74, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73,
	0x69, 0x64, 0x65, 0x2e, 0x62, 0x74, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x1a, 0x14, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x05, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x74, 0x63, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x74,
	0x63, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x62, 0x74, 0x63, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x42,
	0x74, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x62, 0x74, 0x63, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x2e, 0x62, 0x74, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x2e, 0x62, 0x74, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x47, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x62,
	0x74, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x46, 0x65, 0x65, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x74, 0x73, 0x73,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x2e, 0x62, 0x74, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x54,
	0x53, 0x53, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09,
	0x74, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x2e, 0x62, 0x74, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x55, 0x74, 0x78, 0x6f, 0x4e, 0x75, 0x6d, 0x12,
	0x39, 0x0a, 0x19, 0x62, 0x74, 0x63, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x62, 0x74, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x6d, 0x61,
	0x78, 0x5f, 0x62, 0x74, 0x63, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x6d, 0x61, 0x78, 0x42, 0x74, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x4e, 0x75, 0x6d, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x74, 0x63,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x62, 0x74, 0x63, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x74, 0x63, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x74, 0x63,
	0x4d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x74, 0x63, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x74, 0x63, 0x4d, 0x61, 0x78, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x22, 0x70, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xd4, 0x01, 0x0a, 0x09, 0x54, 0x53, 0x53, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x64, 0x6b, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xc8, 0xde,
	0x1f, 0x00, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x10, 0x64, 0x6b, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x74, 0x0a, 0x24, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x21, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2a, 0x67,
	0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x53, 0x53, 0x45, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x54, 0x43, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x43, 0x32, 0x30, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x55, 0x4e, 0x45, 0x53, 0x10, 0x03, 0x42, 0x9b, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x2e, 0x62, 0x74, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x42, 0x0b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x69, 0x64, 0x65, 0x2f, 0x62, 0x74, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0xa2, 0x02,
	0x03, 0x53, 0x42, 0x58, 0xaa, 0x02, 0x0e, 0x53, 0x69, 0x64, 0x65, 0x2e, 0x42, 0x74, 0x63, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0xca, 0x02, 0x0e, 0x53, 0x69, 0x64, 0x65, 0x5c, 0x42, 0x74, 0x63,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0xe2, 0x02, 0x1a, 0x53, 0x69, 0x64, 0x65, 0x5c, 0x42, 0x74,
	0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x53, 0x69, 0x64, 0x65, 0x3a, 0x3a, 0x42, 0x74, 0x63, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_side_btcbridge_params_proto_rawDescOnce sync.Once
	file_side_btcbridge_params_proto_rawDescData = file_side_btcbridge_params_proto_rawDesc
)

func file_side_btcbridge_params_proto_rawDescGZIP() []byte {
	file_side_btcbridge_params_proto_rawDescOnce.Do(func() {
		file_side_btcbridge_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_side_btcbridge_params_proto_rawDescData)
	})
	return file_side_btcbridge_params_proto_rawDescData
}

var file_side_btcbridge_params_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_side_btcbridge_params_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_side_btcbridge_params_proto_goTypes = []interface{}{
	(AssetType)(0),              // 0: side.btcbridge.AssetType
	(*Params)(nil),              // 1: side.btcbridge.Params
	(*Vault)(nil),               // 2: side.btcbridge.Vault
	(*WithdrawParams)(nil),      // 3: side.btcbridge.WithdrawParams
	(*ProtocolLimits)(nil),      // 4: side.btcbridge.ProtocolLimits
	(*ProtocolFees)(nil),        // 5: side.btcbridge.ProtocolFees
	(*TSSParams)(nil),           // 6: side.btcbridge.TSSParams
	(*durationpb.Duration)(nil), // 7: google.protobuf.Duration
}
var file_side_btcbridge_params_proto_depIdxs = []int32{
	2, // 0: side.btcbridge.Params.vaults:type_name -> side.btcbridge.Vault
	3, // 1: side.btcbridge.Params.withdraw_params:type_name -> side.btcbridge.WithdrawParams
	4, // 2: side.btcbridge.Params.protocol_limits:type_name -> side.btcbridge.ProtocolLimits
	5, // 3: side.btcbridge.Params.protocol_fees:type_name -> side.btcbridge.ProtocolFees
	6, // 4: side.btcbridge.Params.tss_params:type_name -> side.btcbridge.TSSParams
	0, // 5: side.btcbridge.Vault.asset_type:type_name -> side.btcbridge.AssetType
	7, // 6: side.btcbridge.TSSParams.dkg_timeout_period:type_name -> google.protobuf.Duration
	7, // 7: side.btcbridge.TSSParams.participant_update_transition_period:type_name -> google.protobuf.Duration
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_side_btcbridge_params_proto_init() }
func file_side_btcbridge_params_proto_init() {
	if File_side_btcbridge_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_side_btcbridge_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_side_btcbridge_params_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_side_btcbridge_params_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_side_btcbridge_params_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_side_btcbridge_params_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_side_btcbridge_params_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSSParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_side_btcbridge_params_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_side_btcbridge_params_proto_goTypes,
		DependencyIndexes: file_side_btcbridge_params_proto_depIdxs,
		EnumInfos:         file_side_btcbridge_params_proto_enumTypes,
		MessageInfos:      file_side_btcbridge_params_proto_msgTypes,
	}.Build()
	File_side_btcbridge_params_proto = out.File
	file_side_btcbridge_params_proto_rawDesc = nil
	file_side_btcbridge_params_proto_goTypes = nil
	file_side_btcbridge_params_proto_depIdxs = nil
}
