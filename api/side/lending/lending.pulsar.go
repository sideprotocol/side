// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package lending

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_LendingPool                 protoreflect.MessageDescriptor
	fd_LendingPool_id              protoreflect.FieldDescriptor
	fd_LendingPool_supply          protoreflect.FieldDescriptor
	fd_LendingPool_total_shares    protoreflect.FieldDescriptor
	fd_LendingPool_borrowed_amount protoreflect.FieldDescriptor
	fd_LendingPool_status          protoreflect.FieldDescriptor
)

func init() {
	file_side_lending_lending_proto_init()
	md_LendingPool = File_side_lending_lending_proto.Messages().ByName("LendingPool")
	fd_LendingPool_id = md_LendingPool.Fields().ByName("id")
	fd_LendingPool_supply = md_LendingPool.Fields().ByName("supply")
	fd_LendingPool_total_shares = md_LendingPool.Fields().ByName("total_shares")
	fd_LendingPool_borrowed_amount = md_LendingPool.Fields().ByName("borrowed_amount")
	fd_LendingPool_status = md_LendingPool.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_LendingPool)(nil)

type fastReflection_LendingPool LendingPool

func (x *LendingPool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LendingPool)(x)
}

func (x *LendingPool) slowProtoReflect() protoreflect.Message {
	mi := &file_side_lending_lending_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LendingPool_messageType fastReflection_LendingPool_messageType
var _ protoreflect.MessageType = fastReflection_LendingPool_messageType{}

type fastReflection_LendingPool_messageType struct{}

func (x fastReflection_LendingPool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LendingPool)(nil)
}
func (x fastReflection_LendingPool_messageType) New() protoreflect.Message {
	return new(fastReflection_LendingPool)
}
func (x fastReflection_LendingPool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LendingPool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LendingPool) Descriptor() protoreflect.MessageDescriptor {
	return md_LendingPool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LendingPool) Type() protoreflect.MessageType {
	return _fastReflection_LendingPool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LendingPool) New() protoreflect.Message {
	return new(fastReflection_LendingPool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LendingPool) Interface() protoreflect.ProtoMessage {
	return (*LendingPool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LendingPool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != "" {
		value := protoreflect.ValueOfString(x.Id)
		if !f(fd_LendingPool_id, value) {
			return
		}
	}
	if x.Supply != nil {
		value := protoreflect.ValueOfMessage(x.Supply.ProtoReflect())
		if !f(fd_LendingPool_supply, value) {
			return
		}
	}
	if x.TotalShares != "" {
		value := protoreflect.ValueOfString(x.TotalShares)
		if !f(fd_LendingPool_total_shares, value) {
			return
		}
	}
	if x.BorrowedAmount != "" {
		value := protoreflect.ValueOfString(x.BorrowedAmount)
		if !f(fd_LendingPool_borrowed_amount, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_LendingPool_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LendingPool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "side.lending.LendingPool.id":
		return x.Id != ""
	case "side.lending.LendingPool.supply":
		return x.Supply != nil
	case "side.lending.LendingPool.total_shares":
		return x.TotalShares != ""
	case "side.lending.LendingPool.borrowed_amount":
		return x.BorrowedAmount != ""
	case "side.lending.LendingPool.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.LendingPool"))
		}
		panic(fmt.Errorf("message side.lending.LendingPool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LendingPool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "side.lending.LendingPool.id":
		x.Id = ""
	case "side.lending.LendingPool.supply":
		x.Supply = nil
	case "side.lending.LendingPool.total_shares":
		x.TotalShares = ""
	case "side.lending.LendingPool.borrowed_amount":
		x.BorrowedAmount = ""
	case "side.lending.LendingPool.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.LendingPool"))
		}
		panic(fmt.Errorf("message side.lending.LendingPool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LendingPool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "side.lending.LendingPool.id":
		value := x.Id
		return protoreflect.ValueOfString(value)
	case "side.lending.LendingPool.supply":
		value := x.Supply
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "side.lending.LendingPool.total_shares":
		value := x.TotalShares
		return protoreflect.ValueOfString(value)
	case "side.lending.LendingPool.borrowed_amount":
		value := x.BorrowedAmount
		return protoreflect.ValueOfString(value)
	case "side.lending.LendingPool.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.LendingPool"))
		}
		panic(fmt.Errorf("message side.lending.LendingPool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LendingPool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "side.lending.LendingPool.id":
		x.Id = value.Interface().(string)
	case "side.lending.LendingPool.supply":
		x.Supply = value.Message().Interface().(*v1beta1.Coin)
	case "side.lending.LendingPool.total_shares":
		x.TotalShares = value.Interface().(string)
	case "side.lending.LendingPool.borrowed_amount":
		x.BorrowedAmount = value.Interface().(string)
	case "side.lending.LendingPool.status":
		x.Status = (PoolStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.LendingPool"))
		}
		panic(fmt.Errorf("message side.lending.LendingPool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LendingPool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.lending.LendingPool.supply":
		if x.Supply == nil {
			x.Supply = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Supply.ProtoReflect())
	case "side.lending.LendingPool.id":
		panic(fmt.Errorf("field id of message side.lending.LendingPool is not mutable"))
	case "side.lending.LendingPool.total_shares":
		panic(fmt.Errorf("field total_shares of message side.lending.LendingPool is not mutable"))
	case "side.lending.LendingPool.borrowed_amount":
		panic(fmt.Errorf("field borrowed_amount of message side.lending.LendingPool is not mutable"))
	case "side.lending.LendingPool.status":
		panic(fmt.Errorf("field status of message side.lending.LendingPool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.LendingPool"))
		}
		panic(fmt.Errorf("message side.lending.LendingPool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LendingPool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.lending.LendingPool.id":
		return protoreflect.ValueOfString("")
	case "side.lending.LendingPool.supply":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "side.lending.LendingPool.total_shares":
		return protoreflect.ValueOfString("")
	case "side.lending.LendingPool.borrowed_amount":
		return protoreflect.ValueOfString("")
	case "side.lending.LendingPool.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.LendingPool"))
		}
		panic(fmt.Errorf("message side.lending.LendingPool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LendingPool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in side.lending.LendingPool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LendingPool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LendingPool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LendingPool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LendingPool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LendingPool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Id)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Supply != nil {
			l = options.Size(x.Supply)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalShares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BorrowedAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LendingPool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x28
		}
		if len(x.BorrowedAmount) > 0 {
			i -= len(x.BorrowedAmount)
			copy(dAtA[i:], x.BorrowedAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BorrowedAmount)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.TotalShares) > 0 {
			i -= len(x.TotalShares)
			copy(dAtA[i:], x.TotalShares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalShares)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Supply != nil {
			encoded, err := options.Marshal(x.Supply)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Id) > 0 {
			i -= len(x.Id)
			copy(dAtA[i:], x.Id)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Id)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LendingPool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LendingPool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LendingPool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Supply == nil {
					x.Supply = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Supply); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalShares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BorrowedAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BorrowedAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= PoolStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DepositLog               protoreflect.MessageDescriptor
	fd_DepositLog_txid          protoreflect.FieldDescriptor
	fd_DepositLog_vault_address protoreflect.FieldDescriptor
	fd_DepositLog_deposit_tx    protoreflect.FieldDescriptor
)

func init() {
	file_side_lending_lending_proto_init()
	md_DepositLog = File_side_lending_lending_proto.Messages().ByName("DepositLog")
	fd_DepositLog_txid = md_DepositLog.Fields().ByName("txid")
	fd_DepositLog_vault_address = md_DepositLog.Fields().ByName("vault_address")
	fd_DepositLog_deposit_tx = md_DepositLog.Fields().ByName("deposit_tx")
}

var _ protoreflect.Message = (*fastReflection_DepositLog)(nil)

type fastReflection_DepositLog DepositLog

func (x *DepositLog) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DepositLog)(x)
}

func (x *DepositLog) slowProtoReflect() protoreflect.Message {
	mi := &file_side_lending_lending_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DepositLog_messageType fastReflection_DepositLog_messageType
var _ protoreflect.MessageType = fastReflection_DepositLog_messageType{}

type fastReflection_DepositLog_messageType struct{}

func (x fastReflection_DepositLog_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DepositLog)(nil)
}
func (x fastReflection_DepositLog_messageType) New() protoreflect.Message {
	return new(fastReflection_DepositLog)
}
func (x fastReflection_DepositLog_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositLog
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DepositLog) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositLog
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DepositLog) Type() protoreflect.MessageType {
	return _fastReflection_DepositLog_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DepositLog) New() protoreflect.Message {
	return new(fastReflection_DepositLog)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DepositLog) Interface() protoreflect.ProtoMessage {
	return (*DepositLog)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DepositLog) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Txid != "" {
		value := protoreflect.ValueOfString(x.Txid)
		if !f(fd_DepositLog_txid, value) {
			return
		}
	}
	if x.VaultAddress != "" {
		value := protoreflect.ValueOfString(x.VaultAddress)
		if !f(fd_DepositLog_vault_address, value) {
			return
		}
	}
	if x.DepositTx != "" {
		value := protoreflect.ValueOfString(x.DepositTx)
		if !f(fd_DepositLog_deposit_tx, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DepositLog) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "side.lending.DepositLog.txid":
		return x.Txid != ""
	case "side.lending.DepositLog.vault_address":
		return x.VaultAddress != ""
	case "side.lending.DepositLog.deposit_tx":
		return x.DepositTx != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.DepositLog"))
		}
		panic(fmt.Errorf("message side.lending.DepositLog does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositLog) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "side.lending.DepositLog.txid":
		x.Txid = ""
	case "side.lending.DepositLog.vault_address":
		x.VaultAddress = ""
	case "side.lending.DepositLog.deposit_tx":
		x.DepositTx = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.DepositLog"))
		}
		panic(fmt.Errorf("message side.lending.DepositLog does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DepositLog) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "side.lending.DepositLog.txid":
		value := x.Txid
		return protoreflect.ValueOfString(value)
	case "side.lending.DepositLog.vault_address":
		value := x.VaultAddress
		return protoreflect.ValueOfString(value)
	case "side.lending.DepositLog.deposit_tx":
		value := x.DepositTx
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.DepositLog"))
		}
		panic(fmt.Errorf("message side.lending.DepositLog does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositLog) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "side.lending.DepositLog.txid":
		x.Txid = value.Interface().(string)
	case "side.lending.DepositLog.vault_address":
		x.VaultAddress = value.Interface().(string)
	case "side.lending.DepositLog.deposit_tx":
		x.DepositTx = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.DepositLog"))
		}
		panic(fmt.Errorf("message side.lending.DepositLog does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositLog) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.lending.DepositLog.txid":
		panic(fmt.Errorf("field txid of message side.lending.DepositLog is not mutable"))
	case "side.lending.DepositLog.vault_address":
		panic(fmt.Errorf("field vault_address of message side.lending.DepositLog is not mutable"))
	case "side.lending.DepositLog.deposit_tx":
		panic(fmt.Errorf("field deposit_tx of message side.lending.DepositLog is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.DepositLog"))
		}
		panic(fmt.Errorf("message side.lending.DepositLog does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DepositLog) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.lending.DepositLog.txid":
		return protoreflect.ValueOfString("")
	case "side.lending.DepositLog.vault_address":
		return protoreflect.ValueOfString("")
	case "side.lending.DepositLog.deposit_tx":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.DepositLog"))
		}
		panic(fmt.Errorf("message side.lending.DepositLog does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DepositLog) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in side.lending.DepositLog", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DepositLog) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositLog) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DepositLog) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DepositLog) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DepositLog)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Txid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.VaultAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DepositTx)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DepositLog)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.DepositTx) > 0 {
			i -= len(x.DepositTx)
			copy(dAtA[i:], x.DepositTx)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DepositTx)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Txid) > 0 {
			i -= len(x.Txid)
			copy(dAtA[i:], x.Txid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Txid)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.VaultAddress) > 0 {
			i -= len(x.VaultAddress)
			copy(dAtA[i:], x.VaultAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VaultAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DepositLog)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositLog: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositLog: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Txid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VaultAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositTx", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DepositTx = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Loan_13_list)(nil)

type _Loan_13_list struct {
	list *[]string
}

func (x *_Loan_13_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Loan_13_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Loan_13_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Loan_13_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Loan_13_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Loan at list field DepositTxs as it is not of Message kind"))
}

func (x *_Loan_13_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Loan_13_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Loan_13_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Loan                     protoreflect.MessageDescriptor
	fd_Loan_vault_address       protoreflect.FieldDescriptor
	fd_Loan_borrower            protoreflect.FieldDescriptor
	fd_Loan_agency              protoreflect.FieldDescriptor
	fd_Loan_hash_loan_secret    protoreflect.FieldDescriptor
	fd_Loan_maturity_time       protoreflect.FieldDescriptor
	fd_Loan_final_timeout       protoreflect.FieldDescriptor
	fd_Loan_borrow_amount       protoreflect.FieldDescriptor
	fd_Loan_fees                protoreflect.FieldDescriptor
	fd_Loan_interests           protoreflect.FieldDescriptor
	fd_Loan_term                protoreflect.FieldDescriptor
	fd_Loan_event_id            protoreflect.FieldDescriptor
	fd_Loan_attestation_id      protoreflect.FieldDescriptor
	fd_Loan_deposit_txs         protoreflect.FieldDescriptor
	fd_Loan_collateral_amount   protoreflect.FieldDescriptor
	fd_Loan_cets                protoreflect.FieldDescriptor
	fd_Loan_loan_secret         protoreflect.FieldDescriptor
	fd_Loan_repay_adaptor_point protoreflect.FieldDescriptor
	fd_Loan_create_at           protoreflect.FieldDescriptor
	fd_Loan_status              protoreflect.FieldDescriptor
	fd_Loan_pool_id             protoreflect.FieldDescriptor
)

func init() {
	file_side_lending_lending_proto_init()
	md_Loan = File_side_lending_lending_proto.Messages().ByName("Loan")
	fd_Loan_vault_address = md_Loan.Fields().ByName("vault_address")
	fd_Loan_borrower = md_Loan.Fields().ByName("borrower")
	fd_Loan_agency = md_Loan.Fields().ByName("agency")
	fd_Loan_hash_loan_secret = md_Loan.Fields().ByName("hash_loan_secret")
	fd_Loan_maturity_time = md_Loan.Fields().ByName("maturity_time")
	fd_Loan_final_timeout = md_Loan.Fields().ByName("final_timeout")
	fd_Loan_borrow_amount = md_Loan.Fields().ByName("borrow_amount")
	fd_Loan_fees = md_Loan.Fields().ByName("fees")
	fd_Loan_interests = md_Loan.Fields().ByName("interests")
	fd_Loan_term = md_Loan.Fields().ByName("term")
	fd_Loan_event_id = md_Loan.Fields().ByName("event_id")
	fd_Loan_attestation_id = md_Loan.Fields().ByName("attestation_id")
	fd_Loan_deposit_txs = md_Loan.Fields().ByName("deposit_txs")
	fd_Loan_collateral_amount = md_Loan.Fields().ByName("collateral_amount")
	fd_Loan_cets = md_Loan.Fields().ByName("cets")
	fd_Loan_loan_secret = md_Loan.Fields().ByName("loan_secret")
	fd_Loan_repay_adaptor_point = md_Loan.Fields().ByName("repay_adaptor_point")
	fd_Loan_create_at = md_Loan.Fields().ByName("create_at")
	fd_Loan_status = md_Loan.Fields().ByName("status")
	fd_Loan_pool_id = md_Loan.Fields().ByName("pool_id")
}

var _ protoreflect.Message = (*fastReflection_Loan)(nil)

type fastReflection_Loan Loan

func (x *Loan) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Loan)(x)
}

func (x *Loan) slowProtoReflect() protoreflect.Message {
	mi := &file_side_lending_lending_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Loan_messageType fastReflection_Loan_messageType
var _ protoreflect.MessageType = fastReflection_Loan_messageType{}

type fastReflection_Loan_messageType struct{}

func (x fastReflection_Loan_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Loan)(nil)
}
func (x fastReflection_Loan_messageType) New() protoreflect.Message {
	return new(fastReflection_Loan)
}
func (x fastReflection_Loan_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Loan
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Loan) Descriptor() protoreflect.MessageDescriptor {
	return md_Loan
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Loan) Type() protoreflect.MessageType {
	return _fastReflection_Loan_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Loan) New() protoreflect.Message {
	return new(fastReflection_Loan)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Loan) Interface() protoreflect.ProtoMessage {
	return (*Loan)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Loan) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.VaultAddress != "" {
		value := protoreflect.ValueOfString(x.VaultAddress)
		if !f(fd_Loan_vault_address, value) {
			return
		}
	}
	if x.Borrower != "" {
		value := protoreflect.ValueOfString(x.Borrower)
		if !f(fd_Loan_borrower, value) {
			return
		}
	}
	if x.Agency != "" {
		value := protoreflect.ValueOfString(x.Agency)
		if !f(fd_Loan_agency, value) {
			return
		}
	}
	if x.HashLoanSecret != "" {
		value := protoreflect.ValueOfString(x.HashLoanSecret)
		if !f(fd_Loan_hash_loan_secret, value) {
			return
		}
	}
	if x.MaturityTime != int64(0) {
		value := protoreflect.ValueOfInt64(x.MaturityTime)
		if !f(fd_Loan_maturity_time, value) {
			return
		}
	}
	if x.FinalTimeout != int64(0) {
		value := protoreflect.ValueOfInt64(x.FinalTimeout)
		if !f(fd_Loan_final_timeout, value) {
			return
		}
	}
	if x.BorrowAmount != nil {
		value := protoreflect.ValueOfMessage(x.BorrowAmount.ProtoReflect())
		if !f(fd_Loan_borrow_amount, value) {
			return
		}
	}
	if x.Fees != "" {
		value := protoreflect.ValueOfString(x.Fees)
		if !f(fd_Loan_fees, value) {
			return
		}
	}
	if x.Interests != "" {
		value := protoreflect.ValueOfString(x.Interests)
		if !f(fd_Loan_interests, value) {
			return
		}
	}
	if x.Term != "" {
		value := protoreflect.ValueOfString(x.Term)
		if !f(fd_Loan_term, value) {
			return
		}
	}
	if x.EventId != "" {
		value := protoreflect.ValueOfString(x.EventId)
		if !f(fd_Loan_event_id, value) {
			return
		}
	}
	if x.AttestationId != "" {
		value := protoreflect.ValueOfString(x.AttestationId)
		if !f(fd_Loan_attestation_id, value) {
			return
		}
	}
	if len(x.DepositTxs) != 0 {
		value := protoreflect.ValueOfList(&_Loan_13_list{list: &x.DepositTxs})
		if !f(fd_Loan_deposit_txs, value) {
			return
		}
	}
	if x.CollateralAmount != "" {
		value := protoreflect.ValueOfString(x.CollateralAmount)
		if !f(fd_Loan_collateral_amount, value) {
			return
		}
	}
	if x.Cets != "" {
		value := protoreflect.ValueOfString(x.Cets)
		if !f(fd_Loan_cets, value) {
			return
		}
	}
	if x.LoanSecret != "" {
		value := protoreflect.ValueOfString(x.LoanSecret)
		if !f(fd_Loan_loan_secret, value) {
			return
		}
	}
	if x.RepayAdaptorPoint != "" {
		value := protoreflect.ValueOfString(x.RepayAdaptorPoint)
		if !f(fd_Loan_repay_adaptor_point, value) {
			return
		}
	}
	if x.CreateAt != nil {
		value := protoreflect.ValueOfMessage(x.CreateAt.ProtoReflect())
		if !f(fd_Loan_create_at, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Loan_status, value) {
			return
		}
	}
	if x.PoolId != "" {
		value := protoreflect.ValueOfString(x.PoolId)
		if !f(fd_Loan_pool_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Loan) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "side.lending.Loan.vault_address":
		return x.VaultAddress != ""
	case "side.lending.Loan.borrower":
		return x.Borrower != ""
	case "side.lending.Loan.agency":
		return x.Agency != ""
	case "side.lending.Loan.hash_loan_secret":
		return x.HashLoanSecret != ""
	case "side.lending.Loan.maturity_time":
		return x.MaturityTime != int64(0)
	case "side.lending.Loan.final_timeout":
		return x.FinalTimeout != int64(0)
	case "side.lending.Loan.borrow_amount":
		return x.BorrowAmount != nil
	case "side.lending.Loan.fees":
		return x.Fees != ""
	case "side.lending.Loan.interests":
		return x.Interests != ""
	case "side.lending.Loan.term":
		return x.Term != ""
	case "side.lending.Loan.event_id":
		return x.EventId != ""
	case "side.lending.Loan.attestation_id":
		return x.AttestationId != ""
	case "side.lending.Loan.deposit_txs":
		return len(x.DepositTxs) != 0
	case "side.lending.Loan.collateral_amount":
		return x.CollateralAmount != ""
	case "side.lending.Loan.cets":
		return x.Cets != ""
	case "side.lending.Loan.loan_secret":
		return x.LoanSecret != ""
	case "side.lending.Loan.repay_adaptor_point":
		return x.RepayAdaptorPoint != ""
	case "side.lending.Loan.create_at":
		return x.CreateAt != nil
	case "side.lending.Loan.status":
		return x.Status != 0
	case "side.lending.Loan.pool_id":
		return x.PoolId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.Loan"))
		}
		panic(fmt.Errorf("message side.lending.Loan does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Loan) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "side.lending.Loan.vault_address":
		x.VaultAddress = ""
	case "side.lending.Loan.borrower":
		x.Borrower = ""
	case "side.lending.Loan.agency":
		x.Agency = ""
	case "side.lending.Loan.hash_loan_secret":
		x.HashLoanSecret = ""
	case "side.lending.Loan.maturity_time":
		x.MaturityTime = int64(0)
	case "side.lending.Loan.final_timeout":
		x.FinalTimeout = int64(0)
	case "side.lending.Loan.borrow_amount":
		x.BorrowAmount = nil
	case "side.lending.Loan.fees":
		x.Fees = ""
	case "side.lending.Loan.interests":
		x.Interests = ""
	case "side.lending.Loan.term":
		x.Term = ""
	case "side.lending.Loan.event_id":
		x.EventId = ""
	case "side.lending.Loan.attestation_id":
		x.AttestationId = ""
	case "side.lending.Loan.deposit_txs":
		x.DepositTxs = nil
	case "side.lending.Loan.collateral_amount":
		x.CollateralAmount = ""
	case "side.lending.Loan.cets":
		x.Cets = ""
	case "side.lending.Loan.loan_secret":
		x.LoanSecret = ""
	case "side.lending.Loan.repay_adaptor_point":
		x.RepayAdaptorPoint = ""
	case "side.lending.Loan.create_at":
		x.CreateAt = nil
	case "side.lending.Loan.status":
		x.Status = 0
	case "side.lending.Loan.pool_id":
		x.PoolId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.Loan"))
		}
		panic(fmt.Errorf("message side.lending.Loan does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Loan) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "side.lending.Loan.vault_address":
		value := x.VaultAddress
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.borrower":
		value := x.Borrower
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.agency":
		value := x.Agency
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.hash_loan_secret":
		value := x.HashLoanSecret
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.maturity_time":
		value := x.MaturityTime
		return protoreflect.ValueOfInt64(value)
	case "side.lending.Loan.final_timeout":
		value := x.FinalTimeout
		return protoreflect.ValueOfInt64(value)
	case "side.lending.Loan.borrow_amount":
		value := x.BorrowAmount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "side.lending.Loan.fees":
		value := x.Fees
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.interests":
		value := x.Interests
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.term":
		value := x.Term
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.event_id":
		value := x.EventId
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.attestation_id":
		value := x.AttestationId
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.deposit_txs":
		if len(x.DepositTxs) == 0 {
			return protoreflect.ValueOfList(&_Loan_13_list{})
		}
		listValue := &_Loan_13_list{list: &x.DepositTxs}
		return protoreflect.ValueOfList(listValue)
	case "side.lending.Loan.collateral_amount":
		value := x.CollateralAmount
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.cets":
		value := x.Cets
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.loan_secret":
		value := x.LoanSecret
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.repay_adaptor_point":
		value := x.RepayAdaptorPoint
		return protoreflect.ValueOfString(value)
	case "side.lending.Loan.create_at":
		value := x.CreateAt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "side.lending.Loan.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "side.lending.Loan.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.Loan"))
		}
		panic(fmt.Errorf("message side.lending.Loan does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Loan) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "side.lending.Loan.vault_address":
		x.VaultAddress = value.Interface().(string)
	case "side.lending.Loan.borrower":
		x.Borrower = value.Interface().(string)
	case "side.lending.Loan.agency":
		x.Agency = value.Interface().(string)
	case "side.lending.Loan.hash_loan_secret":
		x.HashLoanSecret = value.Interface().(string)
	case "side.lending.Loan.maturity_time":
		x.MaturityTime = value.Int()
	case "side.lending.Loan.final_timeout":
		x.FinalTimeout = value.Int()
	case "side.lending.Loan.borrow_amount":
		x.BorrowAmount = value.Message().Interface().(*v1beta1.Coin)
	case "side.lending.Loan.fees":
		x.Fees = value.Interface().(string)
	case "side.lending.Loan.interests":
		x.Interests = value.Interface().(string)
	case "side.lending.Loan.term":
		x.Term = value.Interface().(string)
	case "side.lending.Loan.event_id":
		x.EventId = value.Interface().(string)
	case "side.lending.Loan.attestation_id":
		x.AttestationId = value.Interface().(string)
	case "side.lending.Loan.deposit_txs":
		lv := value.List()
		clv := lv.(*_Loan_13_list)
		x.DepositTxs = *clv.list
	case "side.lending.Loan.collateral_amount":
		x.CollateralAmount = value.Interface().(string)
	case "side.lending.Loan.cets":
		x.Cets = value.Interface().(string)
	case "side.lending.Loan.loan_secret":
		x.LoanSecret = value.Interface().(string)
	case "side.lending.Loan.repay_adaptor_point":
		x.RepayAdaptorPoint = value.Interface().(string)
	case "side.lending.Loan.create_at":
		x.CreateAt = value.Message().Interface().(*timestamppb.Timestamp)
	case "side.lending.Loan.status":
		x.Status = (LoanStatus)(value.Enum())
	case "side.lending.Loan.pool_id":
		x.PoolId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.Loan"))
		}
		panic(fmt.Errorf("message side.lending.Loan does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Loan) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.lending.Loan.borrow_amount":
		if x.BorrowAmount == nil {
			x.BorrowAmount = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.BorrowAmount.ProtoReflect())
	case "side.lending.Loan.deposit_txs":
		if x.DepositTxs == nil {
			x.DepositTxs = []string{}
		}
		value := &_Loan_13_list{list: &x.DepositTxs}
		return protoreflect.ValueOfList(value)
	case "side.lending.Loan.create_at":
		if x.CreateAt == nil {
			x.CreateAt = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.CreateAt.ProtoReflect())
	case "side.lending.Loan.vault_address":
		panic(fmt.Errorf("field vault_address of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.borrower":
		panic(fmt.Errorf("field borrower of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.agency":
		panic(fmt.Errorf("field agency of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.hash_loan_secret":
		panic(fmt.Errorf("field hash_loan_secret of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.maturity_time":
		panic(fmt.Errorf("field maturity_time of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.final_timeout":
		panic(fmt.Errorf("field final_timeout of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.fees":
		panic(fmt.Errorf("field fees of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.interests":
		panic(fmt.Errorf("field interests of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.term":
		panic(fmt.Errorf("field term of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.event_id":
		panic(fmt.Errorf("field event_id of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.attestation_id":
		panic(fmt.Errorf("field attestation_id of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.collateral_amount":
		panic(fmt.Errorf("field collateral_amount of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.cets":
		panic(fmt.Errorf("field cets of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.loan_secret":
		panic(fmt.Errorf("field loan_secret of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.repay_adaptor_point":
		panic(fmt.Errorf("field repay_adaptor_point of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.status":
		panic(fmt.Errorf("field status of message side.lending.Loan is not mutable"))
	case "side.lending.Loan.pool_id":
		panic(fmt.Errorf("field pool_id of message side.lending.Loan is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.Loan"))
		}
		panic(fmt.Errorf("message side.lending.Loan does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Loan) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "side.lending.Loan.vault_address":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.borrower":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.agency":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.hash_loan_secret":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.maturity_time":
		return protoreflect.ValueOfInt64(int64(0))
	case "side.lending.Loan.final_timeout":
		return protoreflect.ValueOfInt64(int64(0))
	case "side.lending.Loan.borrow_amount":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "side.lending.Loan.fees":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.interests":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.term":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.event_id":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.attestation_id":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.deposit_txs":
		list := []string{}
		return protoreflect.ValueOfList(&_Loan_13_list{list: &list})
	case "side.lending.Loan.collateral_amount":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.cets":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.loan_secret":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.repay_adaptor_point":
		return protoreflect.ValueOfString("")
	case "side.lending.Loan.create_at":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "side.lending.Loan.status":
		return protoreflect.ValueOfEnum(0)
	case "side.lending.Loan.pool_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: side.lending.Loan"))
		}
		panic(fmt.Errorf("message side.lending.Loan does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Loan) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in side.lending.Loan", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Loan) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Loan) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Loan) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Loan) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Loan)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.VaultAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Borrower)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Agency)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.HashLoanSecret)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaturityTime != 0 {
			n += 1 + runtime.Sov(uint64(x.MaturityTime))
		}
		if x.FinalTimeout != 0 {
			n += 1 + runtime.Sov(uint64(x.FinalTimeout))
		}
		if x.BorrowAmount != nil {
			l = options.Size(x.BorrowAmount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Fees)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Interests)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Term)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EventId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AttestationId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.DepositTxs) > 0 {
			for _, s := range x.DepositTxs {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.CollateralAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Cets)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LoanSecret)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RepayAdaptorPoint)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.CreateAt != nil {
			l = options.Size(x.CreateAt)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 2 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.PoolId)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Loan)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PoolId) > 0 {
			i -= len(x.PoolId)
			copy(dAtA[i:], x.PoolId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PoolId)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
		if x.CreateAt != nil {
			encoded, err := options.Marshal(x.CreateAt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
		if len(x.RepayAdaptorPoint) > 0 {
			i -= len(x.RepayAdaptorPoint)
			copy(dAtA[i:], x.RepayAdaptorPoint)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RepayAdaptorPoint)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if len(x.LoanSecret) > 0 {
			i -= len(x.LoanSecret)
			copy(dAtA[i:], x.LoanSecret)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LoanSecret)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.Cets) > 0 {
			i -= len(x.Cets)
			copy(dAtA[i:], x.Cets)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Cets)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.CollateralAmount) > 0 {
			i -= len(x.CollateralAmount)
			copy(dAtA[i:], x.CollateralAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CollateralAmount)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.DepositTxs) > 0 {
			for iNdEx := len(x.DepositTxs) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.DepositTxs[iNdEx])
				copy(dAtA[i:], x.DepositTxs[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DepositTxs[iNdEx])))
				i--
				dAtA[i] = 0x6a
			}
		}
		if len(x.AttestationId) > 0 {
			i -= len(x.AttestationId)
			copy(dAtA[i:], x.AttestationId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AttestationId)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.EventId) > 0 {
			i -= len(x.EventId)
			copy(dAtA[i:], x.EventId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EventId)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.Interests) > 0 {
			i -= len(x.Interests)
			copy(dAtA[i:], x.Interests)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Interests)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.Term) > 0 {
			i -= len(x.Term)
			copy(dAtA[i:], x.Term)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Term)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.Fees) > 0 {
			i -= len(x.Fees)
			copy(dAtA[i:], x.Fees)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Fees)))
			i--
			dAtA[i] = 0x42
		}
		if x.BorrowAmount != nil {
			encoded, err := options.Marshal(x.BorrowAmount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.FinalTimeout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FinalTimeout))
			i--
			dAtA[i] = 0x30
		}
		if x.MaturityTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaturityTime))
			i--
			dAtA[i] = 0x28
		}
		if len(x.HashLoanSecret) > 0 {
			i -= len(x.HashLoanSecret)
			copy(dAtA[i:], x.HashLoanSecret)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HashLoanSecret)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Agency) > 0 {
			i -= len(x.Agency)
			copy(dAtA[i:], x.Agency)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Agency)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Borrower) > 0 {
			i -= len(x.Borrower)
			copy(dAtA[i:], x.Borrower)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Borrower)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.VaultAddress) > 0 {
			i -= len(x.VaultAddress)
			copy(dAtA[i:], x.VaultAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VaultAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Loan)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Loan: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Loan: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VaultAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Borrower", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Borrower = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Agency", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Agency = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HashLoanSecret", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HashLoanSecret = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaturityTime", wireType)
				}
				x.MaturityTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaturityTime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FinalTimeout", wireType)
				}
				x.FinalTimeout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FinalTimeout |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BorrowAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BorrowAmount == nil {
					x.BorrowAmount = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BorrowAmount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Fees = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Interests", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Interests = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Term = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EventId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AttestationId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositTxs", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DepositTxs = append(x.DepositTxs, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CollateralAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Cets", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Cets = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LoanSecret", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LoanSecret = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RepayAdaptorPoint", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RepayAdaptorPoint = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CreateAt == nil {
					x.CreateAt = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CreateAt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 19:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= LoanStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 20:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: side/lending/lending.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status options for a lending pool
type PoolStatus int32

const (
	PoolStatus_ACTIVE   PoolStatus = 0
	PoolStatus_INACTIVE PoolStatus = 1
)

// Enum value maps for PoolStatus.
var (
	PoolStatus_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	PoolStatus_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x PoolStatus) Enum() *PoolStatus {
	p := new(PoolStatus)
	*p = x
	return p
}

func (x PoolStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_side_lending_lending_proto_enumTypes[0].Descriptor()
}

func (PoolStatus) Type() protoreflect.EnumType {
	return &file_side_lending_lending_proto_enumTypes[0]
}

func (x PoolStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolStatus.Descriptor instead.
func (PoolStatus) EnumDescriptor() ([]byte, []int) {
	return file_side_lending_lending_proto_rawDescGZIP(), []int{0}
}

type LoanStatus int32

const (
	// Loan Application
	LoanStatus_Apply LoanStatus = 0
	// Loan Approval
	LoanStatus_Approve LoanStatus = 1
	// Loan Disbursement
	LoanStatus_Disburse LoanStatus = 2
	// Loan Repayment
	LoanStatus_Repay LoanStatus = 3
	// Loan Default/Delinquency
	LoanStatus_Default LoanStatus = 4
	// Loan Liquidation
	LoanStatus_Liquidate LoanStatus = 5
	// Loan Closure
	LoanStatus_Close LoanStatus = 6
)

// Enum value maps for LoanStatus.
var (
	LoanStatus_name = map[int32]string{
		0: "Apply",
		1: "Approve",
		2: "Disburse",
		3: "Repay",
		4: "Default",
		5: "Liquidate",
		6: "Close",
	}
	LoanStatus_value = map[string]int32{
		"Apply":     0,
		"Approve":   1,
		"Disburse":  2,
		"Repay":     3,
		"Default":   4,
		"Liquidate": 5,
		"Close":     6,
	}
)

func (x LoanStatus) Enum() *LoanStatus {
	p := new(LoanStatus)
	*p = x
	return p
}

func (x LoanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_side_lending_lending_proto_enumTypes[1].Descriptor()
}

func (LoanStatus) Type() protoreflect.EnumType {
	return &file_side_lending_lending_proto_enumTypes[1]
}

func (x LoanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoanStatus.Descriptor instead.
func (LoanStatus) EnumDescriptor() ([]byte, []int) {
	return file_side_lending_lending_proto_rawDescGZIP(), []int{1}
}

type LendingPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Supply         *v1beta1.Coin `protobuf:"bytes,2,opt,name=supply,proto3" json:"supply,omitempty"`
	TotalShares    string        `protobuf:"bytes,3,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	BorrowedAmount string        `protobuf:"bytes,4,opt,name=borrowed_amount,json=borrowedAmount,proto3" json:"borrowed_amount,omitempty"`
	Status         PoolStatus    `protobuf:"varint,5,opt,name=status,proto3,enum=side.lending.PoolStatus" json:"status,omitempty"`
}

func (x *LendingPool) Reset() {
	*x = LendingPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_side_lending_lending_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LendingPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LendingPool) ProtoMessage() {}

// Deprecated: Use LendingPool.ProtoReflect.Descriptor instead.
func (*LendingPool) Descriptor() ([]byte, []int) {
	return file_side_lending_lending_proto_rawDescGZIP(), []int{0}
}

func (x *LendingPool) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LendingPool) GetSupply() *v1beta1.Coin {
	if x != nil {
		return x.Supply
	}
	return nil
}

func (x *LendingPool) GetTotalShares() string {
	if x != nil {
		return x.TotalShares
	}
	return ""
}

func (x *LendingPool) GetBorrowedAmount() string {
	if x != nil {
		return x.BorrowedAmount
	}
	return ""
}

func (x *LendingPool) GetStatus() PoolStatus {
	if x != nil {
		return x.Status
	}
	return PoolStatus_ACTIVE
}

type DepositLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid         string `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	VaultAddress string `protobuf:"bytes,1,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	DepositTx    string `protobuf:"bytes,3,opt,name=deposit_tx,json=depositTx,proto3" json:"deposit_tx,omitempty"`
}

func (x *DepositLog) Reset() {
	*x = DepositLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_side_lending_lending_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositLog) ProtoMessage() {}

// Deprecated: Use DepositLog.ProtoReflect.Descriptor instead.
func (*DepositLog) Descriptor() ([]byte, []int) {
	return file_side_lending_lending_proto_rawDescGZIP(), []int{1}
}

func (x *DepositLog) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *DepositLog) GetVaultAddress() string {
	if x != nil {
		return x.VaultAddress
	}
	return ""
}

func (x *DepositLog) GetDepositTx() string {
	if x != nil {
		return x.DepositTx
	}
	return ""
}

type Loan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaultAddress      string                 `protobuf:"bytes,1,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"` // id
	Borrower          string                 `protobuf:"bytes,2,opt,name=borrower,proto3" json:"borrower,omitempty"`
	Agency            string                 `protobuf:"bytes,3,opt,name=agency,proto3" json:"agency,omitempty"`
	HashLoanSecret    string                 `protobuf:"bytes,4,opt,name=hash_loan_secret,json=hashLoanSecret,proto3" json:"hash_loan_secret,omitempty"`
	MaturityTime      int64                  `protobuf:"varint,5,opt,name=maturity_time,json=maturityTime,proto3" json:"maturity_time,omitempty"`
	FinalTimeout      int64                  `protobuf:"varint,6,opt,name=final_timeout,json=finalTimeout,proto3" json:"final_timeout,omitempty"`
	BorrowAmount      *v1beta1.Coin          `protobuf:"bytes,7,opt,name=borrow_amount,json=borrowAmount,proto3" json:"borrow_amount,omitempty"`
	Fees              string                 `protobuf:"bytes,8,opt,name=fees,proto3" json:"fees,omitempty"`
	Interests         string                 `protobuf:"bytes,10,opt,name=interests,proto3" json:"interests,omitempty"`
	Term              string                 `protobuf:"bytes,9,opt,name=term,proto3" json:"term,omitempty"`
	EventId           string                 `protobuf:"bytes,11,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	AttestationId     string                 `protobuf:"bytes,12,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	DepositTxs        []string               `protobuf:"bytes,13,rep,name=deposit_txs,json=depositTxs,proto3" json:"deposit_txs,omitempty"`
	CollateralAmount  string                 `protobuf:"bytes,14,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount,omitempty"`
	Cets              string                 `protobuf:"bytes,15,opt,name=cets,proto3" json:"cets,omitempty"`
	LoanSecret        string                 `protobuf:"bytes,16,opt,name=loan_secret,json=loanSecret,proto3" json:"loan_secret,omitempty"`
	RepayAdaptorPoint string                 `protobuf:"bytes,17,opt,name=repay_adaptor_point,json=repayAdaptorPoint,proto3" json:"repay_adaptor_point,omitempty"`
	CreateAt          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Status            LoanStatus             `protobuf:"varint,19,opt,name=status,proto3,enum=side.lending.LoanStatus" json:"status,omitempty"`
	PoolId            string                 `protobuf:"bytes,20,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *Loan) Reset() {
	*x = Loan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_side_lending_lending_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Loan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Loan) ProtoMessage() {}

// Deprecated: Use Loan.ProtoReflect.Descriptor instead.
func (*Loan) Descriptor() ([]byte, []int) {
	return file_side_lending_lending_proto_rawDescGZIP(), []int{2}
}

func (x *Loan) GetVaultAddress() string {
	if x != nil {
		return x.VaultAddress
	}
	return ""
}

func (x *Loan) GetBorrower() string {
	if x != nil {
		return x.Borrower
	}
	return ""
}

func (x *Loan) GetAgency() string {
	if x != nil {
		return x.Agency
	}
	return ""
}

func (x *Loan) GetHashLoanSecret() string {
	if x != nil {
		return x.HashLoanSecret
	}
	return ""
}

func (x *Loan) GetMaturityTime() int64 {
	if x != nil {
		return x.MaturityTime
	}
	return 0
}

func (x *Loan) GetFinalTimeout() int64 {
	if x != nil {
		return x.FinalTimeout
	}
	return 0
}

func (x *Loan) GetBorrowAmount() *v1beta1.Coin {
	if x != nil {
		return x.BorrowAmount
	}
	return nil
}

func (x *Loan) GetFees() string {
	if x != nil {
		return x.Fees
	}
	return ""
}

func (x *Loan) GetInterests() string {
	if x != nil {
		return x.Interests
	}
	return ""
}

func (x *Loan) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *Loan) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Loan) GetAttestationId() string {
	if x != nil {
		return x.AttestationId
	}
	return ""
}

func (x *Loan) GetDepositTxs() []string {
	if x != nil {
		return x.DepositTxs
	}
	return nil
}

func (x *Loan) GetCollateralAmount() string {
	if x != nil {
		return x.CollateralAmount
	}
	return ""
}

func (x *Loan) GetCets() string {
	if x != nil {
		return x.Cets
	}
	return ""
}

func (x *Loan) GetLoanSecret() string {
	if x != nil {
		return x.LoanSecret
	}
	return ""
}

func (x *Loan) GetRepayAdaptorPoint() string {
	if x != nil {
		return x.RepayAdaptorPoint
	}
	return ""
}

func (x *Loan) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *Loan) GetStatus() LoanStatus {
	if x != nil {
		return x.Status
	}
	return LoanStatus_Apply
}

func (x *Loan) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

var File_side_lending_lending_proto protoreflect.FileDescriptor

var file_side_lending_lending_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x69, 0x64, 0x65, 0x2f, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x6c,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x69,
	0x64, 0x65, 0x2e, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x4c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x06, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0e,
	0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x64, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x54, 0x78, 0x22, 0xd8, 0x06, 0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x4c, 0x6f, 0x61, 0x6e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0d,
	0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0c,
	0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04,
	0x66, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54,
	0x78, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x10, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x6e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x65, 0x70, 0x61, 0x79, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x6c, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x2a, 0x26, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x2a, 0x64, 0x0a, 0x0a, 0x4c, 0x6f, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x65, 0x70, 0x61, 0x79, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x06, 0x42,
	0x90, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x6c, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x4c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1d, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x2f, 0x6c, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0xa2, 0x02, 0x03, 0x53, 0x4c, 0x58, 0xaa, 0x02, 0x0c, 0x53, 0x69, 0x64, 0x65,
	0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0xca, 0x02, 0x0c, 0x53, 0x69, 0x64, 0x65, 0x5c,
	0x4c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0xe2, 0x02, 0x18, 0x53, 0x69, 0x64, 0x65, 0x5c, 0x4c,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0d, 0x53, 0x69, 0x64, 0x65, 0x3a, 0x3a, 0x4c, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_side_lending_lending_proto_rawDescOnce sync.Once
	file_side_lending_lending_proto_rawDescData = file_side_lending_lending_proto_rawDesc
)

func file_side_lending_lending_proto_rawDescGZIP() []byte {
	file_side_lending_lending_proto_rawDescOnce.Do(func() {
		file_side_lending_lending_proto_rawDescData = protoimpl.X.CompressGZIP(file_side_lending_lending_proto_rawDescData)
	})
	return file_side_lending_lending_proto_rawDescData
}

var file_side_lending_lending_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_side_lending_lending_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_side_lending_lending_proto_goTypes = []interface{}{
	(PoolStatus)(0),               // 0: side.lending.PoolStatus
	(LoanStatus)(0),               // 1: side.lending.LoanStatus
	(*LendingPool)(nil),           // 2: side.lending.LendingPool
	(*DepositLog)(nil),            // 3: side.lending.DepositLog
	(*Loan)(nil),                  // 4: side.lending.Loan
	(*v1beta1.Coin)(nil),          // 5: cosmos.base.v1beta1.Coin
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_side_lending_lending_proto_depIdxs = []int32{
	5, // 0: side.lending.LendingPool.supply:type_name -> cosmos.base.v1beta1.Coin
	0, // 1: side.lending.LendingPool.status:type_name -> side.lending.PoolStatus
	5, // 2: side.lending.Loan.borrow_amount:type_name -> cosmos.base.v1beta1.Coin
	6, // 3: side.lending.Loan.create_at:type_name -> google.protobuf.Timestamp
	1, // 4: side.lending.Loan.status:type_name -> side.lending.LoanStatus
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_side_lending_lending_proto_init() }
func file_side_lending_lending_proto_init() {
	if File_side_lending_lending_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_side_lending_lending_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LendingPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_side_lending_lending_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_side_lending_lending_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Loan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_side_lending_lending_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_side_lending_lending_proto_goTypes,
		DependencyIndexes: file_side_lending_lending_proto_depIdxs,
		EnumInfos:         file_side_lending_lending_proto_enumTypes,
		MessageInfos:      file_side_lending_lending_proto_msgTypes,
	}.Build()
	File_side_lending_lending_proto = out.File
	file_side_lending_lending_proto_rawDesc = nil
	file_side_lending_lending_proto_goTypes = nil
	file_side_lending_lending_proto_depIdxs = nil
}
