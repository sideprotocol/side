syntax = "proto3";
package side.dlc;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "side/dlc/params.proto";
import "side/dlc/dlc.proto";

option go_package = "github.com/sideprotocol/side/x/dlc/types";

// Query defines the gRPC querier service.
service Query {
    // Params queries the parameters of the module.
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
      option (google.api.http).get = "/side/dlc/params";
    }
    // Announcements queries the announcements by the given status.
    rpc Announcements(QueryAnnouncementsRequest) returns (QueryAnnouncementsResponse) {
        option (google.api.http).get = "/side/dlc/announcements";
    }
    // Price queries the current price by the given symbol.
    rpc Price(QueryPriceRequest) returns (QueryPriceResponse) {
        option (google.api.http).get = "/side/dlc/price";
    }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {
}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
    Params params = 1;
}

// QueryAnnouncementsRequest is request type for the Query/Announcements RPC method.
message QueryAnnouncementsRequest {
    AnnouncementStatus status = 1;
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAnnouncementsResponse is response type for the Query/Announcements RPC method.
message QueryAnnouncementsResponse {
    repeated DLCAnnouncement announcements = 1;
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPriceRequest is request type for the Query/Price RPC method.
message QueryPriceRequest {
    string symbol = 1;
}

// QueryPriceResponse is response type for the Query/Price RPC method.
message QueryPriceResponse {
    uint32 price = 1;
}
