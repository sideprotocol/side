syntax = "proto3";
package side.btcbridge;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/sideprotocol/side/x/btcbridge/types";

// Params defines the parameters for the module.
message Params {
  // The minimum number of confirmations required for a block to be accepted
  int32 confirmations = 1;
  // Indicates the maximum depth or distance from the latest block up to which transactions are considered for acceptance.
  uint64 max_acceptable_block_depth = 2;
  // The denomination of the voucher
  string btc_voucher_denom = 3;
  // Indicates if deposit is enabled
  bool deposit_enabled = 4;
  // Indicates if withdrawal is enabled
  bool withdraw_enabled = 5;
  // Trusted relayers for non-btc asset deposit
  repeated string trusted_non_btc_relayers = 6;
  // Trusted oracles for providing offchain data, e.g. bitcoin fee rate
  repeated string trusted_oracles = 7;
  // Asset vaults
  repeated Vault vaults = 8;
  // Withdrawal params
  WithdrawParams withdraw_params = 9 [(gogoproto.nullable) = false];
  // Protocol limitations
  ProtocolLimits protocol_limits = 10 [(gogoproto.nullable) = false];
  // Protocol fees
  ProtocolFees protocol_fees = 11 [(gogoproto.nullable) = false];
  // TSS params
  TSSParams tss_params = 12 [(gogoproto.nullable) = false];
}

// ParamsV1 defines the parameters for the module v1.
message ParamsV1 {
  // The minimum number of confirmations required for a block to be accepted
  int32 confirmations = 1;
  // Indicates the maximum depth or distance from the latest block up to which transactions are considered for acceptance.
  uint64 max_acceptable_block_depth = 2;
  // The denomination of the voucher
  string btc_voucher_denom = 3;
  // Indicates if deposit is enabled
  bool deposit_enabled = 4;
  // Indicates if withdrawal is enabled
  bool withdraw_enabled = 5;
  // Trusted relayers for non-btc asset deposit
  repeated string trusted_non_btc_relayers = 6;
  // Trusted oracles for providing offchain data, e.g. bitcoin fee rate
  repeated string trusted_oracles = 7;
  // Asset vaults
  repeated Vault vaults = 8;
  // Withdrawal params
  WithdrawParams withdraw_params = 9 [(gogoproto.nullable) = false];
  // Protocol limitations
  ProtocolLimits protocol_limits = 10 [(gogoproto.nullable) = false];
  // Protocol fees
  ProtocolFees protocol_fees = 11 [(gogoproto.nullable) = false];
  // TSS params
  TSSParamsV1 tss_params = 12 [(gogoproto.nullable) = false];
}

// AssetType defines the type of asset
enum AssetType {
  // Unspecified asset type
  ASSET_TYPE_UNSPECIFIED = 0;
  // BTC
  ASSET_TYPE_BTC = 1;
  // BRC20: ordi, sats
  ASSET_TYPE_BRC20 = 2;
  // RUNE: dog•go•to•the•moon
  ASSET_TYPE_RUNES = 3;
}

// Vault defines the asset vault
message Vault {
  // the vault address for deposit
  string address = 1;
  // public key of the vault
  string pub_key = 2;
  // the asset type supported by the vault
  AssetType asset_type = 3;
  // version
  uint64 version = 4;
}

message WithdrawParams {
  // Maximum number of utxos used to build the signing request; O means unlimited
  uint32 max_utxo_num = 1;
  // Period for handling btc withdrawal requests
  int64 btc_batch_withdraw_period = 2;
  // Maximum number of btc withdrawal requests to be handled per batch
  uint32 max_btc_batch_withdraw_num = 3;
}

// ProtocolLimits defines the params related to the the protocol limitations
message ProtocolLimits {
  // The minimum deposit amount for btc in sat
  int64 btc_min_deposit = 1;
  // The minimum withdrawal amount for btc in sat
  int64 btc_min_withdraw = 2;
  // The maximum withdrawal amount for btc in sat
  int64 btc_max_withdraw = 3;
}

// ProtocolFees defines the params related to the protocol fees
message ProtocolFees {
  // Protocol fee amount for deposit in sat
  int64 deposit_fee = 1;
  // Protocol fee amount for withdrawal in sat
  int64 withdraw_fee = 2;
  // Protocol fee collector
  string collector = 3;
}

// TSSParams defines the params related to TSS
message TSSParams {
  // Timeout duration for DKG request
  google.protobuf.Duration dkg_timeout_period = 1 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
  // Transition period after which TSS participants update process is completed
  google.protobuf.Duration participant_update_transition_period = 2 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
  // Duration per signing epoch
  google.protobuf.Duration signing_epoch_duration = 3 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
}

// TSSParamsV1 defines the params related to TSS for v1
message TSSParamsV1 {
  // Timeout duration for DKG request
  google.protobuf.Duration dkg_timeout_period = 1 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
  // Transition period after which TSS participants update process is completed
  google.protobuf.Duration participant_update_transition_period = 2 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
}
