syntax = "proto3";
package side.btcbridge;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "side/btcbridge/params.proto";

option go_package = "github.com/sideprotocol/side/x/btcbridge/types";

// Bitcoin Block Header
message BlockHeader {
  uint64 version = 1;
  string hash = 2;
  uint64 height = 3;
  string previous_block_hash = 4;
  string merkle_root = 5;
  uint64 nonce = 6;
  string bits = 7;
  uint64 time = 8;
  uint64 ntx = 9;
}

// Fee rate
message FeeRate {
  // fee rate
  int64 value = 1;
  // block height at which the fee rate is submitted
  int64 height = 2;
}

// Bitcoin Signing Status
enum SigningStatus {
  // SIGNING_STATUS_UNSPECIFIED - Default value, should not be used
  SIGNING_STATUS_UNSPECIFIED = 0;
  // SIGNING_STATUS_PENDING - The signing request is pending
  SIGNING_STATUS_PENDING = 1;
  // SIGNING_STATUS_BROADCASTED - The signing request is broadcasted
  SIGNING_STATUS_BROADCASTED = 2;
  // SIGNING_STATUS_CONFIRMED - The signing request is confirmed
  SIGNING_STATUS_CONFIRMED = 3;
  // SIGNING_STATUS_FAILED - The signing request failed to be signed or broadcast due to unexpected exceptions
  SIGNING_STATUS_FAILED = 4;
}

// Bitcoin Signing Request
message SigningRequest {
  string address = 1;
  uint64 sequence = 2;
  string txid = 3;
  string psbt = 4;
  google.protobuf.Timestamp creation_time = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  SigningStatus status = 6;
}

// Withdrawal Request
message WithdrawRequest {
  string address = 1;
  string amount = 2;
  uint64 sequence = 3;
  string txid = 4;
}

// Bitcoin UTXO
message UTXO {
  string txid = 1;
  uint64 vout = 2;
  string address = 3;
  uint64 amount = 4;
  uint64 height = 5;
  bytes pub_key_script = 6;
  bool is_locked = 7;
  // rune balances associated with the UTXO
  repeated RuneBalance runes = 8;
}

// Rune Balance
message RuneBalance {
  // serialized rune id
  string id = 1;
  // rune amount
  string amount = 2;
}

// Rune ID
message RuneId {
  // block height
  uint64 block = 1;
  // tx index
  uint32 tx = 2;
}

// Rune Edict
message Edict {
  RuneId id = 1;
  string amount = 2;
  uint32 output = 3;
}

// BTC UTXO Consolidation
message BtcConsolidation {
  // maximum threshold of the btc value
  int64 target_threshold = 1;
  // maximum number of the utxos to be consolidated; 0 means all
  uint32 max_num = 2;
}

// Runes UTXO Consolidation
message RunesConsolidation {
  // rune id
  string rune_id = 1;
  // maximum threshold of the corresponding rune balance
  string target_threshold = 2;
  // maximum number of the utxos to be consolidated; 0 means all
  uint32 max_num = 3;
}

// DKG Participant
message DKGParticipant {
  // the moniker of the corresponding validator
  string moniker = 1;
  // the operator address of the corresponding validator
  string operator_address = 2;
  // the consensus address of the corresponding validator
  string consensus_address = 3;
}

enum DKGRequestStatus {
  // DKG_REQUEST_STATUS_UNSPECIFIED defines the unknown DKG request status
  DKG_REQUEST_STATUS_UNSPECIFIED = 0;
  // DKG_REQUEST_STATUS_PENDING defines the status of the DKG request which is pending
  DKG_REQUEST_STATUS_PENDING = 1;
  // DKG_REQUEST_STATUS_COMPLETED defines the status of the DKG request which is completed
  DKG_REQUEST_STATUS_COMPLETED = 2;
  // DKG_REQUEST_STATUS_FAILED defines the status of the DKG request which failed
  DKG_REQUEST_STATUS_FAILED = 3;
  // DKG_REQUEST_STATUS_TIMEDOUT defines the status of the DKG request which timed out
  DKG_REQUEST_STATUS_TIMEDOUT = 4;
}

// DKG Request
message DKGRequest {
  // the unique request id
  uint64 id = 1;
  // participant set
  repeated DKGParticipant participants = 2;
  // threshold required to perform DKG
  uint32 threshold = 3;
  // asset types of vaults to be generated
  repeated AssetType vault_types = 4;
   // indicates if disabling bridge deposit and withdrawal
  bool disable_bridge = 5;
  // indicates if transferring assets to the newly generated vaults when the DKG request is completed
  bool enable_transfer = 6;
  // target number of the UTXOs to be transferred each time
  uint32 target_utxo_num = 7;
  // fee rate for vault transfer
  string fee_rate = 8;
  // expiration time
  google.protobuf.Timestamp expiration = 9 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
  // status
  DKGRequestStatus status = 10;
}

// DKG Completion Request
message DKGCompletionRequest {
  // request id
  uint64 id = 1;
  // sender
  string sender = 2;
  // new vaults generated by DKG
  repeated string vaults = 3;
  // consensus address of the corresponding validator
  string consensus_address = 4;
  // hex encoded validator signature
  string signature = 5;
}
