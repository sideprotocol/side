syntax = "proto3";
package side.btcbridge;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "side/btcbridge/params.proto";

option go_package = "github.com/sideprotocol/side/x/btcbridge/types";

// Bitcoin Block Header
message BlockHeader {
  uint64 version = 1;
  string hash = 2;
  uint64 height = 3;
  string previous_block_hash = 4;
  string merkle_root = 5;
  uint64 nonce = 6;
  string bits = 7;
  uint64 time = 8;
  uint64 ntx = 9;
}

// Bitcoin Withdrawal Status
enum WithdrawStatus {
  // WITHDRAW_STATUS_UNSPECIFIED - Default value, should not be used
  WITHDRAW_STATUS_UNSPECIFIED = 0;
  // WITHDRAW_STATUS_CREATED - The withdrawal request is created
  WITHDRAW_STATUS_CREATED = 1;
  // WITHDRAW_STATUS_BROADCASTED - The withdrawal tx is broadcasted
  WITHDRAW_STATUS_BROADCASTED = 2;
  // WITHDRAW_STATUS_CONFIRMED - The withdrawal tx is confirmed
  WITHDRAW_STATUS_CONFIRMED = 3;
}

// Bitcoin Withdrawal Request
message BitcoinWithdrawRequest {
  string address = 1;
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false
  ];
  uint64 sequence = 3;
  string txid = 4;
  WithdrawStatus status = 5;
}

// Rune ID
message RuneId {
  // block height
  uint64 block = 1;
  // tx index
  uint32 tx = 2;
}

// Rune Edict
message Edict {
  RuneId id = 1;
  string amount = 2;
  uint32 output = 3;
}

// DKG Participant
message DKGParticipant {
  // the moniker of the corresponding validator
  string moniker = 1;
  // the operator address of the corresponding validator
  string operator_address = 2;
  // the consensus address of the corresponding validator
  string consensus_address = 3;
}

enum DKGRequestStatus {
  // DKG_REQUEST_STATUS_UNSPECIFIED defines the unknown DKG request status
  DKG_REQUEST_STATUS_UNSPECIFIED = 0;
  // DKG_REQUEST_STATUS_PENDING defines the status of the DKG request which is pending
  DKG_REQUEST_STATUS_PENDING = 1;
  // DKG_REQUEST_STATUS_COMPLETED defines the status of the DKG request which is completed
  DKG_REQUEST_STATUS_COMPLETED = 2;
  // DKG_REQUEST_STATUS_FAILED defines the status of the DKG request which failed
  DKG_REQUEST_STATUS_FAILED = 3;
}

// DKG Request
message DKGRequest {
  // the unique request id
  uint64 id = 1;
  // participant set
  repeated DKGParticipant participants = 2;
  // threshold required to perform DKG
  uint32 threshold = 3;
  // expiration time
  google.protobuf.Timestamp expiration = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
  // status
  DKGRequestStatus status = 5;
}

// DKG Completion Request
message DKGCompletionRequest {
  // request id
  uint64 id = 1;
  // sender
  string sender = 2;
  // new vaults generated by DKG
  repeated string vaults = 3;
  // validator address
  string validator = 4;
  // hex encoded validator signature
  string signature = 5;
}

// BTC Consolidation
message BtcConsolidation {
  // the outputs less than or equal to the target threshold will be consolidated
  int64 target_threshold = 1;
  // the maximum number of the outputs to be consolidated; 0 means all outputs
  uint32 max_num = 2;
}

// Runes Consolidation
message RunesConsolidation {
  // rune id to be consolidated
  string rune_id = 1;
  // the outputs less than or equal to the target threshold will be consolidated
  string target_threshold = 2;
  // the maximum number of the outputs to be consolidated; 0 means all outputs
  uint32 max_num = 3;
}

// Consolidation
message Consolidation {
  // id
  uint64 id = 1;
  // vault version
  uint64 vault_version = 2;
  // btc consolidation
  BtcConsolidation btc_consolidation = 3;
  // runes consolidations
  repeated RunesConsolidation runes_consolidations = 4;
  // indicates if switching to new vaults
  // the flag will ignore consolidations above
  bool switch = 5;
}
