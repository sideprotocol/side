syntax = "proto3";
package side.btcbridge;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "side/btcbridge/params.proto";
import "side/btcbridge/btcbridge.proto";

option go_package = "github.com/sideprotocol/side/x/btcbridge/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc QueryParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/side/btcbridge/params";
  }
  // ChainTip queries the chain tip of the module.
  rpc QueryChainTip(QueryChainTipRequest) returns (QueryChainTipResponse) {
    option (google.api.http).get = "/side/btcbridge/tip";
  }
  // BlockHeaderByHeight queries the block header by height.
  rpc QueryBlockHeaderByHeight(QueryBlockHeaderByHeightRequest) returns (QueryBlockHeaderByHeightResponse) {
    option (google.api.http).get = "/side/btcbridge/height/{height}";
  }
  // BlockHeaderByHash queries the block header by hash.
  rpc QueryBlockHeaderByHash(QueryBlockHeaderByHashRequest) returns (QueryBlockHeaderByHashResponse) {
    option (google.api.http).get = "/side/btcbridge/hash/{hash}";
  }
  // QueryFeeRate queries the bitcoin network fee rate on the side chain.
  rpc QueryFeeRate(QueryFeeRateRequest) returns (QueryFeeRateResponse) {
    option (google.api.http).get = "/side/btcbridge/feerate";
  }
  // QueryWithdrawalNetworkFee queries the estimated btc network fee for the given withdrawal.
  rpc QueryWithdrawalNetworkFee(QueryWithdrawalNetworkFeeRequest) returns (QueryWithdrawalNetworkFeeResponse) {
    option (google.api.http).get = "/side/btcbridge/withdrawal/fee/estimation";
  }
  // QueryWithdrawRequestsByAddress queries the withdrawal requests by the given address.
  rpc QueryWithdrawRequestsByAddress(QueryWithdrawRequestsByAddressRequest) returns (QueryWithdrawRequestsByAddressResponse) {
    option (google.api.http).get = "/side/btcbridge/withdrawal/requests/address/{address}";
  }
  // QueryWithdrawRequestsByTxHash queries the withdrawal requests by the given tx hash.
  rpc QueryWithdrawRequestsByTxHash(QueryWithdrawRequestsByTxHashRequest) returns (QueryWithdrawRequestsByTxHashResponse) {
    option (google.api.http).get = "/side/btcbridge/withdrawal/requests/tx/{txid}";
  }
  // QueryPendingBtcWithdrawRequests queries the pending btc withdrawal requests.
  rpc QueryPendingBtcWithdrawRequests(QueryPendingBtcWithdrawRequestsRequest) returns (QueryPendingBtcWithdrawRequestsResponse) {
    option (google.api.http).get = "/side/btcbridge/withdrawal/requests/btc/pending";
  }
  // QuerySigningRequests queries the signing requests by the given status.
  rpc QuerySigningRequests(QuerySigningRequestsRequest) returns (QuerySigningRequestsResponse) {
    option (google.api.http).get = "/side/btcbridge/signing/requests";
  }
  // QuerySigningRequestsByAddress queries the signing requests by the given address.
  rpc QuerySigningRequestsByAddress(QuerySigningRequestsByAddressRequest) returns (QuerySigningRequestsByAddressResponse) {
    option (google.api.http).get = "/side/btcbridge/signing/requests/address/{address}";
  }
  // QuerySigningRequestByTxHash queries the signing request by the given tx hash.
  rpc QuerySigningRequestByTxHash(QuerySigningRequestByTxHashRequest) returns (QuerySigningRequestByTxHashResponse) {
    option (google.api.http).get = "/side/btcbridge/signing/requests/tx/{txid}";
  }
  // QueryUTXOs queries all utxos.
  rpc QueryUTXOs(QueryUTXOsRequest) returns (QueryUTXOsResponse) {
    option (google.api.http).get = "/side/btcbridge/utxos";
  }
  // QueryUTXOsByAddress queries the utxos of the given address.
  rpc QueryUTXOsByAddress(QueryUTXOsByAddressRequest) returns (QueryUTXOsByAddressResponse) {
    option (google.api.http).get = "/side/btcbridge/utxos/{address}";
  }
  // QueryUTXOCountAndBalancesByAddress queries the total count and balances of the unlocked utxos by the given address.
  rpc QueryUTXOCountAndBalancesByAddress(QueryUTXOCountAndBalancesByAddressRequest) returns (QueryUTXOCountAndBalancesByAddressResponse) {
    option (google.api.http).get = "/side/btcbridge/utxos/{address}/stats";
  }
  // QueryDKGRequest queries the DKG request by the given id.
  rpc QueryDKGRequest(QueryDKGRequestRequest) returns (QueryDKGRequestResponse) {
    option (google.api.http).get = "/side/btcbridge/dkg/request/{id}";
  }
  // QueryDKGRequests queries the DKG requests by the given status
  rpc QueryDKGRequests(QueryDKGRequestsRequest) returns (QueryDKGRequestsResponse) {
    option (google.api.http).get = "/side/btcbridge/dkg/request";
  }
  // QueryAllDKGRequests queries all DKG requests.
  rpc QueryAllDKGRequests(QueryAllDKGRequestsRequest) returns (QueryAllDKGRequestsResponse) {
    option (google.api.http).get = "/side/btcbridge/dkg/requests";
  }
  // QueryDKGCompletionRequests queries DKG completion requests by the given id.
  rpc QueryDKGCompletionRequests(QueryDKGCompletionRequestsRequest) returns (QueryDKGCompletionRequestsResponse) {
    option (google.api.http).get = "/side/btcbridge/dkg/completion/request/{id}";
  }
}

// QueryWithdrawRequestsByAddressRequest is request type for the Query/WithdrawRequestsByAddress RPC method.
message QueryWithdrawRequestsByAddressRequest {
  string address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryWithdrawRequestsByAddressResponse is response type for the Query/WithdrawRequestsByAddress RPC method.
message QueryWithdrawRequestsByAddressResponse {
  repeated WithdrawRequest requests = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryWithdrawRequestsByTxHashRequest is request type for the Query/WithdrawRequestsByTxHash RPC method.
message QueryWithdrawRequestsByTxHashRequest {
  string txid = 1;
}

// QueryWithdrawRequestsByTxHashResponse is response type for the Query/WithdrawRequestsByTxHash RPC method.
message QueryWithdrawRequestsByTxHashResponse {
  repeated WithdrawRequest requests = 1;
}

// QueryPendingBtcWithdrawRequestsRequest is request type for the Query/PendingBtcWithdrawRequests RPC method.
message QueryPendingBtcWithdrawRequestsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryPendingBtcWithdrawRequestsResponse is response type for the Query/PendingBtcWithdrawRequests RPC method.
message QueryPendingBtcWithdrawRequestsResponse {
  repeated WithdrawRequest requests = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySigningRequestsRequest is request type for the Query/SigningRequests RPC method.
message QuerySigningRequestsRequest {
  SigningStatus status = 1;
  cosmos.base.query.v1beta1.PageRequest pagination            = 2;
}

// QuerySigningRequestsResponse is response type for the Query/SigningRequests RPC method.
message QuerySigningRequestsResponse {
  repeated SigningRequest requests = 1;
  cosmos.base.query.v1beta1.PageResponse pagination            = 2;
}

// QuerySigningRequestsByAddressRequest is request type for the Query/SigningRequestsByAddress RPC method.
message QuerySigningRequestsByAddressRequest {
  string address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination            = 2;
}

// QuerySigningRequestsByAddressResponse is response type for the Query/SigningRequestsByAddress RPC method.
message QuerySigningRequestsByAddressResponse {
  repeated SigningRequest requests = 1;
  cosmos.base.query.v1beta1.PageResponse pagination            = 2;
}

// QuerySigningRequestByTxHashRequest is request type for the Query/SigningRequestByTxHash RPC method.
message QuerySigningRequestByTxHashRequest {
  string txid = 1;
}

// QuerySigningRequestByTxHashResponse is response type for the Query/SigningRequestByTxHashResponse RPC method.
message QuerySigningRequestByTxHashResponse {
  SigningRequest request = 1;
}

// QueryFeeRateRequest is request type for the Query/FeeRate RPC method.
message QueryFeeRateRequest {}

// QueryFeeRateResponse is response type for the Query/FeeRate RPC method.
message QueryFeeRateResponse {
  FeeRate fee_rate = 1;
}

// QueryWithdrawalNetworkFeeRequest is request type for the Query/WithdrawalNetworkFee RPC method.
message QueryWithdrawalNetworkFeeRequest {
  string address = 1;
  string amount = 2;
  int64 fee_rate = 3;
}

// QueryWithdrawalNetworkFeeResponse is response type for the Query/WithdrawalNetworkFee RPC method.
message QueryWithdrawalNetworkFeeResponse {
  int64 fee_rate = 1;
  string fee = 2;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryChainTipRequest is request type for the Query/ChainTip RPC method.
message QueryChainTipRequest {}

// QueryChainTipResponse is response type for the Query/ChainTip RPC method.
message QueryChainTipResponse {
  string hash = 1;
  uint64 height = 2;
}

// QueryBlockHeaderByHeightRequest is the request type for the Query/BlockHeaderByHeight RPC method.
message QueryBlockHeaderByHeightRequest {
  uint64 height = 1;
}

// QueryBlockHeaderByHeightResponse is the response type for the Query/BlockHeaderByHeight RPC method.
message QueryBlockHeaderByHeightResponse {
  BlockHeader block_header = 1;
}

// QueryBlockHeaderByHashRequest is the request type for the Query/BlockHeaderByHash RPC method.
message QueryBlockHeaderByHashRequest {
  string hash = 1;
}

// QueryBlockHeaderByHashResponse is the response type for the Query/BlockHeaderByHash RPC method.
message QueryBlockHeaderByHashResponse {
  BlockHeader block_header = 1;
}

// QueryUTXOsRequest is the request type for the Query/UTXOs RPC method.
message QueryUTXOsRequest {}

// QueryUTXOsResponse is the response type for the Query/UTXOs RPC method.
message QueryUTXOsResponse {
  repeated UTXO utxos = 1;
}

// QueryUTXOsByAddressRequest is the request type for the Query/UTXOsByAddress RPC method.
message QueryUTXOsByAddressRequest {
  string address = 1;
}

// QueryUTXOsByAddressResponse is the response type for the Query/UTXOsByAddress RPC method.
message QueryUTXOsByAddressResponse {
  repeated UTXO utxos = 1;
}

// QueryUTXOCountAndBalancesByAddressRequest is the request type for the Query/UTXOCountAndBalancesByAddress RPC method.
message QueryUTXOCountAndBalancesByAddressRequest {
  string address = 1;
}

// QueryUTXOCountAndBalancesByAddressResponse is the response type for the Query/UTXOCountAndBalancesByAddress RPC method.
message QueryUTXOCountAndBalancesByAddressResponse {
  uint32 count = 1;
  int64 value = 2;
  repeated RuneBalance runeBalances = 3;
}

// QueryDKGRequestRequest is the request type for the Query/DKGRequest RPC method.
message QueryDKGRequestRequest {
  uint64 id = 1;
}

// QueryDKGRequestResponse is the response type for the Query/DKGRequest RPC method.
message QueryDKGRequestResponse {
  DKGRequest request = 1;
}

// QueryDKGRequestsRequest is the request type for the Query/DKGRequests RPC method.
message QueryDKGRequestsRequest {
  DKGRequestStatus status = 1;
}

// QueryDKGRequestsResponse is the response type for the Query/DKGRequests RPC method.
message QueryDKGRequestsResponse {
  repeated DKGRequest requests = 1;
}

// QueryAllDKGRequestsRequest is the request type for the Query/AllDKGRequests RPC method.
message QueryAllDKGRequestsRequest {
}

// QueryAllDKGRequestsResponse is the response type for the Query/AllDKGRequests RPC method.
message QueryAllDKGRequestsResponse {
  repeated DKGRequest requests = 1;
}

// QueryDKGCompletionRequestsRequest is the request type for the Query/DKGCompletionRequests RPC method.
message QueryDKGCompletionRequestsRequest {
  uint64 id = 1;
}

// QueryDKGCompletionRequestsResponse is the response type for the Query/DKGCompletionRequests RPC method.
message QueryDKGCompletionRequestsResponse {
  repeated DKGCompletionRequest requests = 1;
}
