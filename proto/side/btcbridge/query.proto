syntax = "proto3";
package side.btcbridge;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "side/btcbridge/params.proto";
import "side/btcbridge/bitcoin.proto";

option go_package = "github.com/sideprotocol/side/x/btcbridge/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc QueryParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/side/btcbridge/params";
  }
  // ChainTip queries the chain tip of the module.
  rpc QueryChainTip(QueryChainTipRequest) returns (QueryChainTipResponse) {
    option (google.api.http).get = "/side/btcbridge/tip";
  }
  // BlockHeaderByHeight queries the block header by height.
  rpc QueryBlockHeaderByHeight(QueryBlockHeaderByHeightRequest) returns (QueryBlockHeaderByHeightResponse) {
    option (google.api.http).get = "/side/btcbridge/height/{height}";
  }
  // BlockHeaderByHash queries the block header by hash.
  rpc QueryBlockHeaderByHash(QueryBlockHeaderByHashRequest) returns (QueryBlockHeaderByHashResponse) {
    option (google.api.http).get = "/side/btcbridge/hash/{hash}";
  }
  // QueryWithdrawRequests queries the withdrawal requests by the given status.
  rpc QueryWithdrawRequests(QueryWithdrawRequestsRequest) returns (QueryWithdrawRequestsResponse) {
    option (google.api.http).get = "/side/btcbridge/withdrawal/request";
  }
  // QueryWithdrawRequestsByAddress queries the withdrawal requests by the given address.
  rpc QueryWithdrawRequestsByAddress(QueryWithdrawRequestsByAddressRequest) returns (QueryWithdrawRequestsByAddressResponse) {
    option (google.api.http).get = "/side/btcbridge/withdrawal/request/address/{address}";
  }
  // QueryWithdrawRequestByTxHash queries the withdrawal request by the given tx hash.
  rpc QueryWithdrawRequestByTxHash(QueryWithdrawRequestByTxHashRequest) returns (QueryWithdrawRequestByTxHashResponse) {
    option (google.api.http).get = "/side/btcbridge/withdrawal/request/tx/{txid}";
  }
  // QueryUTXOs queries all utxos.
  rpc QueryUTXOs(QueryUTXOsRequest) returns (QueryUTXOsResponse) {
    option (google.api.http).get = "/side/btcbridge/utxos";
  }
  // QueryUTXOsByAddress queries the utxos of the given address.
  rpc QueryUTXOsByAddress(QueryUTXOsByAddressRequest) returns (QueryUTXOsByAddressResponse) {
    option (google.api.http).get = "/side/btcbridge/utxos/{address}";
  }
  // QueryDKGRequest queries the DKG request by the given id.
  rpc QueryDKGRequest(QueryDKGRequestRequest) returns (QueryDKGRequestResponse) {
    option (google.api.http).get = "/side/btcbridge/dkg/request/{id}";
  }
  // QueryDKGRequests queries the DKG requests by the given status
  rpc QueryDKGRequests(QueryDKGRequestsRequest) returns (QueryDKGRequestsResponse) {
    option (google.api.http).get = "/side/btcbridge/dkg/request";
  }
  // QueryAllDKGRequests queries all DKG requests.
  rpc QueryAllDKGRequests(QueryAllDKGRequestsRequest) returns (QueryAllDKGRequestsResponse) {
    option (google.api.http).get = "/side/btcbridge/dkg/requests";
  }
  // QueryDKGCompletionRequests queries DKG completion requests by the given id.
  rpc QueryDKGCompletionRequests(QueryDKGCompletionRequestsRequest) returns (QueryDKGCompletionRequestsResponse) {
    option (google.api.http).get = "/side/btcbridge/dkg/completion/request/{id}";
  }
}

// QueryWithdrawRequestsRequest is request type for the Query/WithdrawRequests RPC method.
message QueryWithdrawRequestsRequest {
  WithdrawStatus status = 1;
  cosmos.base.query.v1beta1.PageResponse pagination            = 2;
}

// QueryWithdrawRequestsResponse is response type for the Query/WithdrawRequests RPC method.
message QueryWithdrawRequestsResponse {
  repeated BitcoinWithdrawRequest requests = 1;
  cosmos.base.query.v1beta1.PageResponse pagination            = 2;
}

// QueryWithdrawRequestsByAddressRequest is request type for the Query/WithdrawRequestsByAddress RPC method.
message QueryWithdrawRequestsByAddressRequest {
  string address = 1;
  cosmos.base.query.v1beta1.PageResponse pagination            = 2;
}

// QueryWithdrawRequestsByAddressResponse is response type for the Query/WithdrawRequestsByAddress RPC method.
message QueryWithdrawRequestsByAddressResponse {
  repeated BitcoinWithdrawRequest requests = 1;
  cosmos.base.query.v1beta1.PageResponse pagination            = 2;
}

// QueryWithdrawRequestByTxHashRequest is request type for the Query/WithdrawRequestByTxHash RPC method.
message QueryWithdrawRequestByTxHashRequest {
  string txid = 1;
}

// QueryWithdrawRequestByTxHashResponse is response type for the Query/WithdrawRequestByTxHash RPC method.
message QueryWithdrawRequestByTxHashResponse {
  BitcoinWithdrawRequest request = 1;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryChainTipRequest is request type for the Query/ChainTip RPC method.
message QueryChainTipRequest {}

// QueryChainTipResponse is response type for the Query/ChainTip RPC method.
message QueryChainTipResponse {
  string hash = 1;
  uint64 height = 2;
}

// QueryBlockHeaderByHeightRequest is the request type for the Query/BlockHeaderByHeight RPC method.
message QueryBlockHeaderByHeightRequest {
  uint64 height = 1;
}

// QueryBlockHeaderByHeightResponse is the response type for the Query/BlockHeaderByHeight RPC method.
message QueryBlockHeaderByHeightResponse {
  BlockHeader block_header = 1;
}

// QueryBlockHeaderByHashRequest is the request type for the Query/BlockHeaderByHash RPC method.
message QueryBlockHeaderByHashRequest {
  string hash = 1;
}

// QueryBlockHeaderByHashResponse is the response type for the Query/BlockHeaderByHash RPC method.
message QueryBlockHeaderByHashResponse {
  BlockHeader block_header = 1;
}

// QueryUTXOsRequest is the request type for the Query/UTXOs RPC method.
message QueryUTXOsRequest {}

// QueryUTXOsResponse is the response type for the Query/UTXOs RPC method.
message QueryUTXOsResponse {
  repeated UTXO utxos = 1;
}

// QueryUTXOsByAddressRequest is the request type for the Query/UTXOsByAddress RPC method.
message QueryUTXOsByAddressRequest {
  string address = 1;
}

// QueryUTXOsByAddressResponse is the response type for the Query/UTXOsByAddress RPC method.
message QueryUTXOsByAddressResponse {
  repeated UTXO utxos = 1;
}

// QueryDKGRequestRequest is the request type for the Query/DKGRequest RPC method.
message QueryDKGRequestRequest {
  uint64 id = 1;
}

// QueryDKGRequestResponse is the response type for the Query/DKGRequest RPC method.
message QueryDKGRequestResponse {
  DKGRequest request = 1;
}

// QueryDKGRequestsRequest is the request type for the Query/DKGRequests RPC method.
message QueryDKGRequestsRequest {
  DKGRequestStatus status = 1;
}

// QueryDKGRequestsResponse is the response type for the Query/DKGRequests RPC method.
message QueryDKGRequestsResponse {
  repeated DKGRequest requests = 1;
}

// QueryAllDKGRequestsRequest is the request type for the Query/AllDKGRequests RPC method.
message QueryAllDKGRequestsRequest {
}

// QueryAllDKGRequestsResponse is the response type for the Query/AllDKGRequests RPC method.
message QueryAllDKGRequestsResponse {
  repeated DKGRequest requests = 1;
}

// QueryDKGCompletionRequestsRequest is the request type for the Query/DKGCompletionRequests RPC method.
message QueryDKGCompletionRequestsRequest {
  uint64 id = 1;
}

// QueryDKGCompletionRequestsResponse is the response type for the Query/DKGCompletionRequests RPC method.
message QueryDKGCompletionRequestsResponse {
  repeated DKGCompletionRequest requests = 1;
}
