syntax = "proto3";
package side.lending;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "side/lending/params.proto";
import "side/lending/lending.proto";

option go_package = "github.com/sideprotocol/side/x/lending/types";

// Query defines the gRPC querier service.
service Query {
    // Params queries the parameters of the module.
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
      option (google.api.http).get = "/side/lending/params";
    }
    rpc CollateralAddress(QueryCollateralAddressRequest) returns (QueryCollateralAddressResponse) {
        option (google.api.http).get = "/side/lending/collateral/address";

    }

    rpc LiquidationEvent(QueryLiquidationEventRequest) returns (QueryLiquidationEventResponse) {
        option (google.api.http).get = "/side/lending/liquidation/event";
    }

    rpc LiquidationCet(QueryLiquidationCetRequest) returns (QueryLiquidationCetResponse) {
        option (google.api.http).get = "/side/lending/liquidation/cet";
    }

    rpc Loan(QueryLoanRequest) returns (QueryLoanResponse) {
        option (google.api.http).get = "/side/lending/loan/<loan_id>";
    }

    rpc Loans(QueryLoansRequest) returns (QueryLoansResponse) {
        option (google.api.http).get = "/side/lending/loans";
    }

    rpc LoanDlcMeta(QueryLoanDlcMetaRequest) returns (QueryLoanDlcMetaResponse) {
        option (google.api.http).get = "/side/lending/loan/dlc/meta";
    }

    rpc Repayment(QueryRepaymentRequest) returns (QueryRepaymentResponse) {
        option (google.api.http).get = "/side/lending/loan/repayment";
    }
}

message QueryLiquidationEventRequest{
    cosmos.base.v1beta1.Coin borrow_amount = 1;
    cosmos.base.v1beta1.Coin collateral_acmount =2;
}

message QueryLiquidationEventResponse {
    uint64 event_id = 1;
    string oracle_pubkey = 2;
    string nonce = 3;
    string price = 4;
}

message QueryLiquidationCetRequest {
    string borrower_pubkey = 1;
    string agency_pubkey = 2;
}

message QueryLiquidationCetResponse {
    string liquidation_cet_script = 1;
}

message QueryCollateralAddressRequest{
    string borrower_pubkey = 1;
    string agency_pubkey = 2;
    string hash_of_loan_secret = 3;
    uint64 maturity_time = 4;
    uint64 final_timeout = 5;
}

message QueryCollateralAddressResponse{
    string address = 1;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {
}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
    Params params = 1 [(gogoproto.nullable) = false];
}

// QueryLoanRequest is request type for the Query/Loan RPC method.
message QueryLoanRequest {
    string loan_id = 1;
}

// QueryLoanResponse is response type for the Query/Loan RPC method.
message QueryLoanResponse {
    Loan loan = 1;
}

// QueryLoansRequest is request type for the Query/Loans RPC method.
message QueryLoansRequest {
    LoanStatus status = 1;
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryLoansResponse is response type for the Query/Loans RPC method.
message QueryLoansResponse {
    repeated Loan loans = 1;
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryLoanDlcMetaRequest is request type for the Query/LoanDlcMeta RPC method.
message QueryLoanDlcMetaRequest {
    string loan_id = 1;
}

// QueryLoanDlcMetaResponse is response type for the Query/LoanDlcMeta RPC method.
message QueryLoanDlcMetaResponse {
    DLCMeta dlc_meta = 1;
}

message QueryRepaymentRequest {
    string loan_id = 1;
}

message QueryRepaymentResponse {
    Repayment repayment = 1;
}
