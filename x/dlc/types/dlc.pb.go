// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/dlc/dlc.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DLCOracleStatus int32

const (
	DLCOracleStatus_Oracle_Status_Pending  DLCOracleStatus = 0
	DLCOracleStatus_Oracle_Status_Failed   DLCOracleStatus = 1
	DLCOracleStatus_Oracle_Status_Timedout DLCOracleStatus = 2
	DLCOracleStatus_Oracle_status_Enable   DLCOracleStatus = 3
	DLCOracleStatus_Oracle_status_Disable  DLCOracleStatus = 4
)

var DLCOracleStatus_name = map[int32]string{
	0: "Oracle_Status_Pending",
	1: "Oracle_Status_Failed",
	2: "Oracle_Status_Timedout",
	3: "Oracle_status_Enable",
	4: "Oracle_status_Disable",
}

var DLCOracleStatus_value = map[string]int32{
	"Oracle_Status_Pending":  0,
	"Oracle_Status_Failed":   1,
	"Oracle_Status_Timedout": 2,
	"Oracle_status_Enable":   3,
	"Oracle_status_Disable":  4,
}

func (x DLCOracleStatus) String() string {
	return proto.EnumName(DLCOracleStatus_name, int32(x))
}

func (DLCOracleStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdcd991e9f56ce38, []int{0}
}

type AgencyStatus int32

const (
	AgencyStatus_Agency_Status_Pending  AgencyStatus = 0
	AgencyStatus_Agency_Status_Failed   AgencyStatus = 1
	AgencyStatus_Agency_Status_Timedout AgencyStatus = 2
	AgencyStatus_Agency_status_Enable   AgencyStatus = 3
	AgencyStatus_Agency_status_Disable  AgencyStatus = 4
)

var AgencyStatus_name = map[int32]string{
	0: "Agency_Status_Pending",
	1: "Agency_Status_Failed",
	2: "Agency_Status_Timedout",
	3: "Agency_status_Enable",
	4: "Agency_status_Disable",
}

var AgencyStatus_value = map[string]int32{
	"Agency_Status_Pending":  0,
	"Agency_Status_Failed":   1,
	"Agency_Status_Timedout": 2,
	"Agency_status_Enable":   3,
	"Agency_status_Disable":  4,
}

func (x AgencyStatus) String() string {
	return proto.EnumName(AgencyStatus_name, int32(x))
}

func (AgencyStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdcd991e9f56ce38, []int{1}
}

type DLCOracle struct {
	Id           uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc         string          `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Participants []string        `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	Threshold    uint32          `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Pubkey       string          `protobuf:"bytes,5,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	NonceIndex   uint64          `protobuf:"varint,6,opt,name=nonce_index,json=nonceIndex,proto3" json:"nonce_index,omitempty"`
	Time         time.Time       `protobuf:"bytes,7,opt,name=time,proto3,stdtime" json:"time"`
	Status       DLCOracleStatus `protobuf:"varint,8,opt,name=status,proto3,enum=side.dlc.DLCOracleStatus" json:"status,omitempty"`
}

func (m *DLCOracle) Reset()         { *m = DLCOracle{} }
func (m *DLCOracle) String() string { return proto.CompactTextString(m) }
func (*DLCOracle) ProtoMessage()    {}
func (*DLCOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdcd991e9f56ce38, []int{0}
}
func (m *DLCOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLCOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLCOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLCOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLCOracle.Merge(m, src)
}
func (m *DLCOracle) XXX_Size() int {
	return m.Size()
}
func (m *DLCOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_DLCOracle.DiscardUnknown(m)
}

var xxx_messageInfo_DLCOracle proto.InternalMessageInfo

func (m *DLCOracle) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DLCOracle) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *DLCOracle) GetParticipants() []string {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *DLCOracle) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *DLCOracle) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *DLCOracle) GetNonceIndex() uint64 {
	if m != nil {
		return m.NonceIndex
	}
	return 0
}

func (m *DLCOracle) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *DLCOracle) GetStatus() DLCOracleStatus {
	if m != nil {
		return m.Status
	}
	return DLCOracleStatus_Oracle_Status_Pending
}

type Agency struct {
	Id           uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc         string       `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Participants []string     `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	Threshold    uint32       `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Pubkey       string       `protobuf:"bytes,5,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Time         time.Time    `protobuf:"bytes,6,opt,name=time,proto3,stdtime" json:"time"`
	Status       AgencyStatus `protobuf:"varint,7,opt,name=status,proto3,enum=side.dlc.AgencyStatus" json:"status,omitempty"`
}

func (m *Agency) Reset()         { *m = Agency{} }
func (m *Agency) String() string { return proto.CompactTextString(m) }
func (*Agency) ProtoMessage()    {}
func (*Agency) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdcd991e9f56ce38, []int{1}
}
func (m *Agency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Agency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Agency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Agency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agency.Merge(m, src)
}
func (m *Agency) XXX_Size() int {
	return m.Size()
}
func (m *Agency) XXX_DiscardUnknown() {
	xxx_messageInfo_Agency.DiscardUnknown(m)
}

var xxx_messageInfo_Agency proto.InternalMessageInfo

func (m *Agency) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Agency) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Agency) GetParticipants() []string {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Agency) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *Agency) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *Agency) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *Agency) GetStatus() AgencyStatus {
	if m != nil {
		return m.Status
	}
	return AgencyStatus_Agency_Status_Pending
}

type DLCNonce struct {
	Index        uint64    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Nonce        string    `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	OraclePubkey string    `protobuf:"bytes,3,opt,name=oracle_pubkey,json=oraclePubkey,proto3" json:"oracle_pubkey,omitempty"`
	Time         time.Time `protobuf:"bytes,4,opt,name=time,proto3,stdtime" json:"time"`
}

func (m *DLCNonce) Reset()         { *m = DLCNonce{} }
func (m *DLCNonce) String() string { return proto.CompactTextString(m) }
func (*DLCNonce) ProtoMessage()    {}
func (*DLCNonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdcd991e9f56ce38, []int{2}
}
func (m *DLCNonce) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLCNonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLCNonce.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLCNonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLCNonce.Merge(m, src)
}
func (m *DLCNonce) XXX_Size() int {
	return m.Size()
}
func (m *DLCNonce) XXX_DiscardUnknown() {
	xxx_messageInfo_DLCNonce.DiscardUnknown(m)
}

var xxx_messageInfo_DLCNonce proto.InternalMessageInfo

func (m *DLCNonce) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *DLCNonce) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *DLCNonce) GetOraclePubkey() string {
	if m != nil {
		return m.OraclePubkey
	}
	return ""
}

func (m *DLCNonce) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

type DLCPriceEvent struct {
	Id           uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TriggerPrice cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=trigger_price,json=triggerPrice,proto3,customtype=cosmossdk.io/math.Int" json:"trigger_price"`
	PriceDecimal cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=price_decimal,json=priceDecimal,proto3,customtype=cosmossdk.io/math.Int" json:"price_decimal"`
	Nonce        string                `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Pubkey       string                `protobuf:"bytes,5,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Description  string                `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	HasTriggered bool                  `protobuf:"varint,7,opt,name=has_triggered,json=hasTriggered,proto3" json:"has_triggered,omitempty"`
	PublishAt    time.Time             `protobuf:"bytes,8,opt,name=publish_at,json=publishAt,proto3,stdtime" json:"publish_at"`
}

func (m *DLCPriceEvent) Reset()         { *m = DLCPriceEvent{} }
func (m *DLCPriceEvent) String() string { return proto.CompactTextString(m) }
func (*DLCPriceEvent) ProtoMessage()    {}
func (*DLCPriceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdcd991e9f56ce38, []int{3}
}
func (m *DLCPriceEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLCPriceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLCPriceEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLCPriceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLCPriceEvent.Merge(m, src)
}
func (m *DLCPriceEvent) XXX_Size() int {
	return m.Size()
}
func (m *DLCPriceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DLCPriceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DLCPriceEvent proto.InternalMessageInfo

func (m *DLCPriceEvent) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DLCPriceEvent) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *DLCPriceEvent) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *DLCPriceEvent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DLCPriceEvent) GetHasTriggered() bool {
	if m != nil {
		return m.HasTriggered
	}
	return false
}

func (m *DLCPriceEvent) GetPublishAt() time.Time {
	if m != nil {
		return m.PublishAt
	}
	return time.Time{}
}

type DLCAttestation struct {
	Id        uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId   uint64    `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Time      time.Time `protobuf:"bytes,3,opt,name=time,proto3,stdtime" json:"time"`
	Pubkey    string    `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Outcome   string    `protobuf:"bytes,5,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Signature string    `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DLCAttestation) Reset()         { *m = DLCAttestation{} }
func (m *DLCAttestation) String() string { return proto.CompactTextString(m) }
func (*DLCAttestation) ProtoMessage()    {}
func (*DLCAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdcd991e9f56ce38, []int{4}
}
func (m *DLCAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLCAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLCAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLCAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLCAttestation.Merge(m, src)
}
func (m *DLCAttestation) XXX_Size() int {
	return m.Size()
}
func (m *DLCAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_DLCAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_DLCAttestation proto.InternalMessageInfo

func (m *DLCAttestation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DLCAttestation) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *DLCAttestation) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *DLCAttestation) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *DLCAttestation) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *DLCAttestation) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterEnum("side.dlc.DLCOracleStatus", DLCOracleStatus_name, DLCOracleStatus_value)
	proto.RegisterEnum("side.dlc.AgencyStatus", AgencyStatus_name, AgencyStatus_value)
	proto.RegisterType((*DLCOracle)(nil), "side.dlc.DLCOracle")
	proto.RegisterType((*Agency)(nil), "side.dlc.Agency")
	proto.RegisterType((*DLCNonce)(nil), "side.dlc.DLCNonce")
	proto.RegisterType((*DLCPriceEvent)(nil), "side.dlc.DLCPriceEvent")
	proto.RegisterType((*DLCAttestation)(nil), "side.dlc.DLCAttestation")
}

func init() { proto.RegisterFile("side/dlc/dlc.proto", fileDescriptor_fdcd991e9f56ce38) }

var fileDescriptor_fdcd991e9f56ce38 = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0xce, 0x24, 0x26, 0x3f, 0x43, 0xc2, 0x8d, 0x46, 0x80, 0x4c, 0x74, 0x6f, 0x12, 0xe5, 0x6e,
	0x22, 0x16, 0x8e, 0x2e, 0x77, 0xd3, 0x2d, 0x49, 0xa8, 0x84, 0x14, 0xb5, 0xc8, 0x65, 0xd5, 0x8d,
	0xe5, 0x78, 0xa6, 0xf6, 0x08, 0xdb, 0x63, 0x79, 0xc6, 0x15, 0xbc, 0x05, 0x8b, 0x56, 0x3c, 0x51,
	0x25, 0x96, 0x2c, 0xab, 0x2e, 0x68, 0x0b, 0x2f, 0xd0, 0x47, 0xa8, 0x66, 0xc6, 0xf9, 0x31, 0xa5,
	0x6a, 0x59, 0x75, 0x11, 0xc9, 0xe7, 0xfb, 0xce, 0x39, 0x3e, 0xdf, 0x77, 0x66, 0x62, 0x88, 0x38,
	0xc5, 0x64, 0x84, 0x43, 0x4f, 0xfe, 0xac, 0x24, 0x65, 0x82, 0xa1, 0xba, 0xc4, 0x2c, 0x1c, 0x7a,
	0x9d, 0x6d, 0x9f, 0xf9, 0x4c, 0x81, 0x23, 0xf9, 0xa4, 0xf9, 0x4e, 0xcf, 0x67, 0xcc, 0x0f, 0xc9,
	0x48, 0x45, 0xf3, 0xec, 0xcd, 0x48, 0xd0, 0x88, 0x70, 0xe1, 0x46, 0x89, 0x4e, 0x18, 0x5c, 0x95,
	0x61, 0x63, 0x3a, 0x9b, 0xbc, 0x4c, 0x5d, 0x2f, 0x24, 0x68, 0x0b, 0x96, 0x29, 0x36, 0x41, 0x1f,
	0x0c, 0x0d, 0xbb, 0x4c, 0x31, 0x42, 0xd0, 0xc0, 0x84, 0x7b, 0x66, 0xb9, 0x0f, 0x86, 0x0d, 0x5b,
	0x3d, 0xa3, 0x01, 0x6c, 0x26, 0x6e, 0x2a, 0xa8, 0x47, 0x13, 0x37, 0x16, 0xdc, 0xac, 0xf4, 0x2b,
	0xc3, 0x86, 0x5d, 0xc0, 0xd0, 0xdf, 0xb0, 0x21, 0x82, 0x94, 0xf0, 0x80, 0x85, 0xd8, 0x34, 0xfa,
	0x60, 0xd8, 0xb2, 0x57, 0x00, 0xda, 0x85, 0xd5, 0x24, 0x9b, 0x9f, 0x91, 0x0b, 0x73, 0x43, 0xf5,
	0xcd, 0x23, 0xd4, 0x83, 0x9b, 0x31, 0x8b, 0x3d, 0xe2, 0xd0, 0x18, 0x93, 0x73, 0xb3, 0xaa, 0xc6,
	0x80, 0x0a, 0x3a, 0x96, 0x08, 0x7a, 0x06, 0x0d, 0x39, 0xbf, 0x59, 0xeb, 0x83, 0xe1, 0xe6, 0x41,
	0xc7, 0xd2, 0xe2, 0xac, 0x85, 0x38, 0xeb, 0x74, 0x21, 0x6e, 0x5c, 0xbf, 0xbe, 0xed, 0x95, 0x2e,
	0x3f, 0xf7, 0x80, 0xad, 0x2a, 0xd0, 0x7f, 0xb0, 0xca, 0x85, 0x2b, 0x32, 0x6e, 0xd6, 0xfb, 0x60,
	0xb8, 0x75, 0xb0, 0x67, 0x2d, 0x8c, 0xb3, 0x96, 0xea, 0x5f, 0xa9, 0x04, 0x3b, 0x4f, 0x1c, 0x7c,
	0x03, 0xb0, 0x7a, 0xe8, 0x93, 0xd8, 0xbb, 0xf8, 0xc3, 0xb6, 0x2c, 0x54, 0x57, 0x9f, 0xac, 0xda,
	0x5a, 0xaa, 0xae, 0x29, 0xd5, 0xbb, 0x2b, 0xd5, 0x5a, 0xd9, 0x03, 0xc9, 0xef, 0x01, 0xac, 0x4f,
	0x67, 0x93, 0x17, 0xd2, 0x71, 0xb4, 0x0d, 0x37, 0xf4, 0x1e, 0xb4, 0x6e, 0x1d, 0x48, 0x54, 0x2d,
	0x24, 0xd7, 0xae, 0x03, 0xf4, 0x2f, 0x6c, 0x31, 0xe5, 0xa1, 0x93, 0x2b, 0xa8, 0x28, 0xb6, 0xa9,
	0xc1, 0x93, 0xa2, 0x0e, 0xe3, 0xa9, 0x3a, 0x06, 0x5f, 0xcb, 0xb0, 0x35, 0x9d, 0x4d, 0x4e, 0x52,
	0xea, 0x91, 0xa3, 0xb7, 0x24, 0x16, 0x3f, 0x6c, 0x64, 0x0c, 0x5b, 0x22, 0xa5, 0xbe, 0x4f, 0x52,
	0x27, 0x91, 0x59, 0x7a, 0xbc, 0xf1, 0x3f, 0xb2, 0xd1, 0xa7, 0xdb, 0xde, 0x8e, 0xc7, 0x78, 0xc4,
	0x38, 0xc7, 0x67, 0x16, 0x65, 0xa3, 0xc8, 0x15, 0x81, 0x75, 0x1c, 0x0b, 0xbb, 0x99, 0xd7, 0xa8,
	0xc6, 0xb2, 0x87, 0xaa, 0x75, 0x30, 0xf1, 0x68, 0xe4, 0x86, 0x5a, 0xc4, 0x2f, 0x7b, 0xa8, 0x9a,
	0xa9, 0x2e, 0x59, 0xd9, 0x63, 0xac, 0xdb, 0xf3, 0xb3, 0xcd, 0xf6, 0xe1, 0xa6, 0x3c, 0x3b, 0x29,
	0x4d, 0x04, 0x65, 0xb1, 0x5a, 0x70, 0xc3, 0x5e, 0x87, 0xa4, 0xb1, 0x81, 0xcb, 0x9d, 0x7c, 0x4e,
	0x82, 0xd5, 0x22, 0xeb, 0x76, 0x33, 0x70, 0xf9, 0xe9, 0x02, 0x43, 0x13, 0x08, 0x93, 0x6c, 0x1e,
	0x52, 0x1e, 0x38, 0xae, 0x50, 0x07, 0xfc, 0x77, 0xed, 0x6d, 0xe4, 0x75, 0x87, 0x62, 0xf0, 0x01,
	0xc0, 0xad, 0xe9, 0x6c, 0x72, 0x28, 0x84, 0xcc, 0x52, 0x2f, 0x7f, 0x68, 0xf2, 0x1e, 0xac, 0x13,
	0xe9, 0xbe, 0x43, 0xb1, 0xf2, 0xd7, 0xb0, 0x6b, 0x2a, 0x3e, 0xc6, 0xcb, 0xdd, 0x56, 0x9e, 0x7c,
	0x46, 0x57, 0xde, 0x18, 0x05, 0x6f, 0x4c, 0x58, 0x63, 0x99, 0xf0, 0x58, 0x44, 0x72, 0xd3, 0x16,
	0xa1, 0xbc, 0x45, 0x9c, 0xfa, 0xb1, 0x2b, 0xb2, 0x94, 0xe4, 0x9e, 0xad, 0x80, 0xfd, 0x2b, 0x00,
	0xff, 0x7a, 0x70, 0xa5, 0xd1, 0x1e, 0xdc, 0xd1, 0xb1, 0xa3, 0x01, 0xe7, 0x84, 0xc4, 0x98, 0xc6,
	0x7e, 0xbb, 0x84, 0x4c, 0xb8, 0x5d, 0xa4, 0x9e, 0xbb, 0x34, 0x24, 0xb8, 0x0d, 0x50, 0x07, 0xee,
	0x16, 0x19, 0xa9, 0x01, 0xb3, 0x4c, 0xb4, 0xcb, 0x6b, 0x55, 0xfa, 0xe6, 0x38, 0x47, 0xb1, 0x3b,
	0x0f, 0x49, 0xbb, 0xb2, 0xf6, 0xaa, 0x9c, 0x99, 0x52, 0xae, 0x28, 0x63, 0xff, 0x1d, 0x80, 0xcd,
	0xf5, 0x6b, 0x27, 0x73, 0x75, 0xfc, 0xe8, 0x58, 0x45, 0x6a, 0x7d, 0xac, 0x22, 0x53, 0x1c, 0x2b,
	0xe7, 0x1e, 0x19, 0xab, 0xc8, 0x2c, 0xc7, 0x1a, 0x8f, 0xaf, 0xef, 0xba, 0xe0, 0xe6, 0xae, 0x0b,
	0xbe, 0xdc, 0x75, 0xc1, 0xe5, 0x7d, 0xb7, 0x74, 0x73, 0xdf, 0x2d, 0x7d, 0xbc, 0xef, 0x96, 0x5e,
	0x0f, 0x7d, 0x2a, 0x82, 0x6c, 0x6e, 0x79, 0x2c, 0x1a, 0xc9, 0x3f, 0x0e, 0xb5, 0x4d, 0x8f, 0x85,
	0x2a, 0x18, 0x9d, 0xab, 0x4f, 0x91, 0xb8, 0x48, 0x08, 0x9f, 0x57, 0x15, 0xf5, 0xff, 0xf7, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xd7, 0x09, 0x7d, 0xd9, 0xa3, 0x06, 0x00, 0x00,
}

func (m *DLCOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLCOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLCOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintDlc(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	if m.NonceIndex != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.NonceIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Threshold != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Participants[iNdEx])
			copy(dAtA[i:], m.Participants[iNdEx])
			i = encodeVarintDlc(dAtA, i, uint64(len(m.Participants[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Agency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Agency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintDlc(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Threshold != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Participants[iNdEx])
			copy(dAtA[i:], m.Participants[iNdEx])
			i = encodeVarintDlc(dAtA, i, uint64(len(m.Participants[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DLCNonce) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLCNonce) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLCNonce) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintDlc(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if len(m.OraclePubkey) > 0 {
		i -= len(m.OraclePubkey)
		copy(dAtA[i:], m.OraclePubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.OraclePubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DLCPriceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLCPriceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLCPriceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.PublishAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PublishAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintDlc(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x42
	if m.HasTriggered {
		i--
		if m.HasTriggered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.PriceDecimal.Size()
		i -= size
		if _, err := m.PriceDecimal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TriggerPrice.Size()
		i -= size
		if _, err := m.TriggerPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DLCAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLCAttestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLCAttestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Outcome) > 0 {
		i -= len(m.Outcome)
		copy(dAtA[i:], m.Outcome)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Outcome)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x22
	}
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintDlc(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1a
	if m.EventId != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDlc(dAtA []byte, offset int, v uint64) int {
	offset -= sovDlc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DLCOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDlc(uint64(m.Id))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	if len(m.Participants) > 0 {
		for _, s := range m.Participants {
			l = len(s)
			n += 1 + l + sovDlc(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovDlc(uint64(m.Threshold))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	if m.NonceIndex != 0 {
		n += 1 + sovDlc(uint64(m.NonceIndex))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovDlc(uint64(l))
	if m.Status != 0 {
		n += 1 + sovDlc(uint64(m.Status))
	}
	return n
}

func (m *Agency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDlc(uint64(m.Id))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	if len(m.Participants) > 0 {
		for _, s := range m.Participants {
			l = len(s)
			n += 1 + l + sovDlc(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovDlc(uint64(m.Threshold))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovDlc(uint64(l))
	if m.Status != 0 {
		n += 1 + sovDlc(uint64(m.Status))
	}
	return n
}

func (m *DLCNonce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDlc(uint64(m.Index))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.OraclePubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovDlc(uint64(l))
	return n
}

func (m *DLCPriceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDlc(uint64(m.Id))
	}
	l = m.TriggerPrice.Size()
	n += 1 + l + sovDlc(uint64(l))
	l = m.PriceDecimal.Size()
	n += 1 + l + sovDlc(uint64(l))
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	if m.HasTriggered {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PublishAt)
	n += 1 + l + sovDlc(uint64(l))
	return n
}

func (m *DLCAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDlc(uint64(m.Id))
	}
	if m.EventId != 0 {
		n += 1 + sovDlc(uint64(m.EventId))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovDlc(uint64(l))
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Outcome)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	return n
}

func sovDlc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDlc(x uint64) (n int) {
	return sovDlc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DLCOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLCOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLCOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceIndex", wireType)
			}
			m.NonceIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NonceIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DLCOracleStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Agency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AgencyStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLCNonce) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLCNonce: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLCNonce: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OraclePubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OraclePubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLCPriceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLCPriceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLCPriceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TriggerPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDecimal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceDecimal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTriggered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasTriggered = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.PublishAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLCAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLCAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLCAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outcome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDlc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDlc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDlc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDlc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDlc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDlc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDlc = fmt.Errorf("proto: unexpected end of group")
)
