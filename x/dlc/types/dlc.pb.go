// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/dlc/dlc.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AnnouncementStatus int32

const (
	AnnouncementStatus_Announcement_Unspecified AnnouncementStatus = 0
	AnnouncementStatus_Announcement_Pending     AnnouncementStatus = 1
	AnnouncementStatus_Announcement_Ready       AnnouncementStatus = 2
)

var AnnouncementStatus_name = map[int32]string{
	0: "Announcement_Unspecified",
	1: "Announcement_Pending",
	2: "Announcement_Ready",
}

var AnnouncementStatus_value = map[string]int32{
	"Announcement_Unspecified": 0,
	"Announcement_Pending":     1,
	"Announcement_Ready":       2,
}

func (x AnnouncementStatus) String() string {
	return proto.EnumName(AnnouncementStatus_name, int32(x))
}

func (AnnouncementStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdcd991e9f56ce38, []int{0}
}

type DLCAnnouncement struct {
	Id          uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OracleEvent *DLCEvent          `protobuf:"bytes,2,opt,name=oracle_event,json=oracleEvent,proto3" json:"oracle_event,omitempty"`
	Signature   string             `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Status      AnnouncementStatus `protobuf:"varint,4,opt,name=status,proto3,enum=side.dlc.AnnouncementStatus" json:"status,omitempty"`
}

func (m *DLCAnnouncement) Reset()         { *m = DLCAnnouncement{} }
func (m *DLCAnnouncement) String() string { return proto.CompactTextString(m) }
func (*DLCAnnouncement) ProtoMessage()    {}
func (*DLCAnnouncement) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdcd991e9f56ce38, []int{0}
}
func (m *DLCAnnouncement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLCAnnouncement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLCAnnouncement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLCAnnouncement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLCAnnouncement.Merge(m, src)
}
func (m *DLCAnnouncement) XXX_Size() int {
	return m.Size()
}
func (m *DLCAnnouncement) XXX_DiscardUnknown() {
	xxx_messageInfo_DLCAnnouncement.DiscardUnknown(m)
}

var xxx_messageInfo_DLCAnnouncement proto.InternalMessageInfo

func (m *DLCAnnouncement) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DLCAnnouncement) GetOracleEvent() *DLCEvent {
	if m != nil {
		return m.OracleEvent
	}
	return nil
}

func (m *DLCAnnouncement) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *DLCAnnouncement) GetStatus() AnnouncementStatus {
	if m != nil {
		return m.Status
	}
	return AnnouncementStatus_Announcement_Unspecified
}

type DLCAttestation struct {
	AnnouncementId uint64    `protobuf:"varint,1,opt,name=announcement_id,json=announcementId,proto3" json:"announcement_id,omitempty"`
	Time           time.Time `protobuf:"bytes,2,opt,name=time,proto3,stdtime" json:"time"`
	Outcome        string    `protobuf:"bytes,3,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Signature      string    `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DLCAttestation) Reset()         { *m = DLCAttestation{} }
func (m *DLCAttestation) String() string { return proto.CompactTextString(m) }
func (*DLCAttestation) ProtoMessage()    {}
func (*DLCAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdcd991e9f56ce38, []int{1}
}
func (m *DLCAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLCAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLCAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLCAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLCAttestation.Merge(m, src)
}
func (m *DLCAttestation) XXX_Size() int {
	return m.Size()
}
func (m *DLCAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_DLCAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_DLCAttestation proto.InternalMessageInfo

func (m *DLCAttestation) GetAnnouncementId() uint64 {
	if m != nil {
		return m.AnnouncementId
	}
	return 0
}

func (m *DLCAttestation) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *DLCAttestation) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *DLCAttestation) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type DLCEvent struct {
	MaturityEpoch uint32 `protobuf:"varint,1,opt,name=maturity_epoch,json=maturityEpoch,proto3" json:"maturity_epoch,omitempty"`
	Nonce         string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Index         uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Descriptor_   string `protobuf:"bytes,4,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	Pubkey        string `protobuf:"bytes,5,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *DLCEvent) Reset()         { *m = DLCEvent{} }
func (m *DLCEvent) String() string { return proto.CompactTextString(m) }
func (*DLCEvent) ProtoMessage()    {}
func (*DLCEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdcd991e9f56ce38, []int{2}
}
func (m *DLCEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLCEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLCEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLCEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLCEvent.Merge(m, src)
}
func (m *DLCEvent) XXX_Size() int {
	return m.Size()
}
func (m *DLCEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DLCEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DLCEvent proto.InternalMessageInfo

func (m *DLCEvent) GetMaturityEpoch() uint32 {
	if m != nil {
		return m.MaturityEpoch
	}
	return 0
}

func (m *DLCEvent) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *DLCEvent) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *DLCEvent) GetDescriptor_() string {
	if m != nil {
		return m.Descriptor_
	}
	return ""
}

func (m *DLCEvent) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func init() {
	proto.RegisterEnum("side.dlc.AnnouncementStatus", AnnouncementStatus_name, AnnouncementStatus_value)
	proto.RegisterType((*DLCAnnouncement)(nil), "side.dlc.DLCAnnouncement")
	proto.RegisterType((*DLCAttestation)(nil), "side.dlc.DLCAttestation")
	proto.RegisterType((*DLCEvent)(nil), "side.dlc.DLCEvent")
}

func init() { proto.RegisterFile("side/dlc/dlc.proto", fileDescriptor_fdcd991e9f56ce38) }

var fileDescriptor_fdcd991e9f56ce38 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0x92, 0x95, 0xf6, 0x8d, 0x65, 0x95, 0x55, 0x4d, 0x51, 0x55, 0xa5, 0x55, 0x25,
	0x44, 0xc4, 0x21, 0x91, 0x06, 0x48, 0x5c, 0xe9, 0xb6, 0x03, 0xd2, 0x0e, 0x28, 0xc0, 0x85, 0x4b,
	0x94, 0xda, 0x5e, 0x66, 0x91, 0xd8, 0x51, 0xe2, 0xa0, 0xf5, 0x5b, 0xec, 0xc2, 0xa7, 0x80, 0x0f,
	0xb2, 0xe3, 0x8e, 0x9c, 0x00, 0xb5, 0x5f, 0x04, 0xd9, 0x69, 0x58, 0x0a, 0x87, 0x4a, 0xfd, 0xff,
	0xde, 0xb3, 0xdf, 0xff, 0xfd, 0x1d, 0xc0, 0x15, 0xa7, 0x2c, 0xa4, 0x19, 0xd1, 0xbf, 0xa0, 0x28,
	0xa5, 0x92, 0x78, 0xa0, 0x59, 0x40, 0x33, 0x32, 0x19, 0xa7, 0x32, 0x95, 0x06, 0x86, 0xfa, 0x5f,
	0x53, 0x9f, 0xcc, 0x52, 0x29, 0xd3, 0x8c, 0x85, 0x46, 0xad, 0xea, 0xab, 0x50, 0xf1, 0x9c, 0x55,
	0x2a, 0xc9, 0x8b, 0xa6, 0x61, 0xf1, 0x1d, 0xc1, 0xf1, 0xf9, 0xe5, 0xd9, 0x1b, 0x21, 0x64, 0x2d,
	0x08, 0xcb, 0x99, 0x50, 0xd8, 0x81, 0x1e, 0xa7, 0x2e, 0x9a, 0x23, 0xdf, 0x8e, 0x7a, 0x9c, 0xe2,
	0x57, 0xf0, 0x44, 0x96, 0x09, 0xc9, 0x58, 0xcc, 0xbe, 0x30, 0xa1, 0xdc, 0xde, 0x1c, 0xf9, 0x87,
	0xa7, 0x38, 0x68, 0x67, 0x07, 0xe7, 0x97, 0x67, 0x17, 0xba, 0x12, 0x1d, 0x36, 0x7d, 0x46, 0xe0,
	0x29, 0x0c, 0x2b, 0x9e, 0x8a, 0x44, 0xd5, 0x25, 0x73, 0x1f, 0xcd, 0x91, 0x3f, 0x8c, 0x1e, 0x00,
	0x7e, 0x09, 0xfd, 0x4a, 0x25, 0xaa, 0xae, 0x5c, 0x7b, 0x8e, 0x7c, 0xe7, 0x74, 0xfa, 0x70, 0x5d,
	0xd7, 0xcc, 0x7b, 0xd3, 0x13, 0xed, 0x7a, 0x17, 0xdf, 0x10, 0x38, 0xda, 0xae, 0x52, 0x7a, 0x0b,
	0xc5, 0xa5, 0xc0, 0xcf, 0xe0, 0x38, 0xe9, 0x1c, 0x88, 0xff, 0x5a, 0x77, 0xba, 0xf8, 0x2d, 0xc5,
	0xaf, 0xc1, 0xd6, 0xdb, 0xef, 0xec, 0x4f, 0x82, 0x26, 0x9a, 0xa0, 0x8d, 0x26, 0xf8, 0xd0, 0x46,
	0xb3, 0x1c, 0xdc, 0xfd, 0x9c, 0x59, 0xb7, 0xbf, 0x66, 0x28, 0x32, 0x27, 0xb0, 0x0b, 0x8f, 0x65,
	0xad, 0x88, 0xcc, 0xdb, 0x3d, 0x5a, 0xb9, 0xbf, 0xa3, 0xfd, 0xcf, 0x8e, 0x8b, 0xaf, 0x08, 0x06,
	0x6d, 0x36, 0xf8, 0x29, 0x38, 0xb9, 0xc6, 0x5c, 0xad, 0x63, 0x56, 0x48, 0x72, 0x6d, 0x6c, 0x1e,
	0x45, 0x47, 0x2d, 0xbd, 0xd0, 0x10, 0x8f, 0xe1, 0x40, 0x48, 0x41, 0x1a, 0x9b, 0xc3, 0xa8, 0x11,
	0x9a, 0x72, 0x41, 0xd9, 0x8d, 0x99, 0x6f, 0x47, 0x8d, 0xc0, 0x1e, 0x00, 0x65, 0x15, 0x29, 0x79,
	0xa1, 0x64, 0xb9, 0x1b, 0xdf, 0x21, 0xf8, 0x04, 0xfa, 0x45, 0xbd, 0xfa, 0xcc, 0xd6, 0xee, 0x81,
	0xa9, 0xed, 0xd4, 0x73, 0x0a, 0xf8, 0xff, 0x8c, 0xf1, 0x14, 0xdc, 0x2e, 0x8d, 0x3f, 0x8a, 0xaa,
	0x60, 0x84, 0x5f, 0x71, 0x46, 0x47, 0x16, 0x76, 0x61, 0xbc, 0x57, 0x7d, 0xc7, 0x04, 0xe5, 0x22,
	0x1d, 0x21, 0x7c, 0xb2, 0x7f, 0x5b, 0x1c, 0xb1, 0x84, 0xae, 0x47, 0xbd, 0xe5, 0xf2, 0x6e, 0xe3,
	0xa1, 0xfb, 0x8d, 0x87, 0x7e, 0x6f, 0x3c, 0x74, 0xbb, 0xf5, 0xac, 0xfb, 0xad, 0x67, 0xfd, 0xd8,
	0x7a, 0xd6, 0x27, 0x3f, 0xe5, 0xea, 0xba, 0x5e, 0x05, 0x44, 0xe6, 0xa1, 0x7e, 0x75, 0xf3, 0x04,
	0x44, 0x66, 0x46, 0x84, 0x37, 0xe6, 0x1b, 0x57, 0xeb, 0x82, 0x55, 0xab, 0xbe, 0x29, 0xbd, 0xf8,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xfa, 0x2d, 0x62, 0xfc, 0x02, 0x00, 0x00,
}

func (m *DLCAnnouncement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLCAnnouncement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLCAnnouncement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OracleEvent != nil {
		{
			size, err := m.OracleEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDlc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DLCAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLCAttestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLCAttestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Outcome) > 0 {
		i -= len(m.Outcome)
		copy(dAtA[i:], m.Outcome)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Outcome)))
		i--
		dAtA[i] = 0x1a
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintDlc(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.AnnouncementId != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.AnnouncementId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DLCEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLCEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLCEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Descriptor_) > 0 {
		i -= len(m.Descriptor_)
		copy(dAtA[i:], m.Descriptor_)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Descriptor_)))
		i--
		dAtA[i] = 0x22
	}
	if m.Index != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintDlc(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x12
	}
	if m.MaturityEpoch != 0 {
		i = encodeVarintDlc(dAtA, i, uint64(m.MaturityEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDlc(dAtA []byte, offset int, v uint64) int {
	offset -= sovDlc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DLCAnnouncement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDlc(uint64(m.Id))
	}
	if m.OracleEvent != nil {
		l = m.OracleEvent.Size()
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDlc(uint64(m.Status))
	}
	return n
}

func (m *DLCAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnnouncementId != 0 {
		n += 1 + sovDlc(uint64(m.AnnouncementId))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovDlc(uint64(l))
	l = len(m.Outcome)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	return n
}

func (m *DLCEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaturityEpoch != 0 {
		n += 1 + sovDlc(uint64(m.MaturityEpoch))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovDlc(uint64(m.Index))
	}
	l = len(m.Descriptor_)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovDlc(uint64(l))
	}
	return n
}

func sovDlc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDlc(x uint64) (n int) {
	return sovDlc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DLCAnnouncement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLCAnnouncement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLCAnnouncement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleEvent == nil {
				m.OracleEvent = &DLCEvent{}
			}
			if err := m.OracleEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AnnouncementStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLCAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLCAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLCAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnouncementId", wireType)
			}
			m.AnnouncementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnnouncementId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outcome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLCEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLCEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLCEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityEpoch", wireType)
			}
			m.MaturityEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaturityEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Descriptor_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Descriptor_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDlc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDlc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDlc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDlc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDlc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDlc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDlc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDlc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDlc = fmt.Errorf("proto: unexpected end of group")
)
