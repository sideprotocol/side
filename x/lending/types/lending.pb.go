// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/lending/lending.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Status options for a lending pool
type PoolStatus int32

const (
	PoolStatus_ACTIVE   PoolStatus = 0
	PoolStatus_INACTIVE PoolStatus = 1
)

var PoolStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "INACTIVE",
}

var PoolStatus_value = map[string]int32{
	"ACTIVE":   0,
	"INACTIVE": 1,
}

func (x PoolStatus) String() string {
	return proto.EnumName(PoolStatus_name, int32(x))
}

func (PoolStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eb4e0b35327359cc, []int{0}
}

type LoanStatus int32

const (
	// Loan Application
	LoanStatus_Apply LoanStatus = 0
	// Loan Approval
	LoanStatus_Approve LoanStatus = 1
	// Loan Disbursement
	LoanStatus_Disburse LoanStatus = 2
	// Loan Repayment
	LoanStatus_Repay LoanStatus = 3
	// Loan Default/Delinquency
	LoanStatus_Default LoanStatus = 4
	// Loan Liquidation
	LoanStatus_Liquidate LoanStatus = 5
	// Loan Closure
	LoanStatus_Close LoanStatus = 6
)

var LoanStatus_name = map[int32]string{
	0: "Apply",
	1: "Approve",
	2: "Disburse",
	3: "Repay",
	4: "Default",
	5: "Liquidate",
	6: "Close",
}

var LoanStatus_value = map[string]int32{
	"Apply":     0,
	"Approve":   1,
	"Disburse":  2,
	"Repay":     3,
	"Default":   4,
	"Liquidate": 5,
	"Close":     6,
}

func (x LoanStatus) String() string {
	return proto.EnumName(LoanStatus_name, int32(x))
}

func (LoanStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eb4e0b35327359cc, []int{1}
}

type LendingPool struct {
	Id             string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Supply         *types.Coin           `protobuf:"bytes,2,opt,name=supply,proto3" json:"supply,omitempty"`
	TotalShares    cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_shares,json=totalShares,proto3,customtype=cosmossdk.io/math.Int" json:"total_shares"`
	BorrowedAmount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=borrowed_amount,json=borrowedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"borrowed_amount"`
	Status         PoolStatus            `protobuf:"varint,5,opt,name=status,proto3,enum=side.lending.PoolStatus" json:"status,omitempty"`
}

func (m *LendingPool) Reset()         { *m = LendingPool{} }
func (m *LendingPool) String() string { return proto.CompactTextString(m) }
func (*LendingPool) ProtoMessage()    {}
func (*LendingPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4e0b35327359cc, []int{0}
}
func (m *LendingPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendingPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendingPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendingPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendingPool.Merge(m, src)
}
func (m *LendingPool) XXX_Size() int {
	return m.Size()
}
func (m *LendingPool) XXX_DiscardUnknown() {
	xxx_messageInfo_LendingPool.DiscardUnknown(m)
}

var xxx_messageInfo_LendingPool proto.InternalMessageInfo

func (m *LendingPool) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LendingPool) GetSupply() *types.Coin {
	if m != nil {
		return m.Supply
	}
	return nil
}

func (m *LendingPool) GetStatus() PoolStatus {
	if m != nil {
		return m.Status
	}
	return PoolStatus_ACTIVE
}

type Loan struct {
	VaultAddress      string                `protobuf:"bytes,1,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	Borrower          string                `protobuf:"bytes,2,opt,name=borrower,proto3" json:"borrower,omitempty"`
	Agency            string                `protobuf:"bytes,3,opt,name=agency,proto3" json:"agency,omitempty"`
	HashLoanSecret    string                `protobuf:"bytes,4,opt,name=hash_loan_secret,json=hashLoanSecret,proto3" json:"hash_loan_secret,omitempty"`
	MaturityTime      int64                 `protobuf:"varint,5,opt,name=maturity_time,json=maturityTime,proto3" json:"maturity_time,omitempty"`
	FinalTimeout      int64                 `protobuf:"varint,6,opt,name=final_timeout,json=finalTimeout,proto3" json:"final_timeout,omitempty"`
	BorrowAmount      *types.Coin           `protobuf:"bytes,7,opt,name=borrow_amount,json=borrowAmount,proto3" json:"borrow_amount,omitempty"`
	Fees              *types.Coin           `protobuf:"bytes,8,opt,name=fees,proto3" json:"fees,omitempty"`
	Term              cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=term,proto3,customtype=cosmossdk.io/math.Int" json:"term"`
	InterestRate      cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=interest_rate,json=interestRate,proto3,customtype=cosmossdk.io/math.Int" json:"interest_rate"`
	EventId           string                `protobuf:"bytes,11,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	AttestationId     string                `protobuf:"bytes,12,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	DepositTx         string                `protobuf:"bytes,13,opt,name=deposit_tx,json=depositTx,proto3" json:"deposit_tx,omitempty"`
	CollateralAmount  cosmossdk_io_math.Int `protobuf:"bytes,14,opt,name=collateral_amount,json=collateralAmount,proto3,customtype=cosmossdk.io/math.Int" json:"collateral_amount"`
	Cets              string                `protobuf:"bytes,15,opt,name=cets,proto3" json:"cets,omitempty"`
	LoanSecret        string                `protobuf:"bytes,16,opt,name=loan_secret,json=loanSecret,proto3" json:"loan_secret,omitempty"`
	RepayAdaptorPoint string                `protobuf:"bytes,17,opt,name=repay_adaptor_point,json=repayAdaptorPoint,proto3" json:"repay_adaptor_point,omitempty"`
	CreateAt          time.Time             `protobuf:"bytes,18,opt,name=create_at,json=createAt,proto3,stdtime" json:"create_at"`
	Status            LoanStatus            `protobuf:"varint,19,opt,name=status,proto3,enum=side.lending.LoanStatus" json:"status,omitempty"`
	PoolId            string                `protobuf:"bytes,20,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *Loan) Reset()         { *m = Loan{} }
func (m *Loan) String() string { return proto.CompactTextString(m) }
func (*Loan) ProtoMessage()    {}
func (*Loan) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4e0b35327359cc, []int{1}
}
func (m *Loan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loan.Merge(m, src)
}
func (m *Loan) XXX_Size() int {
	return m.Size()
}
func (m *Loan) XXX_DiscardUnknown() {
	xxx_messageInfo_Loan.DiscardUnknown(m)
}

var xxx_messageInfo_Loan proto.InternalMessageInfo

func (m *Loan) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *Loan) GetBorrower() string {
	if m != nil {
		return m.Borrower
	}
	return ""
}

func (m *Loan) GetAgency() string {
	if m != nil {
		return m.Agency
	}
	return ""
}

func (m *Loan) GetHashLoanSecret() string {
	if m != nil {
		return m.HashLoanSecret
	}
	return ""
}

func (m *Loan) GetMaturityTime() int64 {
	if m != nil {
		return m.MaturityTime
	}
	return 0
}

func (m *Loan) GetFinalTimeout() int64 {
	if m != nil {
		return m.FinalTimeout
	}
	return 0
}

func (m *Loan) GetBorrowAmount() *types.Coin {
	if m != nil {
		return m.BorrowAmount
	}
	return nil
}

func (m *Loan) GetFees() *types.Coin {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *Loan) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *Loan) GetAttestationId() string {
	if m != nil {
		return m.AttestationId
	}
	return ""
}

func (m *Loan) GetDepositTx() string {
	if m != nil {
		return m.DepositTx
	}
	return ""
}

func (m *Loan) GetCets() string {
	if m != nil {
		return m.Cets
	}
	return ""
}

func (m *Loan) GetLoanSecret() string {
	if m != nil {
		return m.LoanSecret
	}
	return ""
}

func (m *Loan) GetRepayAdaptorPoint() string {
	if m != nil {
		return m.RepayAdaptorPoint
	}
	return ""
}

func (m *Loan) GetCreateAt() time.Time {
	if m != nil {
		return m.CreateAt
	}
	return time.Time{}
}

func (m *Loan) GetStatus() LoanStatus {
	if m != nil {
		return m.Status
	}
	return LoanStatus_Apply
}

func (m *Loan) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func init() {
	proto.RegisterEnum("side.lending.PoolStatus", PoolStatus_name, PoolStatus_value)
	proto.RegisterEnum("side.lending.LoanStatus", LoanStatus_name, LoanStatus_value)
	proto.RegisterType((*LendingPool)(nil), "side.lending.LendingPool")
	proto.RegisterType((*Loan)(nil), "side.lending.Loan")
}

func init() { proto.RegisterFile("side/lending/lending.proto", fileDescriptor_eb4e0b35327359cc) }

var fileDescriptor_eb4e0b35327359cc = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0x15, 0x65, 0x59, 0x96, 0x46, 0x1f, 0xa1, 0x37, 0x69, 0xcb, 0x08, 0x88, 0x64, 0xa4, 0x68,
	0x61, 0x04, 0x2d, 0x59, 0xa7, 0xf7, 0xa2, 0xb2, 0xd3, 0x00, 0x2a, 0x8c, 0x22, 0xa0, 0x85, 0x1e,
	0x7a, 0x21, 0x56, 0xe4, 0x58, 0x5a, 0x94, 0xe4, 0xb2, 0xbb, 0x43, 0xd7, 0xfa, 0x0f, 0x3d, 0xe4,
	0x67, 0xe5, 0x98, 0x63, 0xdb, 0x43, 0x5a, 0xd8, 0x7f, 0xa4, 0xd8, 0x25, 0x19, 0xbb, 0x40, 0x80,
	0xe8, 0x44, 0xce, 0x9b, 0xf7, 0x66, 0x77, 0xde, 0xee, 0x2c, 0x4c, 0xb4, 0x48, 0x30, 0x48, 0x31,
	0x4f, 0x44, 0xbe, 0x6e, 0xbe, 0x7e, 0xa1, 0x24, 0x49, 0x36, 0x34, 0x39, 0xbf, 0xc6, 0x26, 0x8f,
	0xd6, 0x72, 0x2d, 0x6d, 0x22, 0x30, 0x7f, 0x15, 0x67, 0x32, 0x5b, 0x4b, 0xb9, 0x4e, 0x31, 0xb0,
	0xd1, 0xaa, 0xbc, 0x0c, 0x48, 0x64, 0xa8, 0x89, 0x67, 0x45, 0x4d, 0x98, 0xc6, 0x52, 0x67, 0x52,
	0x07, 0x2b, 0xae, 0x31, 0xb8, 0x3a, 0x59, 0x21, 0xf1, 0x93, 0x20, 0x96, 0x22, 0xaf, 0xf2, 0x4f,
	0xff, 0x68, 0xc3, 0xe0, 0xbc, 0x5a, 0xe2, 0x95, 0x94, 0x29, 0x1b, 0x43, 0x5b, 0x24, 0x9e, 0x73,
	0xe4, 0x1c, 0xf7, 0xc3, 0xb6, 0x48, 0xd8, 0x09, 0x74, 0x75, 0x59, 0x14, 0xe9, 0xd6, 0x6b, 0x1f,
	0x39, 0xc7, 0x83, 0xe7, 0x8f, 0xfd, 0xaa, 0xa0, 0x6f, 0x0a, 0xfa, 0x75, 0x41, 0xff, 0x4c, 0x8a,
	0x3c, 0xac, 0x89, 0xec, 0x7b, 0x18, 0x92, 0x24, 0x9e, 0x46, 0x7a, 0xc3, 0x15, 0x6a, 0x6f, 0xcf,
	0x14, 0x3b, 0x7d, 0xf2, 0xe6, 0xdd, 0xac, 0xf5, 0xf7, 0xbb, 0xd9, 0x27, 0x95, 0x5e, 0x27, 0xbf,
	0xfa, 0x42, 0x06, 0x19, 0xa7, 0x8d, 0xbf, 0xc8, 0x29, 0x1c, 0x58, 0xc9, 0x85, 0x55, 0xb0, 0x97,
	0xf0, 0x60, 0x25, 0x95, 0x92, 0xbf, 0x63, 0x12, 0xf1, 0x4c, 0x96, 0x39, 0x79, 0x9d, 0x5d, 0x8a,
	0x8c, 0x1b, 0xd5, 0xdc, 0x8a, 0xd8, 0x37, 0xd0, 0xd5, 0xc4, 0xa9, 0xd4, 0xde, 0xfe, 0x91, 0x73,
	0x3c, 0x7e, 0xee, 0xf9, 0xf7, 0x2d, 0xf5, 0x4d, 0xc3, 0x17, 0x36, 0x1f, 0xd6, 0xbc, 0xa7, 0x7f,
	0x75, 0xa1, 0x73, 0x2e, 0x79, 0xce, 0x3e, 0x87, 0xd1, 0x15, 0x2f, 0x53, 0x8a, 0x78, 0x92, 0x28,
	0xd4, 0xba, 0xb6, 0x64, 0x68, 0xc1, 0x79, 0x85, 0xb1, 0x09, 0xf4, 0xea, 0x15, 0x95, 0xb5, 0xa7,
	0x1f, 0xbe, 0x8f, 0xd9, 0xa7, 0xd0, 0xe5, 0x6b, 0xcc, 0xe3, 0x6d, 0xd5, 0x7f, 0x58, 0x47, 0xec,
	0x18, 0xdc, 0x0d, 0xd7, 0x9b, 0x28, 0x95, 0x3c, 0x8f, 0x34, 0xc6, 0x0a, 0xeb, 0xe6, 0xc2, 0xb1,
	0xc1, 0xcd, 0xe2, 0x17, 0x16, 0x35, 0x5b, 0xc8, 0x38, 0x95, 0x4a, 0xd0, 0x36, 0x32, 0xc7, 0x6a,
	0x9b, 0xd8, 0x0b, 0x87, 0x0d, 0xb8, 0x14, 0x19, 0x1a, 0xd2, 0xa5, 0xc8, 0x79, 0x6a, 0x19, 0xb2,
	0x24, 0xaf, 0x5b, 0x91, 0x2c, 0xb8, 0xac, 0x30, 0xf6, 0x1d, 0x8c, 0xaa, 0x7d, 0x35, 0x6e, 0x1e,
	0x7c, 0xec, 0x2c, 0x87, 0x15, 0xbf, 0xf6, 0xf1, 0x6b, 0xe8, 0x5c, 0x22, 0x6a, 0xaf, 0xf7, 0x31,
	0x99, 0xa5, 0xb1, 0x13, 0xe8, 0x10, 0xaa, 0xcc, 0xeb, 0xef, 0x72, 0x66, 0x96, 0xca, 0x4e, 0x61,
	0x24, 0x72, 0x42, 0x85, 0x9a, 0x22, 0xc5, 0x09, 0x3d, 0xd8, 0x45, 0x3b, 0x6c, 0x34, 0x21, 0x27,
	0x64, 0x8f, 0xa1, 0x87, 0x57, 0x98, 0x53, 0x24, 0x12, 0x6f, 0x60, 0x1d, 0x3d, 0xb0, 0xf1, 0x22,
	0x61, 0x5f, 0xc0, 0x98, 0x13, 0x99, 0xc1, 0x20, 0x21, 0x73, 0x43, 0x18, 0x5a, 0xc2, 0xe8, 0x1e,
	0xba, 0x48, 0xd8, 0x13, 0x80, 0x04, 0x0b, 0xa9, 0x05, 0x45, 0x74, 0xed, 0x8d, 0x2c, 0xa5, 0x5f,
	0x23, 0xcb, 0x6b, 0xf6, 0x23, 0x1c, 0xc6, 0x32, 0x4d, 0x39, 0xa1, 0xe2, 0x69, 0x63, 0xe5, 0x78,
	0x97, 0x8d, 0xba, 0x77, 0xba, 0xda, 0x52, 0x06, 0x9d, 0x18, 0x49, 0x7b, 0x0f, 0xec, 0x22, 0xf6,
	0x9f, 0xcd, 0x60, 0x70, 0xff, 0x56, 0xb8, 0x36, 0x05, 0xe9, 0xdd, 0x8d, 0xf0, 0xe1, 0xa1, 0xc2,
	0x82, 0x6f, 0x23, 0x9e, 0xf0, 0x82, 0xa4, 0x8a, 0x0a, 0x29, 0x72, 0xf2, 0x0e, 0x2d, 0xf1, 0xd0,
	0xa6, 0xe6, 0x55, 0xe6, 0x95, 0x49, 0xb0, 0x39, 0xf4, 0x63, 0x85, 0x9c, 0x30, 0xe2, 0xe4, 0x31,
	0x7b, 0x78, 0x13, 0xbf, 0x7a, 0x31, 0xfc, 0xe6, 0xc5, 0xf0, 0x97, 0xcd, 0x8b, 0x71, 0xda, 0x33,
	0x4d, 0xbc, 0xfe, 0x67, 0xe6, 0x84, 0xbd, 0x4a, 0x36, 0xbf, 0x3f, 0x42, 0x0f, 0x3f, 0x34, 0x42,
	0xf6, 0xba, 0xfe, 0x6f, 0x84, 0xd8, 0x67, 0x70, 0x50, 0x48, 0x99, 0x1a, 0x93, 0x1f, 0x55, 0x37,
	0xdf, 0x84, 0x8b, 0xe4, 0xd9, 0x97, 0x00, 0x77, 0x13, 0xc7, 0x00, 0xba, 0xf3, 0xb3, 0xe5, 0xe2,
	0xe7, 0x1f, 0xdc, 0x16, 0x1b, 0x42, 0x6f, 0xf1, 0x53, 0x1d, 0x39, 0xcf, 0x12, 0x80, 0xbb, 0xb2,
	0xac, 0x0f, 0xfb, 0x73, 0xf3, 0xac, 0xb8, 0x2d, 0x36, 0x80, 0x83, 0x79, 0x51, 0x28, 0x79, 0x85,
	0xae, 0x63, 0x34, 0x2f, 0x84, 0x5e, 0x95, 0x4a, 0xa3, 0xdb, 0x36, 0xac, 0xd0, 0xb4, 0xef, 0xee,
	0x19, 0xd6, 0x0b, 0xbc, 0x34, 0x63, 0xea, 0x76, 0xd8, 0x08, 0xfa, 0xe7, 0xe2, 0xb7, 0x52, 0x24,
	0x9c, 0xd0, 0xdd, 0x37, 0xb4, 0xb3, 0x54, 0x6a, 0x74, 0xbb, 0xa7, 0x2f, 0xdf, 0xdc, 0x4c, 0x9d,
	0xb7, 0x37, 0x53, 0xe7, 0xdf, 0x9b, 0xa9, 0xf3, 0xfa, 0x76, 0xda, 0x7a, 0x7b, 0x3b, 0x6d, 0xfd,
	0x79, 0x3b, 0x6d, 0xfd, 0xf2, 0xd5, 0x5a, 0xd0, 0xa6, 0x5c, 0xf9, 0xb1, 0xcc, 0x02, 0xd3, 0xac,
	0x75, 0x2a, 0x96, 0xa9, 0x0d, 0x82, 0xeb, 0xf7, 0xaf, 0x35, 0x6d, 0x0b, 0xd4, 0xab, 0xae, 0x4d,
	0x7f, 0xfb, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0xfa, 0xe0, 0xf8, 0xca, 0x05, 0x00, 0x00,
}

func (m *LendingPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendingPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendingPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLending(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.BorrowedAmount.Size()
		i -= size
		if _, err := m.BorrowedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalShares.Size()
		i -= size
		if _, err := m.TotalShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Supply != nil {
		{
			size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLending(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLending(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Loan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintLending(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Status != 0 {
		i = encodeVarintLending(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreateAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreateAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLending(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if len(m.RepayAdaptorPoint) > 0 {
		i -= len(m.RepayAdaptorPoint)
		copy(dAtA[i:], m.RepayAdaptorPoint)
		i = encodeVarintLending(dAtA, i, uint64(len(m.RepayAdaptorPoint)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.LoanSecret) > 0 {
		i -= len(m.LoanSecret)
		copy(dAtA[i:], m.LoanSecret)
		i = encodeVarintLending(dAtA, i, uint64(len(m.LoanSecret)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Cets) > 0 {
		i -= len(m.Cets)
		copy(dAtA[i:], m.Cets)
		i = encodeVarintLending(dAtA, i, uint64(len(m.Cets)))
		i--
		dAtA[i] = 0x7a
	}
	{
		size := m.CollateralAmount.Size()
		i -= size
		if _, err := m.CollateralAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.DepositTx) > 0 {
		i -= len(m.DepositTx)
		copy(dAtA[i:], m.DepositTx)
		i = encodeVarintLending(dAtA, i, uint64(len(m.DepositTx)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintLending(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.EventId) > 0 {
		i -= len(m.EventId)
		copy(dAtA[i:], m.EventId)
		i = encodeVarintLending(dAtA, i, uint64(len(m.EventId)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size := m.InterestRate.Size()
		i -= size
		if _, err := m.InterestRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.Term.Size()
		i -= size
		if _, err := m.Term.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Fees != nil {
		{
			size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLending(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.BorrowAmount != nil {
		{
			size, err := m.BorrowAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLending(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.FinalTimeout != 0 {
		i = encodeVarintLending(dAtA, i, uint64(m.FinalTimeout))
		i--
		dAtA[i] = 0x30
	}
	if m.MaturityTime != 0 {
		i = encodeVarintLending(dAtA, i, uint64(m.MaturityTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.HashLoanSecret) > 0 {
		i -= len(m.HashLoanSecret)
		copy(dAtA[i:], m.HashLoanSecret)
		i = encodeVarintLending(dAtA, i, uint64(len(m.HashLoanSecret)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Agency) > 0 {
		i -= len(m.Agency)
		copy(dAtA[i:], m.Agency)
		i = encodeVarintLending(dAtA, i, uint64(len(m.Agency)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Borrower) > 0 {
		i -= len(m.Borrower)
		copy(dAtA[i:], m.Borrower)
		i = encodeVarintLending(dAtA, i, uint64(len(m.Borrower)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintLending(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLending(dAtA []byte, offset int, v uint64) int {
	offset -= sovLending(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LendingPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	if m.Supply != nil {
		l = m.Supply.Size()
		n += 1 + l + sovLending(uint64(l))
	}
	l = m.TotalShares.Size()
	n += 1 + l + sovLending(uint64(l))
	l = m.BorrowedAmount.Size()
	n += 1 + l + sovLending(uint64(l))
	if m.Status != 0 {
		n += 1 + sovLending(uint64(m.Status))
	}
	return n
}

func (m *Loan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	l = len(m.Borrower)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	l = len(m.Agency)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	l = len(m.HashLoanSecret)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	if m.MaturityTime != 0 {
		n += 1 + sovLending(uint64(m.MaturityTime))
	}
	if m.FinalTimeout != 0 {
		n += 1 + sovLending(uint64(m.FinalTimeout))
	}
	if m.BorrowAmount != nil {
		l = m.BorrowAmount.Size()
		n += 1 + l + sovLending(uint64(l))
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovLending(uint64(l))
	}
	l = m.Term.Size()
	n += 1 + l + sovLending(uint64(l))
	l = m.InterestRate.Size()
	n += 1 + l + sovLending(uint64(l))
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	l = len(m.DepositTx)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	l = m.CollateralAmount.Size()
	n += 1 + l + sovLending(uint64(l))
	l = len(m.Cets)
	if l > 0 {
		n += 1 + l + sovLending(uint64(l))
	}
	l = len(m.LoanSecret)
	if l > 0 {
		n += 2 + l + sovLending(uint64(l))
	}
	l = len(m.RepayAdaptorPoint)
	if l > 0 {
		n += 2 + l + sovLending(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreateAt)
	n += 2 + l + sovLending(uint64(l))
	if m.Status != 0 {
		n += 2 + sovLending(uint64(m.Status))
	}
	l = len(m.PoolId)
	if l > 0 {
		n += 2 + l + sovLending(uint64(l))
	}
	return n
}

func sovLending(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLending(x uint64) (n int) {
	return sovLending(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LendingPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLending
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LendingPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LendingPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Supply == nil {
				m.Supply = &types.Coin{}
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PoolStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLending(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLending
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Loan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLending
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrower = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashLoanSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashLoanSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityTime", wireType)
			}
			m.MaturityTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaturityTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalTimeout", wireType)
			}
			m.FinalTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BorrowAmount == nil {
				m.BorrowAmount = &types.Coin{}
			}
			if err := m.BorrowAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &types.Coin{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Term.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cets = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepayAdaptorPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepayAdaptorPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreateAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LoanStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLending(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLending
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLending(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLending
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLending
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLending
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLending
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLending
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLending
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLending        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLending          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLending = fmt.Errorf("proto: unexpected end of group")
)
