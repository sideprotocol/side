// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/lending/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryLiquidationEventRequest struct {
	BorrowAmount      *types.Coin `protobuf:"bytes,1,opt,name=borrow_amount,json=borrowAmount,proto3" json:"borrow_amount,omitempty"`
	CollateralAcmount *types.Coin `protobuf:"bytes,2,opt,name=collateral_acmount,json=collateralAcmount,proto3" json:"collateral_acmount,omitempty"`
}

func (m *QueryLiquidationEventRequest) Reset()         { *m = QueryLiquidationEventRequest{} }
func (m *QueryLiquidationEventRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationEventRequest) ProtoMessage()    {}
func (*QueryLiquidationEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27db04072aa81358, []int{0}
}
func (m *QueryLiquidationEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationEventRequest.Merge(m, src)
}
func (m *QueryLiquidationEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationEventRequest proto.InternalMessageInfo

func (m *QueryLiquidationEventRequest) GetBorrowAmount() *types.Coin {
	if m != nil {
		return m.BorrowAmount
	}
	return nil
}

func (m *QueryLiquidationEventRequest) GetCollateralAcmount() *types.Coin {
	if m != nil {
		return m.CollateralAcmount
	}
	return nil
}

type QueryLiquidationEventResponse struct {
	EventId      uint64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	OraclePubkey string `protobuf:"bytes,2,opt,name=oracle_pubkey,json=oraclePubkey,proto3" json:"oracle_pubkey,omitempty"`
	Nonce        string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Price        string `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *QueryLiquidationEventResponse) Reset()         { *m = QueryLiquidationEventResponse{} }
func (m *QueryLiquidationEventResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationEventResponse) ProtoMessage()    {}
func (*QueryLiquidationEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27db04072aa81358, []int{1}
}
func (m *QueryLiquidationEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationEventResponse.Merge(m, src)
}
func (m *QueryLiquidationEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationEventResponse proto.InternalMessageInfo

func (m *QueryLiquidationEventResponse) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *QueryLiquidationEventResponse) GetOraclePubkey() string {
	if m != nil {
		return m.OraclePubkey
	}
	return ""
}

func (m *QueryLiquidationEventResponse) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *QueryLiquidationEventResponse) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

type QueryCollateralAddressRequest struct {
	BorrowerPubkey   string `protobuf:"bytes,1,opt,name=borrower_pubkey,json=borrowerPubkey,proto3" json:"borrower_pubkey,omitempty"`
	AgencyPubkey     string `protobuf:"bytes,2,opt,name=agency_pubkey,json=agencyPubkey,proto3" json:"agency_pubkey,omitempty"`
	HashOfLoanSecret string `protobuf:"bytes,3,opt,name=hash_of_loan_secret,json=hashOfLoanSecret,proto3" json:"hash_of_loan_secret,omitempty"`
	MaturityTime     uint64 `protobuf:"varint,4,opt,name=maturity_time,json=maturityTime,proto3" json:"maturity_time,omitempty"`
	FinalTimeout     uint64 `protobuf:"varint,5,opt,name=final_timeout,json=finalTimeout,proto3" json:"final_timeout,omitempty"`
}

func (m *QueryCollateralAddressRequest) Reset()         { *m = QueryCollateralAddressRequest{} }
func (m *QueryCollateralAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollateralAddressRequest) ProtoMessage()    {}
func (*QueryCollateralAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27db04072aa81358, []int{2}
}
func (m *QueryCollateralAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollateralAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollateralAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollateralAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollateralAddressRequest.Merge(m, src)
}
func (m *QueryCollateralAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollateralAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollateralAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollateralAddressRequest proto.InternalMessageInfo

func (m *QueryCollateralAddressRequest) GetBorrowerPubkey() string {
	if m != nil {
		return m.BorrowerPubkey
	}
	return ""
}

func (m *QueryCollateralAddressRequest) GetAgencyPubkey() string {
	if m != nil {
		return m.AgencyPubkey
	}
	return ""
}

func (m *QueryCollateralAddressRequest) GetHashOfLoanSecret() string {
	if m != nil {
		return m.HashOfLoanSecret
	}
	return ""
}

func (m *QueryCollateralAddressRequest) GetMaturityTime() uint64 {
	if m != nil {
		return m.MaturityTime
	}
	return 0
}

func (m *QueryCollateralAddressRequest) GetFinalTimeout() uint64 {
	if m != nil {
		return m.FinalTimeout
	}
	return 0
}

type QueryCollateralAddressResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryCollateralAddressResponse) Reset()         { *m = QueryCollateralAddressResponse{} }
func (m *QueryCollateralAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollateralAddressResponse) ProtoMessage()    {}
func (*QueryCollateralAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27db04072aa81358, []int{3}
}
func (m *QueryCollateralAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollateralAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollateralAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollateralAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollateralAddressResponse.Merge(m, src)
}
func (m *QueryCollateralAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollateralAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollateralAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollateralAddressResponse proto.InternalMessageInfo

func (m *QueryCollateralAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27db04072aa81358, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27db04072aa81358, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryLoanCetsRequest is request type for the Query/LoanCets RPC method.
type QueryLoanCetsRequest struct {
	LoanId string `protobuf:"bytes,1,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
}

func (m *QueryLoanCetsRequest) Reset()         { *m = QueryLoanCetsRequest{} }
func (m *QueryLoanCetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLoanCetsRequest) ProtoMessage()    {}
func (*QueryLoanCetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27db04072aa81358, []int{6}
}
func (m *QueryLoanCetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanCetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanCetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanCetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanCetsRequest.Merge(m, src)
}
func (m *QueryLoanCetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanCetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanCetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanCetsRequest proto.InternalMessageInfo

func (m *QueryLoanCetsRequest) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

// QueryLoanCetsResponse is response type for the Query/LoanCets RPC method.
type QueryLoanCetsResponse struct {
	CETs *Cets `protobuf:"bytes,1,opt,name=cets,proto3" json:"cets,omitempty"`
}

func (m *QueryLoanCetsResponse) Reset()         { *m = QueryLoanCetsResponse{} }
func (m *QueryLoanCetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLoanCetsResponse) ProtoMessage()    {}
func (*QueryLoanCetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27db04072aa81358, []int{7}
}
func (m *QueryLoanCetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLoanCetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLoanCetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLoanCetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLoanCetsResponse.Merge(m, src)
}
func (m *QueryLoanCetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLoanCetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLoanCetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLoanCetsResponse proto.InternalMessageInfo

func (m *QueryLoanCetsResponse) GetCETs() *Cets {
	if m != nil {
		return m.CETs
	}
	return nil
}

type QueryRepaymentTxRequest struct {
	LoanId string `protobuf:"bytes,1,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
}

func (m *QueryRepaymentTxRequest) Reset()         { *m = QueryRepaymentTxRequest{} }
func (m *QueryRepaymentTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRepaymentTxRequest) ProtoMessage()    {}
func (*QueryRepaymentTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27db04072aa81358, []int{8}
}
func (m *QueryRepaymentTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepaymentTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepaymentTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepaymentTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepaymentTxRequest.Merge(m, src)
}
func (m *QueryRepaymentTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepaymentTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepaymentTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepaymentTxRequest proto.InternalMessageInfo

func (m *QueryRepaymentTxRequest) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

type QueryRepaymentTxResponse struct {
	ClaimTx string `protobuf:"bytes,1,opt,name=claim_tx,json=claimTx,proto3" json:"claim_tx,omitempty"`
}

func (m *QueryRepaymentTxResponse) Reset()         { *m = QueryRepaymentTxResponse{} }
func (m *QueryRepaymentTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRepaymentTxResponse) ProtoMessage()    {}
func (*QueryRepaymentTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27db04072aa81358, []int{9}
}
func (m *QueryRepaymentTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepaymentTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepaymentTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepaymentTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepaymentTxResponse.Merge(m, src)
}
func (m *QueryRepaymentTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepaymentTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepaymentTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepaymentTxResponse proto.InternalMessageInfo

func (m *QueryRepaymentTxResponse) GetClaimTx() string {
	if m != nil {
		return m.ClaimTx
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryLiquidationEventRequest)(nil), "side.lending.QueryLiquidationEventRequest")
	proto.RegisterType((*QueryLiquidationEventResponse)(nil), "side.lending.QueryLiquidationEventResponse")
	proto.RegisterType((*QueryCollateralAddressRequest)(nil), "side.lending.QueryCollateralAddressRequest")
	proto.RegisterType((*QueryCollateralAddressResponse)(nil), "side.lending.QueryCollateralAddressResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "side.lending.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "side.lending.QueryParamsResponse")
	proto.RegisterType((*QueryLoanCetsRequest)(nil), "side.lending.QueryLoanCetsRequest")
	proto.RegisterType((*QueryLoanCetsResponse)(nil), "side.lending.QueryLoanCetsResponse")
	proto.RegisterType((*QueryRepaymentTxRequest)(nil), "side.lending.QueryRepaymentTxRequest")
	proto.RegisterType((*QueryRepaymentTxResponse)(nil), "side.lending.QueryRepaymentTxResponse")
}

func init() { proto.RegisterFile("side/lending/query.proto", fileDescriptor_27db04072aa81358) }

var fileDescriptor_27db04072aa81358 = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcf, 0x6f, 0xe3, 0x44,
	0x18, 0x8d, 0x97, 0x24, 0xed, 0x0e, 0x29, 0x6c, 0x67, 0x03, 0x4d, 0xac, 0xe2, 0x74, 0x5d, 0xc1,
	0x56, 0xdd, 0xc5, 0xde, 0x0d, 0xe2, 0xc2, 0x01, 0x69, 0x1b, 0x15, 0x11, 0x69, 0x25, 0x8a, 0x09,
	0x17, 0x2e, 0xd6, 0xc4, 0x9e, 0xba, 0xa3, 0xb5, 0x67, 0x5c, 0xcf, 0x78, 0x49, 0xae, 0x5c, 0xb9,
	0x20, 0xc1, 0x81, 0x3f, 0x81, 0x3b, 0xff, 0xc4, 0x1e, 0x57, 0xe2, 0xc2, 0xa9, 0x42, 0x29, 0xe2,
	0xef, 0x40, 0x9e, 0x19, 0x37, 0x75, 0x7e, 0xb4, 0x3d, 0x25, 0xf3, 0xbe, 0xf7, 0x7d, 0xef, 0xf9,
	0xcb, 0xf3, 0x04, 0x74, 0x38, 0x09, 0xb1, 0x1b, 0x63, 0x1a, 0x12, 0x1a, 0xb9, 0xe7, 0x39, 0xce,
	0xa6, 0x4e, 0x9a, 0x31, 0xc1, 0x60, 0xab, 0xa8, 0x38, 0xba, 0x62, 0xb6, 0x23, 0x16, 0x31, 0x59,
	0x70, 0x8b, 0x6f, 0x8a, 0x63, 0xee, 0x46, 0x8c, 0x45, 0x31, 0x76, 0x51, 0x4a, 0x5c, 0x44, 0x29,
	0x13, 0x48, 0x10, 0x46, 0xb9, 0xae, 0x1e, 0x06, 0x8c, 0x27, 0x8c, 0xbb, 0x63, 0xc4, 0xb1, 0x1a,
	0xed, 0xbe, 0x7e, 0x3e, 0xc6, 0x02, 0x3d, 0x77, 0x53, 0x14, 0x11, 0x2a, 0xc9, 0x9a, 0x6b, 0x5d,
	0xe7, 0x96, 0xac, 0x80, 0x91, 0xb2, 0xde, 0xad, 0xf8, 0x4c, 0x51, 0x86, 0x92, 0x52, 0xc6, 0xac,
	0x94, 0xf4, 0xa7, 0xaa, 0xd9, 0x7f, 0x18, 0x60, 0xf7, 0xdb, 0x42, 0xf9, 0x25, 0x39, 0xcf, 0x49,
	0x28, 0x15, 0x8f, 0x5f, 0x63, 0x2a, 0x3c, 0x7c, 0x9e, 0x63, 0x2e, 0xe0, 0x97, 0x60, 0x6b, 0xcc,
	0xb2, 0x8c, 0xfd, 0xe8, 0xa3, 0x84, 0xe5, 0x54, 0x74, 0x8c, 0x3d, 0xe3, 0xe0, 0xdd, 0x7e, 0xd7,
	0x51, 0x7e, 0x9c, 0xc2, 0x8f, 0xa3, 0xfd, 0x38, 0x03, 0x46, 0xa8, 0xd7, 0x52, 0xfc, 0x17, 0x92,
	0x0e, 0xbf, 0x06, 0x30, 0x60, 0x71, 0x8c, 0x04, 0xce, 0x50, 0xec, 0xa3, 0x40, 0x0d, 0xb9, 0x77,
	0xdb, 0x90, 0xed, 0x79, 0xd3, 0x0b, 0xd5, 0x63, 0xff, 0x6c, 0x80, 0x8f, 0xd6, 0x58, 0xe5, 0x29,
	0xa3, 0x1c, 0xc3, 0x2e, 0xd8, 0xc4, 0x05, 0xe0, 0x93, 0x50, 0xda, 0xac, 0x7b, 0x1b, 0xf2, 0x3c,
	0x0c, 0xe1, 0x3e, 0xd8, 0x62, 0x19, 0x0a, 0x62, 0xec, 0xa7, 0xf9, 0xf8, 0x15, 0x9e, 0x4a, 0x07,
	0xf7, 0xbd, 0x96, 0x02, 0x4f, 0x24, 0x06, 0xdb, 0xa0, 0x41, 0x19, 0x0d, 0x70, 0xe7, 0x1d, 0x59,
	0x54, 0x87, 0x02, 0x4d, 0x33, 0x12, 0xe0, 0x4e, 0x5d, 0xa1, 0xf2, 0x60, 0xff, 0x57, 0xba, 0x19,
	0xcc, 0x8d, 0x86, 0x61, 0x86, 0x39, 0x2f, 0x37, 0xf7, 0x18, 0xbc, 0xaf, 0x36, 0x81, 0xb3, 0x52,
	0xd4, 0x90, 0x13, 0xde, 0x2b, 0x61, 0x2d, 0xbb, 0x0f, 0xb6, 0x50, 0x84, 0x69, 0x30, 0x5d, 0xf0,
	0xa6, 0x40, 0x4d, 0xfa, 0x14, 0x3c, 0x3c, 0x43, 0xfc, 0xcc, 0x67, 0xa7, 0x7e, 0xcc, 0x10, 0xf5,
	0x39, 0x0e, 0x32, 0x2c, 0xb4, 0xd3, 0x07, 0x45, 0xe9, 0x9b, 0xd3, 0x97, 0x0c, 0xd1, 0xef, 0x24,
	0x5e, 0xcc, 0x4c, 0x90, 0xc8, 0x33, 0x22, 0xa6, 0xbe, 0x20, 0x89, 0x32, 0x5f, 0xf7, 0x5a, 0x25,
	0x38, 0x22, 0x09, 0x2e, 0x48, 0xa7, 0x84, 0xa2, 0x58, 0x32, 0x58, 0x2e, 0x3a, 0x0d, 0x45, 0x92,
	0xe0, 0x48, 0x61, 0xf6, 0x17, 0xc0, 0x5a, 0xf7, 0x9c, 0x7a, 0xed, 0x1d, 0xb0, 0x81, 0x14, 0xa4,
	0x1f, 0xb0, 0x3c, 0xda, 0x6d, 0x00, 0x65, 0xef, 0x89, 0x8c, 0xa3, 0x5e, 0x8c, 0x3d, 0x04, 0x0f,
	0x2b, 0xa8, 0x1e, 0xd3, 0x07, 0x4d, 0x15, 0x5b, 0x1d, 0xb1, 0xb6, 0x73, 0xfd, 0x05, 0x73, 0x14,
	0xfb, 0xa8, 0xfe, 0xe6, 0xa2, 0x57, 0xf3, 0x34, 0xd3, 0x76, 0x41, 0x5b, 0x45, 0x82, 0x21, 0x3a,
	0xc0, 0xe2, 0x6a, 0xf7, 0x3b, 0x60, 0x43, 0x6e, 0x49, 0x07, 0xe1, 0xbe, 0xd7, 0x2c, 0x8e, 0xc3,
	0xd0, 0x1e, 0x82, 0x0f, 0x16, 0x1a, 0xb4, 0xfa, 0x33, 0x50, 0x0f, 0xb0, 0x28, 0xb5, 0x61, 0x55,
	0xbb, 0x60, 0x1e, 0x6d, 0xce, 0x2e, 0x7a, 0xf5, 0xc1, 0xf1, 0x88, 0x7b, 0x92, 0x69, 0xf7, 0xc1,
	0x8e, 0x1c, 0xe5, 0xe1, 0x14, 0x4d, 0x13, 0x4c, 0xc5, 0x68, 0x72, 0xab, 0xfc, 0xe7, 0xa0, 0xb3,
	0xdc, 0x33, 0x4f, 0x6f, 0x10, 0x23, 0x92, 0xf8, 0x62, 0x52, 0xee, 0x51, 0x9e, 0x47, 0x93, 0xfe,
	0x9f, 0x0d, 0xd0, 0x90, 0x7d, 0xf0, 0x15, 0x68, 0xaa, 0x45, 0xc0, 0xbd, 0xaa, 0xc5, 0xe5, 0x3d,
	0x9b, 0x8f, 0x6e, 0x60, 0x28, 0x4d, 0x7b, 0xf7, 0xa7, 0xbf, 0xfe, 0xfd, 0xf5, 0xde, 0x87, 0xb0,
	0xed, 0xae, 0xb8, 0x3e, 0xe0, 0xef, 0x06, 0xd8, 0x5e, 0xfa, 0xd9, 0xe1, 0x93, 0x15, 0x63, 0xd7,
	0xbd, 0x04, 0xe6, 0xd3, 0xbb, 0x91, 0xb5, 0x9d, 0x03, 0x69, 0xc7, 0x86, 0x7b, 0x55, 0x3b, 0xf3,
	0xbb, 0xc0, 0xd5, 0xc9, 0x82, 0xbf, 0x19, 0xe0, 0xc1, 0xe2, 0x3d, 0x00, 0x0f, 0x57, 0x88, 0xad,
	0xb9, 0xd7, 0xcc, 0x27, 0x77, 0xe2, 0x6a, 0x5f, 0x8f, 0xa5, 0xaf, 0x47, 0xb0, 0x57, 0xf5, 0x15,
	0xcf, 0xf9, 0xae, 0xbc, 0x15, 0xa0, 0x00, 0x9b, 0x32, 0x59, 0xc7, 0x23, 0x0e, 0xed, 0x55, 0x0a,
	0xd5, 0x9c, 0x9a, 0xfb, 0x37, 0x72, 0xb4, 0x7a, 0x4f, 0xaa, 0x77, 0xe1, 0xce, 0x82, 0x3a, 0x43,
	0xd4, 0x2d, 0x92, 0x58, 0x2c, 0x63, 0xfb, 0x7b, 0xca, 0x49, 0x44, 0x71, 0x78, 0x52, 0xe6, 0x0a,
	0x7e, 0xbc, 0x62, 0xf6, 0x72, 0x56, 0xcd, 0x4f, 0x6e, 0xa3, 0x69, 0x17, 0xcf, 0xa4, 0x8b, 0x43,
	0x78, 0xb0, 0xc2, 0x45, 0x56, 0xf2, 0xdd, 0x5c, 0xdb, 0xf0, 0xc5, 0xe4, 0xe8, 0xab, 0x37, 0x33,
	0xcb, 0x78, 0x3b, 0xb3, 0x8c, 0x7f, 0x66, 0x96, 0xf1, 0xcb, 0xa5, 0x55, 0x7b, 0x7b, 0x69, 0xd5,
	0xfe, 0xbe, 0xb4, 0x6a, 0x3f, 0x3c, 0x8d, 0x88, 0x38, 0xcb, 0xc7, 0x4e, 0xc0, 0x12, 0x39, 0x4d,
	0xfe, 0x17, 0x05, 0x2c, 0x56, 0xa3, 0x27, 0x57, 0xc3, 0xc5, 0x34, 0xc5, 0x7c, 0xdc, 0x94, 0xe5,
	0xcf, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x35, 0xf6, 0x47, 0x73, 0x8b, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	CollateralAddress(ctx context.Context, in *QueryCollateralAddressRequest, opts ...grpc.CallOption) (*QueryCollateralAddressResponse, error)
	LiquidationEvent(ctx context.Context, in *QueryLiquidationEventRequest, opts ...grpc.CallOption) (*QueryLiquidationEventResponse, error)
	LoanCETs(ctx context.Context, in *QueryLoanCetsRequest, opts ...grpc.CallOption) (*QueryLoanCetsResponse, error)
	UnsignedPaymentTx(ctx context.Context, in *QueryRepaymentTxRequest, opts ...grpc.CallOption) (*QueryRepaymentTxResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/side.lending.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollateralAddress(ctx context.Context, in *QueryCollateralAddressRequest, opts ...grpc.CallOption) (*QueryCollateralAddressResponse, error) {
	out := new(QueryCollateralAddressResponse)
	err := c.cc.Invoke(ctx, "/side.lending.Query/CollateralAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidationEvent(ctx context.Context, in *QueryLiquidationEventRequest, opts ...grpc.CallOption) (*QueryLiquidationEventResponse, error) {
	out := new(QueryLiquidationEventResponse)
	err := c.cc.Invoke(ctx, "/side.lending.Query/LiquidationEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanCETs(ctx context.Context, in *QueryLoanCetsRequest, opts ...grpc.CallOption) (*QueryLoanCetsResponse, error) {
	out := new(QueryLoanCetsResponse)
	err := c.cc.Invoke(ctx, "/side.lending.Query/LoanCETs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnsignedPaymentTx(ctx context.Context, in *QueryRepaymentTxRequest, opts ...grpc.CallOption) (*QueryRepaymentTxResponse, error) {
	out := new(QueryRepaymentTxResponse)
	err := c.cc.Invoke(ctx, "/side.lending.Query/UnsignedPaymentTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	CollateralAddress(context.Context, *QueryCollateralAddressRequest) (*QueryCollateralAddressResponse, error)
	LiquidationEvent(context.Context, *QueryLiquidationEventRequest) (*QueryLiquidationEventResponse, error)
	LoanCETs(context.Context, *QueryLoanCetsRequest) (*QueryLoanCetsResponse, error)
	UnsignedPaymentTx(context.Context, *QueryRepaymentTxRequest) (*QueryRepaymentTxResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CollateralAddress(ctx context.Context, req *QueryCollateralAddressRequest) (*QueryCollateralAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollateralAddress not implemented")
}
func (*UnimplementedQueryServer) LiquidationEvent(ctx context.Context, req *QueryLiquidationEventRequest) (*QueryLiquidationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidationEvent not implemented")
}
func (*UnimplementedQueryServer) LoanCETs(ctx context.Context, req *QueryLoanCetsRequest) (*QueryLoanCetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanCETs not implemented")
}
func (*UnimplementedQueryServer) UnsignedPaymentTx(ctx context.Context, req *QueryRepaymentTxRequest) (*QueryRepaymentTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsignedPaymentTx not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.lending.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollateralAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollateralAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollateralAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.lending.Query/CollateralAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollateralAddress(ctx, req.(*QueryCollateralAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidationEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.lending.Query/LiquidationEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidationEvent(ctx, req.(*QueryLiquidationEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanCETs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoanCetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanCETs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.lending.Query/LoanCETs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanCETs(ctx, req.(*QueryLoanCetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnsignedPaymentTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRepaymentTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnsignedPaymentTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.lending.Query/UnsignedPaymentTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnsignedPaymentTx(ctx, req.(*QueryRepaymentTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "side.lending.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CollateralAddress",
			Handler:    _Query_CollateralAddress_Handler,
		},
		{
			MethodName: "LiquidationEvent",
			Handler:    _Query_LiquidationEvent_Handler,
		},
		{
			MethodName: "LoanCETs",
			Handler:    _Query_LoanCETs_Handler,
		},
		{
			MethodName: "UnsignedPaymentTx",
			Handler:    _Query_UnsignedPaymentTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "side/lending/query.proto",
}

func (m *QueryLiquidationEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollateralAcmount != nil {
		{
			size, err := m.CollateralAcmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BorrowAmount != nil {
		{
			size, err := m.BorrowAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OraclePubkey) > 0 {
		i -= len(m.OraclePubkey)
		copy(dAtA[i:], m.OraclePubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OraclePubkey)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollateralAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollateralAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollateralAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalTimeout != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FinalTimeout))
		i--
		dAtA[i] = 0x28
	}
	if m.MaturityTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaturityTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.HashOfLoanSecret) > 0 {
		i -= len(m.HashOfLoanSecret)
		copy(dAtA[i:], m.HashOfLoanSecret)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.HashOfLoanSecret)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AgencyPubkey) > 0 {
		i -= len(m.AgencyPubkey)
		copy(dAtA[i:], m.AgencyPubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AgencyPubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BorrowerPubkey) > 0 {
		i -= len(m.BorrowerPubkey)
		copy(dAtA[i:], m.BorrowerPubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BorrowerPubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollateralAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollateralAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollateralAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLoanCetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanCetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanCetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLoanCetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLoanCetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLoanCetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CETs != nil {
		{
			size, err := m.CETs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRepaymentTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepaymentTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepaymentTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRepaymentTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepaymentTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepaymentTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimTx) > 0 {
		i -= len(m.ClaimTx)
		copy(dAtA[i:], m.ClaimTx)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimTx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLiquidationEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BorrowAmount != nil {
		l = m.BorrowAmount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CollateralAcmount != nil {
		l = m.CollateralAcmount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidationEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovQuery(uint64(m.EventId))
	}
	l = len(m.OraclePubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollateralAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BorrowerPubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AgencyPubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.HashOfLoanSecret)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MaturityTime != 0 {
		n += 1 + sovQuery(uint64(m.MaturityTime))
	}
	if m.FinalTimeout != 0 {
		n += 1 + sovQuery(uint64(m.FinalTimeout))
	}
	return n
}

func (m *QueryCollateralAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLoanCetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLoanCetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CETs != nil {
		l = m.CETs.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRepaymentTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRepaymentTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClaimTx)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLiquidationEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BorrowAmount == nil {
				m.BorrowAmount = &types.Coin{}
			}
			if err := m.BorrowAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAcmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CollateralAcmount == nil {
				m.CollateralAcmount = &types.Coin{}
			}
			if err := m.CollateralAcmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OraclePubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OraclePubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollateralAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollateralAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollateralAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowerPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowerPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgencyPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashOfLoanSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashOfLoanSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityTime", wireType)
			}
			m.MaturityTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaturityTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalTimeout", wireType)
			}
			m.FinalTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollateralAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollateralAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollateralAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanCetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanCetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanCetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLoanCetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLoanCetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLoanCetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CETs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CETs == nil {
				m.CETs = &Cets{}
			}
			if err := m.CETs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepaymentTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepaymentTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepaymentTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepaymentTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepaymentTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepaymentTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimTx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
