// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/btcbridge/bitcoin.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Bitcoin Withdrawal Status
type WithdrawStatus int32

const (
	// WITHDRAW_STATUS_UNSPECIFIED - Default value, should not be used
	WithdrawStatus_WITHDRAW_STATUS_UNSPECIFIED WithdrawStatus = 0
	// WITHDRAW_STATUS_CREATED - The withdrawal request is created
	WithdrawStatus_WITHDRAW_STATUS_CREATED WithdrawStatus = 1
	// WITHDRAW_STATUS_BROADCASTED - The withdrawal tx is broadcasted
	WithdrawStatus_WITHDRAW_STATUS_BROADCASTED WithdrawStatus = 2
	// WITHDRAW_STATUS_CONFIRMED - The withdrawal tx is confirmed
	WithdrawStatus_WITHDRAW_STATUS_CONFIRMED WithdrawStatus = 3
)

var WithdrawStatus_name = map[int32]string{
	0: "WITHDRAW_STATUS_UNSPECIFIED",
	1: "WITHDRAW_STATUS_CREATED",
	2: "WITHDRAW_STATUS_BROADCASTED",
	3: "WITHDRAW_STATUS_CONFIRMED",
}

var WithdrawStatus_value = map[string]int32{
	"WITHDRAW_STATUS_UNSPECIFIED": 0,
	"WITHDRAW_STATUS_CREATED":     1,
	"WITHDRAW_STATUS_BROADCASTED": 2,
	"WITHDRAW_STATUS_CONFIRMED":   3,
}

func (x WithdrawStatus) String() string {
	return proto.EnumName(WithdrawStatus_name, int32(x))
}

func (WithdrawStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{0}
}

type DKGRequestStatus int32

const (
	// DKG_REQUEST_STATUS_UNSPECIFIED defines the unknown DKG request status
	DKGRequestStatus_DKG_REQUEST_STATUS_UNSPECIFIED DKGRequestStatus = 0
	// DKG_REQUEST_STATUS_PENDING defines the status of the DKG request which is pending
	DKGRequestStatus_DKG_REQUEST_STATUS_PENDING DKGRequestStatus = 1
	// DKG_REQUEST_STATUS_COMPLETED defines the status of the DKG request which is completed
	DKGRequestStatus_DKG_REQUEST_STATUS_COMPLETED DKGRequestStatus = 2
	// DKG_REQUEST_STATUS_FAILED defines the status of the DKG request which failed
	DKGRequestStatus_DKG_REQUEST_STATUS_FAILED DKGRequestStatus = 3
)

var DKGRequestStatus_name = map[int32]string{
	0: "DKG_REQUEST_STATUS_UNSPECIFIED",
	1: "DKG_REQUEST_STATUS_PENDING",
	2: "DKG_REQUEST_STATUS_COMPLETED",
	3: "DKG_REQUEST_STATUS_FAILED",
}

var DKGRequestStatus_value = map[string]int32{
	"DKG_REQUEST_STATUS_UNSPECIFIED": 0,
	"DKG_REQUEST_STATUS_PENDING":     1,
	"DKG_REQUEST_STATUS_COMPLETED":   2,
	"DKG_REQUEST_STATUS_FAILED":      3,
}

func (x DKGRequestStatus) String() string {
	return proto.EnumName(DKGRequestStatus_name, int32(x))
}

func (DKGRequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{1}
}

// Bitcoin Block Header
type BlockHeader struct {
	Version           uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Hash              string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Height            uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	PreviousBlockHash string `protobuf:"bytes,4,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	MerkleRoot        string `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Nonce             uint64 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Bits              string `protobuf:"bytes,7,opt,name=bits,proto3" json:"bits,omitempty"`
	Time              uint64 `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`
	Ntx               uint64 `protobuf:"varint,9,opt,name=ntx,proto3" json:"ntx,omitempty"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{0}
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(m, src)
}
func (m *BlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeader) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeader) GetPreviousBlockHash() string {
	if m != nil {
		return m.PreviousBlockHash
	}
	return ""
}

func (m *BlockHeader) GetMerkleRoot() string {
	if m != nil {
		return m.MerkleRoot
	}
	return ""
}

func (m *BlockHeader) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetBits() string {
	if m != nil {
		return m.Bits
	}
	return ""
}

func (m *BlockHeader) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BlockHeader) GetNtx() uint64 {
	if m != nil {
		return m.Ntx
	}
	return 0
}

// Bitcoin Withdrawal Request
type BitcoinWithdrawRequest struct {
	Address  string         `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount   types.Coin     `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	Sequence uint64         `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Txid     string         `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
	Status   WithdrawStatus `protobuf:"varint,5,opt,name=status,proto3,enum=side.btcbridge.WithdrawStatus" json:"status,omitempty"`
}

func (m *BitcoinWithdrawRequest) Reset()         { *m = BitcoinWithdrawRequest{} }
func (m *BitcoinWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*BitcoinWithdrawRequest) ProtoMessage()    {}
func (*BitcoinWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{1}
}
func (m *BitcoinWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BitcoinWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BitcoinWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BitcoinWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitcoinWithdrawRequest.Merge(m, src)
}
func (m *BitcoinWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *BitcoinWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BitcoinWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BitcoinWithdrawRequest proto.InternalMessageInfo

func (m *BitcoinWithdrawRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BitcoinWithdrawRequest) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *BitcoinWithdrawRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *BitcoinWithdrawRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *BitcoinWithdrawRequest) GetStatus() WithdrawStatus {
	if m != nil {
		return m.Status
	}
	return WithdrawStatus_WITHDRAW_STATUS_UNSPECIFIED
}

// Rune ID
type RuneId struct {
	// block height
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
	// tx index
	Tx uint32 `protobuf:"varint,2,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *RuneId) Reset()         { *m = RuneId{} }
func (m *RuneId) String() string { return proto.CompactTextString(m) }
func (*RuneId) ProtoMessage()    {}
func (*RuneId) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{2}
}
func (m *RuneId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuneId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuneId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuneId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuneId.Merge(m, src)
}
func (m *RuneId) XXX_Size() int {
	return m.Size()
}
func (m *RuneId) XXX_DiscardUnknown() {
	xxx_messageInfo_RuneId.DiscardUnknown(m)
}

var xxx_messageInfo_RuneId proto.InternalMessageInfo

func (m *RuneId) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *RuneId) GetTx() uint32 {
	if m != nil {
		return m.Tx
	}
	return 0
}

// Rune Edict
type Edict struct {
	Id     *RuneId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount string  `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Output uint32  `protobuf:"varint,3,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *Edict) Reset()         { *m = Edict{} }
func (m *Edict) String() string { return proto.CompactTextString(m) }
func (*Edict) ProtoMessage()    {}
func (*Edict) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{3}
}
func (m *Edict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edict.Merge(m, src)
}
func (m *Edict) XXX_Size() int {
	return m.Size()
}
func (m *Edict) XXX_DiscardUnknown() {
	xxx_messageInfo_Edict.DiscardUnknown(m)
}

var xxx_messageInfo_Edict proto.InternalMessageInfo

func (m *Edict) GetId() *RuneId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Edict) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Edict) GetOutput() uint32 {
	if m != nil {
		return m.Output
	}
	return 0
}

// DKG Participant
type DKGParticipant struct {
	// the moniker of the corresponding validator
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// the operator address of the corresponding validator
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// the consensus address of the corresponding validator
	ConsensusAddress string `protobuf:"bytes,3,opt,name=consensus_address,json=consensusAddress,proto3" json:"consensus_address,omitempty"`
}

func (m *DKGParticipant) Reset()         { *m = DKGParticipant{} }
func (m *DKGParticipant) String() string { return proto.CompactTextString(m) }
func (*DKGParticipant) ProtoMessage()    {}
func (*DKGParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{4}
}
func (m *DKGParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DKGParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DKGParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGParticipant.Merge(m, src)
}
func (m *DKGParticipant) XXX_Size() int {
	return m.Size()
}
func (m *DKGParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_DKGParticipant proto.InternalMessageInfo

func (m *DKGParticipant) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *DKGParticipant) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *DKGParticipant) GetConsensusAddress() string {
	if m != nil {
		return m.ConsensusAddress
	}
	return ""
}

// DKG Request
type DKGRequest struct {
	// the unique request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// participant set
	Participants []*DKGParticipant `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
	// threshold required to perform DKG
	Threshold uint32 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// expiration time
	Expiration *time.Time `protobuf:"bytes,4,opt,name=expiration,proto3,stdtime" json:"expiration,omitempty"`
	// status
	Status DKGRequestStatus `protobuf:"varint,5,opt,name=status,proto3,enum=side.btcbridge.DKGRequestStatus" json:"status,omitempty"`
}

func (m *DKGRequest) Reset()         { *m = DKGRequest{} }
func (m *DKGRequest) String() string { return proto.CompactTextString(m) }
func (*DKGRequest) ProtoMessage()    {}
func (*DKGRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{5}
}
func (m *DKGRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DKGRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DKGRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGRequest.Merge(m, src)
}
func (m *DKGRequest) XXX_Size() int {
	return m.Size()
}
func (m *DKGRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DKGRequest proto.InternalMessageInfo

func (m *DKGRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DKGRequest) GetParticipants() []*DKGParticipant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *DKGRequest) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *DKGRequest) GetExpiration() *time.Time {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *DKGRequest) GetStatus() DKGRequestStatus {
	if m != nil {
		return m.Status
	}
	return DKGRequestStatus_DKG_REQUEST_STATUS_UNSPECIFIED
}

// DKG Completion Request
type DKGCompletionRequest struct {
	// request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// sender
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// new vaults generated by DKG
	Vaults []string `protobuf:"bytes,3,rep,name=vaults,proto3" json:"vaults,omitempty"`
	// validator address
	Validator string `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty"`
	// hex encoded validator signature
	Signature string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DKGCompletionRequest) Reset()         { *m = DKGCompletionRequest{} }
func (m *DKGCompletionRequest) String() string { return proto.CompactTextString(m) }
func (*DKGCompletionRequest) ProtoMessage()    {}
func (*DKGCompletionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{6}
}
func (m *DKGCompletionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGCompletionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DKGCompletionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DKGCompletionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGCompletionRequest.Merge(m, src)
}
func (m *DKGCompletionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DKGCompletionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGCompletionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DKGCompletionRequest proto.InternalMessageInfo

func (m *DKGCompletionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DKGCompletionRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *DKGCompletionRequest) GetVaults() []string {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *DKGCompletionRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *DKGCompletionRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// BTC Consolidation
type BtcConsolidation struct {
	// the outputs less than or equal to the target threshold will be consolidated
	TargetThreshold int64 `protobuf:"varint,1,opt,name=target_threshold,json=targetThreshold,proto3" json:"target_threshold,omitempty"`
	// the maximum number of the outputs to be consolidated; 0 means all outputs
	MaxNum uint32 `protobuf:"varint,2,opt,name=max_num,json=maxNum,proto3" json:"max_num,omitempty"`
}

func (m *BtcConsolidation) Reset()         { *m = BtcConsolidation{} }
func (m *BtcConsolidation) String() string { return proto.CompactTextString(m) }
func (*BtcConsolidation) ProtoMessage()    {}
func (*BtcConsolidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{7}
}
func (m *BtcConsolidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BtcConsolidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BtcConsolidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BtcConsolidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BtcConsolidation.Merge(m, src)
}
func (m *BtcConsolidation) XXX_Size() int {
	return m.Size()
}
func (m *BtcConsolidation) XXX_DiscardUnknown() {
	xxx_messageInfo_BtcConsolidation.DiscardUnknown(m)
}

var xxx_messageInfo_BtcConsolidation proto.InternalMessageInfo

func (m *BtcConsolidation) GetTargetThreshold() int64 {
	if m != nil {
		return m.TargetThreshold
	}
	return 0
}

func (m *BtcConsolidation) GetMaxNum() uint32 {
	if m != nil {
		return m.MaxNum
	}
	return 0
}

// Runes Consolidation
type RunesConsolidation struct {
	// rune id to be consolidated
	RuneId string `protobuf:"bytes,1,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
	// the outputs less than or equal to the target threshold will be consolidated
	TargetThreshold string `protobuf:"bytes,2,opt,name=target_threshold,json=targetThreshold,proto3" json:"target_threshold,omitempty"`
	// the maximum number of the outputs to be consolidated; 0 means all outputs
	MaxNum uint32 `protobuf:"varint,3,opt,name=max_num,json=maxNum,proto3" json:"max_num,omitempty"`
}

func (m *RunesConsolidation) Reset()         { *m = RunesConsolidation{} }
func (m *RunesConsolidation) String() string { return proto.CompactTextString(m) }
func (*RunesConsolidation) ProtoMessage()    {}
func (*RunesConsolidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{8}
}
func (m *RunesConsolidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunesConsolidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunesConsolidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunesConsolidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunesConsolidation.Merge(m, src)
}
func (m *RunesConsolidation) XXX_Size() int {
	return m.Size()
}
func (m *RunesConsolidation) XXX_DiscardUnknown() {
	xxx_messageInfo_RunesConsolidation.DiscardUnknown(m)
}

var xxx_messageInfo_RunesConsolidation proto.InternalMessageInfo

func (m *RunesConsolidation) GetRuneId() string {
	if m != nil {
		return m.RuneId
	}
	return ""
}

func (m *RunesConsolidation) GetTargetThreshold() string {
	if m != nil {
		return m.TargetThreshold
	}
	return ""
}

func (m *RunesConsolidation) GetMaxNum() uint32 {
	if m != nil {
		return m.MaxNum
	}
	return 0
}

// Consolidation
type Consolidation struct {
	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// vault version
	VaultVersion uint64 `protobuf:"varint,2,opt,name=vault_version,json=vaultVersion,proto3" json:"vault_version,omitempty"`
	// btc consolidation
	BtcConsolidation *BtcConsolidation `protobuf:"bytes,3,opt,name=btc_consolidation,json=btcConsolidation,proto3" json:"btc_consolidation,omitempty"`
	// runes consolidations
	RunesConsolidations []*RunesConsolidation `protobuf:"bytes,4,rep,name=runes_consolidations,json=runesConsolidations,proto3" json:"runes_consolidations,omitempty"`
	// indicates if switching to new vaults
	// the flag will ignore consolidations above
	Switch bool `protobuf:"varint,5,opt,name=switch,proto3" json:"switch,omitempty"`
}

func (m *Consolidation) Reset()         { *m = Consolidation{} }
func (m *Consolidation) String() string { return proto.CompactTextString(m) }
func (*Consolidation) ProtoMessage()    {}
func (*Consolidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{9}
}
func (m *Consolidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Consolidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Consolidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Consolidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consolidation.Merge(m, src)
}
func (m *Consolidation) XXX_Size() int {
	return m.Size()
}
func (m *Consolidation) XXX_DiscardUnknown() {
	xxx_messageInfo_Consolidation.DiscardUnknown(m)
}

var xxx_messageInfo_Consolidation proto.InternalMessageInfo

func (m *Consolidation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Consolidation) GetVaultVersion() uint64 {
	if m != nil {
		return m.VaultVersion
	}
	return 0
}

func (m *Consolidation) GetBtcConsolidation() *BtcConsolidation {
	if m != nil {
		return m.BtcConsolidation
	}
	return nil
}

func (m *Consolidation) GetRunesConsolidations() []*RunesConsolidation {
	if m != nil {
		return m.RunesConsolidations
	}
	return nil
}

func (m *Consolidation) GetSwitch() bool {
	if m != nil {
		return m.Switch
	}
	return false
}

func init() {
	proto.RegisterEnum("side.btcbridge.WithdrawStatus", WithdrawStatus_name, WithdrawStatus_value)
	proto.RegisterEnum("side.btcbridge.DKGRequestStatus", DKGRequestStatus_name, DKGRequestStatus_value)
	proto.RegisterType((*BlockHeader)(nil), "side.btcbridge.BlockHeader")
	proto.RegisterType((*BitcoinWithdrawRequest)(nil), "side.btcbridge.BitcoinWithdrawRequest")
	proto.RegisterType((*RuneId)(nil), "side.btcbridge.RuneId")
	proto.RegisterType((*Edict)(nil), "side.btcbridge.Edict")
	proto.RegisterType((*DKGParticipant)(nil), "side.btcbridge.DKGParticipant")
	proto.RegisterType((*DKGRequest)(nil), "side.btcbridge.DKGRequest")
	proto.RegisterType((*DKGCompletionRequest)(nil), "side.btcbridge.DKGCompletionRequest")
	proto.RegisterType((*BtcConsolidation)(nil), "side.btcbridge.BtcConsolidation")
	proto.RegisterType((*RunesConsolidation)(nil), "side.btcbridge.RunesConsolidation")
	proto.RegisterType((*Consolidation)(nil), "side.btcbridge.Consolidation")
}

func init() { proto.RegisterFile("side/btcbridge/bitcoin.proto", fileDescriptor_b004a69efe3c7d84) }

var fileDescriptor_b004a69efe3c7d84 = []byte{
	// 1071 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0x4b, 0x6f, 0xdb, 0xc6,
	0x13, 0x37, 0x25, 0x45, 0xb6, 0x46, 0xb1, 0xa2, 0x6c, 0x0c, 0x5b, 0x96, 0xfd, 0x97, 0x0c, 0xfd,
	0x81, 0xc2, 0x49, 0x01, 0x0a, 0x71, 0x81, 0xb6, 0x57, 0xbd, 0x6c, 0x0b, 0x8e, 0x1f, 0x5d, 0xc9,
	0x31, 0xd0, 0x0b, 0xc1, 0xc7, 0x56, 0x5a, 0x58, 0xe4, 0x2a, 0xdc, 0xa5, 0xa3, 0x5c, 0xf3, 0x01,
	0x8a, 0xa0, 0x97, 0x7e, 0x25, 0x1f, 0x03, 0xf4, 0xd2, 0x53, 0x5a, 0xd8, 0x5f, 0xa1, 0xe7, 0xa2,
	0xd8, 0xe5, 0x52, 0xb2, 0x64, 0xb5, 0xb7, 0x9d, 0x99, 0xdf, 0xbc, 0x7e, 0x33, 0x43, 0xc2, 0x2e,
	0xa7, 0x1e, 0xa9, 0x3b, 0xc2, 0x75, 0x42, 0xea, 0x0d, 0x48, 0xdd, 0xa1, 0xc2, 0x65, 0x34, 0x30,
	0xc7, 0x21, 0x13, 0x0c, 0x15, 0xa4, 0xd5, 0x9c, 0x5a, 0xcb, 0x1b, 0x03, 0x36, 0x60, 0xca, 0x54,
	0x97, 0xaf, 0x18, 0x55, 0xde, 0x1e, 0x30, 0x36, 0x18, 0x91, 0xba, 0x92, 0x9c, 0xe8, 0xa7, 0xba,
	0x1d, 0x7c, 0xd0, 0xa6, 0xea, 0xa2, 0x49, 0x50, 0x9f, 0x70, 0x61, 0xfb, 0x63, 0x0d, 0xa8, 0xb8,
	0x8c, 0xfb, 0x8c, 0xd7, 0x1d, 0x9b, 0x93, 0xfa, 0xcd, 0x6b, 0x87, 0x08, 0xfb, 0x75, 0x7d, 0x56,
	0x41, 0x79, 0x3b, 0xb6, 0x5b, 0x71, 0xd2, 0x58, 0xd0, 0xa6, 0x9d, 0x85, 0xd2, 0xc7, 0x76, 0x68,
	0xfb, 0xda, 0x58, 0xfb, 0xcb, 0x80, 0x7c, 0x73, 0xc4, 0xdc, 0xeb, 0x63, 0x62, 0x7b, 0x24, 0x44,
	0x25, 0x58, 0xbd, 0x21, 0x21, 0xa7, 0x2c, 0x28, 0x19, 0x7b, 0xc6, 0x7e, 0x06, 0x27, 0x22, 0x42,
	0x90, 0x19, 0xda, 0x7c, 0x58, 0x4a, 0xed, 0x19, 0xfb, 0x39, 0xac, 0xde, 0x68, 0x13, 0xb2, 0x43,
	0x42, 0x07, 0x43, 0x51, 0x4a, 0x2b, 0xb0, 0x96, 0x90, 0x09, 0x2f, 0xc6, 0x21, 0xb9, 0xa1, 0x2c,
	0xe2, 0x96, 0x23, 0xa3, 0x5b, 0xca, 0x35, 0xa3, 0x5c, 0x9f, 0x27, 0xa6, 0x38, 0xaf, 0x8c, 0x53,
	0x85, 0xbc, 0x4f, 0xc2, 0xeb, 0x11, 0xb1, 0x42, 0xc6, 0x44, 0xe9, 0x89, 0xc2, 0x41, 0xac, 0xc2,
	0x8c, 0x09, 0xb4, 0x01, 0x4f, 0x02, 0x16, 0xb8, 0xa4, 0x94, 0x55, 0x79, 0x62, 0x41, 0x96, 0xe4,
	0x50, 0xc1, 0x4b, 0xab, 0x71, 0x49, 0xf2, 0x2d, 0x75, 0x92, 0xbb, 0xd2, 0x9a, 0x02, 0xaa, 0x37,
	0x2a, 0x42, 0x3a, 0x10, 0x93, 0x52, 0x4e, 0xa9, 0xe4, 0xb3, 0xf6, 0x9b, 0x01, 0x9b, 0xcd, 0x78,
	0x84, 0x57, 0x54, 0x0c, 0xbd, 0xd0, 0x7e, 0x8f, 0xc9, 0xbb, 0x88, 0x70, 0x21, 0x19, 0xb0, 0x3d,
	0x2f, 0x24, 0x9c, 0x2b, 0x06, 0x72, 0x38, 0x11, 0xd1, 0x77, 0x90, 0xb5, 0x7d, 0x16, 0x05, 0x42,
	0x71, 0x90, 0x3f, 0xd8, 0x36, 0x35, 0xcf, 0x72, 0x28, 0xa6, 0x1e, 0x8a, 0xd9, 0x62, 0x34, 0x68,
	0x66, 0x6e, 0xbf, 0x54, 0x57, 0xb0, 0x86, 0xa3, 0x32, 0xac, 0x71, 0x19, 0x5d, 0x36, 0x10, 0x13,
	0x35, 0x95, 0x55, 0xbd, 0x13, 0xea, 0x69, 0x6e, 0xd4, 0x1b, 0x7d, 0x0b, 0x59, 0x2e, 0x6c, 0x11,
	0x71, 0xc5, 0x44, 0xe1, 0xa0, 0x62, 0xce, 0xef, 0x97, 0x99, 0xd4, 0xdc, 0x53, 0x28, 0xac, 0xd1,
	0x35, 0x13, 0xb2, 0x38, 0x0a, 0x48, 0xd7, 0x93, 0x7c, 0x29, 0xde, 0xf5, 0x10, 0x63, 0x01, 0x15,
	0x20, 0x25, 0x26, 0xaa, 0xf8, 0x75, 0x9c, 0x12, 0x93, 0x9a, 0x05, 0x4f, 0x3a, 0x1e, 0x75, 0x05,
	0xfa, 0x0a, 0x52, 0xd4, 0x53, 0xd8, 0xfc, 0xc1, 0xe6, 0x62, 0xb2, 0x38, 0x24, 0x4e, 0x51, 0x4f,
	0xce, 0xfb, 0x01, 0x03, 0xb9, 0x69, 0x83, 0x9b, 0x90, 0x65, 0x91, 0x18, 0x47, 0xf1, 0x1e, 0xac,
	0x63, 0x2d, 0xd5, 0x3e, 0x1a, 0x50, 0x68, 0x9f, 0x1c, 0x5d, 0xd8, 0xa1, 0xa0, 0x2e, 0x1d, 0xdb,
	0x81, 0xa2, 0xd7, 0x67, 0x01, 0xbd, 0x26, 0x61, 0x42, 0xaf, 0x16, 0xd1, 0x4b, 0x28, 0xb2, 0x31,
	0x09, 0x6d, 0xc1, 0x42, 0x2b, 0x99, 0x40, 0x9c, 0xe6, 0x59, 0xa2, 0x6f, 0xe8, 0x49, 0x7c, 0x0d,
	0xcf, 0x5d, 0x16, 0x70, 0x12, 0xf0, 0x88, 0x4f, 0xb1, 0x69, 0x85, 0x2d, 0x4e, 0x0d, 0x1a, 0x5c,
	0xfb, 0xdb, 0x00, 0x68, 0x9f, 0x1c, 0x25, 0xf3, 0x2d, 0x4c, 0x7b, 0xcd, 0xa8, 0x9e, 0x9a, 0xf0,
	0x74, 0x3c, 0xab, 0x4f, 0xa6, 0x4c, 0xef, 0xe7, 0x1f, 0x53, 0x3e, 0xdf, 0x06, 0x9e, 0xf3, 0x41,
	0xbb, 0x90, 0x13, 0xc3, 0x90, 0xf0, 0x21, 0x1b, 0x79, 0x9a, 0x82, 0x99, 0x02, 0xb5, 0x01, 0xc8,
	0x64, 0x4c, 0x43, 0x5b, 0xc8, 0xb3, 0xca, 0x28, 0x96, 0xcb, 0x66, 0x7c, 0xf1, 0x66, 0x72, 0xf1,
	0x66, 0x3f, 0xb9, 0xf8, 0xe6, 0xda, 0xed, 0x97, 0xaa, 0xf1, 0xe9, 0x8f, 0xaa, 0x81, 0x1f, 0xf8,
	0xa1, 0xef, 0x17, 0x96, 0x62, 0x6f, 0x49, 0x85, 0xba, 0xc7, 0x85, 0xb5, 0xf8, 0xc5, 0x80, 0x8d,
	0xf6, 0xc9, 0x51, 0x8b, 0xf9, 0xe3, 0x11, 0x91, 0xb1, 0xfe, 0x8d, 0x8a, 0x4d, 0xc8, 0x72, 0x12,
	0x78, 0x24, 0x4c, 0xc6, 0x1b, 0x4b, 0x52, 0x7f, 0x63, 0x47, 0x23, 0x21, 0x39, 0x4e, 0x4b, 0x7d,
	0x2c, 0xc9, 0xb6, 0x6f, 0xec, 0x11, 0xf5, 0xe4, 0x68, 0xf4, 0x02, 0xcf, 0x14, 0xd2, 0xca, 0xe9,
	0x20, 0xb0, 0x45, 0x14, 0x12, 0x7d, 0xd2, 0x33, 0x45, 0xed, 0x2d, 0x14, 0x9b, 0xc2, 0x6d, 0xb1,
	0x80, 0x33, 0xe5, 0x20, 0x5b, 0x7c, 0x09, 0x45, 0x61, 0x87, 0x03, 0x22, 0xac, 0x19, 0x9b, 0xb2,
	0xba, 0x34, 0x7e, 0x16, 0xeb, 0xfb, 0x53, 0x4e, 0xb7, 0x60, 0xd5, 0xb7, 0x27, 0x56, 0x10, 0xf9,
	0x7a, 0x9f, 0xb3, 0xbe, 0x3d, 0x39, 0x8b, 0xfc, 0xda, 0x3b, 0x40, 0x72, 0x61, 0xf9, 0x7c, 0xe4,
	0x2d, 0x58, 0x0d, 0xa3, 0x80, 0x58, 0xba, 0xdd, 0x1c, 0xce, 0x86, 0xf1, 0xa1, 0x2c, 0x4b, 0xa9,
	0x97, 0xee, 0x3f, 0x52, 0xa6, 0xe7, 0x52, 0x7e, 0x4c, 0xc1, 0xfa, 0x7c, 0xba, 0x45, 0x62, 0xff,
	0x0f, 0xeb, 0x8a, 0x32, 0x2b, 0xf9, 0xb6, 0xa6, 0x94, 0xe9, 0xa9, 0x52, 0xbe, 0xd5, 0x1f, 0xd8,
	0x53, 0x78, 0xee, 0x08, 0xd7, 0x72, 0x1f, 0x46, 0x52, 0x99, 0xf2, 0x8f, 0x67, 0xbd, 0x48, 0x1d,
	0x2e, 0x3a, 0x8b, 0x64, 0x5e, 0xc2, 0x86, 0xec, 0x91, 0xcf, 0x07, 0xe4, 0xa5, 0x8c, 0xda, 0xef,
	0xda, 0xb2, 0x2b, 0x9f, 0x27, 0x0d, 0xbf, 0x08, 0x1f, 0xe9, 0xb8, 0xda, 0x91, 0xf7, 0x54, 0xb8,
	0x43, 0x35, 0xd2, 0x35, 0xac, 0xa5, 0x57, 0x3f, 0x1b, 0x50, 0x98, 0xff, 0x2c, 0xa1, 0x2a, 0xec,
	0x5c, 0x75, 0xfb, 0xc7, 0x6d, 0xdc, 0xb8, 0xb2, 0x7a, 0xfd, 0x46, 0xff, 0xb2, 0x67, 0x5d, 0x9e,
	0xf5, 0x2e, 0x3a, 0xad, 0xee, 0x61, 0xb7, 0xd3, 0x2e, 0xae, 0xa0, 0x1d, 0xd8, 0x5a, 0x04, 0xb4,
	0x70, 0xa7, 0xd1, 0xef, 0xb4, 0x8b, 0xc6, 0x32, 0xef, 0x26, 0x3e, 0x6f, 0xb4, 0x5b, 0x8d, 0x9e,
	0x04, 0xa4, 0xd0, 0xff, 0x60, 0xfb, 0x91, 0xf7, 0xf9, 0xd9, 0x61, 0x17, 0x9f, 0x76, 0xda, 0xc5,
	0xf4, 0xab, 0x5f, 0x0d, 0x28, 0x2e, 0x9e, 0x04, 0xaa, 0x41, 0xa5, 0x7d, 0x72, 0x64, 0xe1, 0xce,
	0x0f, 0x97, 0x9d, 0x5e, 0x7f, 0x79, 0x55, 0x15, 0x28, 0x2f, 0xc1, 0x5c, 0x74, 0xce, 0xda, 0xdd,
	0xb3, 0xa3, 0xa2, 0x81, 0xf6, 0x60, 0x77, 0x89, 0xbd, 0x75, 0x7e, 0x7a, 0xf1, 0xa6, 0x33, 0xad,
	0x6c, 0x09, 0xe2, 0xb0, 0xd1, 0x7d, 0x23, 0x2b, 0x6b, 0x1e, 0xdf, 0xde, 0x55, 0x8c, 0xcf, 0x77,
	0x15, 0xe3, 0xcf, 0xbb, 0x8a, 0xf1, 0xe9, 0xbe, 0xb2, 0xf2, 0xf9, 0xbe, 0xb2, 0xf2, 0xfb, 0x7d,
	0x65, 0xe5, 0x47, 0x73, 0x40, 0xc5, 0x30, 0x72, 0x4c, 0x97, 0xf9, 0x75, 0x39, 0x1f, 0xf5, 0x71,
	0x70, 0xd9, 0x48, 0x09, 0xf5, 0xc9, 0x83, 0x9f, 0xb8, 0xf8, 0x30, 0x26, 0xdc, 0xc9, 0x2a, 0xc0,
	0x37, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x9c, 0x47, 0x44, 0x9e, 0x08, 0x00, 0x00,
}

func (m *BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ntx != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Ntx))
		i--
		dAtA[i] = 0x48
	}
	if m.Time != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Bits) > 0 {
		i -= len(m.Bits)
		copy(dAtA[i:], m.Bits)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Bits)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Nonce != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MerkleRoot) > 0 {
		i -= len(m.MerkleRoot)
		copy(dAtA[i:], m.MerkleRoot)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.MerkleRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreviousBlockHash) > 0 {
		i -= len(m.PreviousBlockHash)
		copy(dAtA[i:], m.PreviousBlockHash)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.PreviousBlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BitcoinWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BitcoinWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BitcoinWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Sequence != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBitcoin(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuneId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuneId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuneId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tx != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Tx))
		i--
		dAtA[i] = 0x10
	}
	if m.Block != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Output))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBitcoin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DKGParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsensusAddress) > 0 {
		i -= len(m.ConsensusAddress)
		copy(dAtA[i:], m.ConsensusAddress)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.ConsensusAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DKGRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Expiration != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Expiration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiration):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintBitcoin(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x22
	}
	if m.Threshold != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBitcoin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DKGCompletionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGCompletionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGCompletionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Vaults[iNdEx])
			copy(dAtA[i:], m.Vaults[iNdEx])
			i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Vaults[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BtcConsolidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BtcConsolidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BtcConsolidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxNum != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.MaxNum))
		i--
		dAtA[i] = 0x10
	}
	if m.TargetThreshold != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.TargetThreshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RunesConsolidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunesConsolidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunesConsolidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxNum != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.MaxNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TargetThreshold) > 0 {
		i -= len(m.TargetThreshold)
		copy(dAtA[i:], m.TargetThreshold)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.TargetThreshold)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RuneId) > 0 {
		i -= len(m.RuneId)
		copy(dAtA[i:], m.RuneId)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.RuneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Consolidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Consolidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Consolidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Switch {
		i--
		if m.Switch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.RunesConsolidations) > 0 {
		for iNdEx := len(m.RunesConsolidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RunesConsolidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBitcoin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BtcConsolidation != nil {
		{
			size, err := m.BtcConsolidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBitcoin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VaultVersion != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.VaultVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBitcoin(dAtA []byte, offset int, v uint64) int {
	offset -= sovBitcoin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBitcoin(uint64(m.Version))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBitcoin(uint64(m.Height))
	}
	l = len(m.PreviousBlockHash)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovBitcoin(uint64(m.Nonce))
	}
	l = len(m.Bits)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovBitcoin(uint64(m.Time))
	}
	if m.Ntx != 0 {
		n += 1 + sovBitcoin(uint64(m.Ntx))
	}
	return n
}

func (m *BitcoinWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBitcoin(uint64(l))
	if m.Sequence != 0 {
		n += 1 + sovBitcoin(uint64(m.Sequence))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBitcoin(uint64(m.Status))
	}
	return n
}

func (m *RuneId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovBitcoin(uint64(m.Block))
	}
	if m.Tx != 0 {
		n += 1 + sovBitcoin(uint64(m.Tx))
	}
	return n
}

func (m *Edict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovBitcoin(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Output != 0 {
		n += 1 + sovBitcoin(uint64(m.Output))
	}
	return n
}

func (m *DKGParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	l = len(m.ConsensusAddress)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	return n
}

func (m *DKGRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBitcoin(uint64(m.Id))
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovBitcoin(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovBitcoin(uint64(m.Threshold))
	}
	if m.Expiration != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiration)
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBitcoin(uint64(m.Status))
	}
	return n
}

func (m *DKGCompletionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBitcoin(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if len(m.Vaults) > 0 {
		for _, s := range m.Vaults {
			l = len(s)
			n += 1 + l + sovBitcoin(uint64(l))
		}
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	return n
}

func (m *BtcConsolidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetThreshold != 0 {
		n += 1 + sovBitcoin(uint64(m.TargetThreshold))
	}
	if m.MaxNum != 0 {
		n += 1 + sovBitcoin(uint64(m.MaxNum))
	}
	return n
}

func (m *RunesConsolidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RuneId)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	l = len(m.TargetThreshold)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.MaxNum != 0 {
		n += 1 + sovBitcoin(uint64(m.MaxNum))
	}
	return n
}

func (m *Consolidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBitcoin(uint64(m.Id))
	}
	if m.VaultVersion != 0 {
		n += 1 + sovBitcoin(uint64(m.VaultVersion))
	}
	if m.BtcConsolidation != nil {
		l = m.BtcConsolidation.Size()
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if len(m.RunesConsolidations) > 0 {
		for _, e := range m.RunesConsolidations {
			l = e.Size()
			n += 1 + l + sovBitcoin(uint64(l))
		}
	}
	if m.Switch {
		n += 2
	}
	return n
}

func sovBitcoin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBitcoin(x uint64) (n int) {
	return sovBitcoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ntx", wireType)
			}
			m.Ntx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ntx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BitcoinWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BitcoinWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BitcoinWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WithdrawStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuneId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			m.Tx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Edict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Edict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &RuneId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			m.Output = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Output |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &DKGParticipant{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiration == nil {
				m.Expiration = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DKGRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGCompletionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGCompletionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGCompletionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BtcConsolidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BtcConsolidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BtcConsolidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetThreshold", wireType)
			}
			m.TargetThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNum", wireType)
			}
			m.MaxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunesConsolidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunesConsolidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunesConsolidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNum", wireType)
			}
			m.MaxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Consolidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Consolidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Consolidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultVersion", wireType)
			}
			m.VaultVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcConsolidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BtcConsolidation == nil {
				m.BtcConsolidation = &BtcConsolidation{}
			}
			if err := m.BtcConsolidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunesConsolidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunesConsolidations = append(m.RunesConsolidations, &RunesConsolidation{})
			if err := m.RunesConsolidations[len(m.RunesConsolidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Switch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBitcoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBitcoin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBitcoin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBitcoin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBitcoin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBitcoin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBitcoin = fmt.Errorf("proto: unexpected end of group")
)
