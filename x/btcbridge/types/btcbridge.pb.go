// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/btcbridge/btcbridge.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Bitcoin Signing Status
type SigningStatus int32

const (
	// SIGNING_STATUS_UNSPECIFIED - Default value, should not be used
	SigningStatus_SIGNING_STATUS_UNSPECIFIED SigningStatus = 0
	// SIGNING_STATUS_PENDING - The signing request is pending
	SigningStatus_SIGNING_STATUS_PENDING SigningStatus = 1
	// SIGNING_STATUS_BROADCASTED - The signing request is broadcasted
	SigningStatus_SIGNING_STATUS_BROADCASTED SigningStatus = 2
	// SIGNING_STATUS_CONFIRMED - The signing request is confirmed
	SigningStatus_SIGNING_STATUS_CONFIRMED SigningStatus = 3
	// SIGNING_STATUS_FAILED - The signing request failed to broadcast due to invalid inputs or non-standardness
	SigningStatus_SIGNING_STATUS_FAILED SigningStatus = 4
)

var SigningStatus_name = map[int32]string{
	0: "SIGNING_STATUS_UNSPECIFIED",
	1: "SIGNING_STATUS_PENDING",
	2: "SIGNING_STATUS_BROADCASTED",
	3: "SIGNING_STATUS_CONFIRMED",
	4: "SIGNING_STATUS_FAILED",
}

var SigningStatus_value = map[string]int32{
	"SIGNING_STATUS_UNSPECIFIED": 0,
	"SIGNING_STATUS_PENDING":     1,
	"SIGNING_STATUS_BROADCASTED": 2,
	"SIGNING_STATUS_CONFIRMED":   3,
	"SIGNING_STATUS_FAILED":      4,
}

func (x SigningStatus) String() string {
	return proto.EnumName(SigningStatus_name, int32(x))
}

func (SigningStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9ff68b16012a2359, []int{0}
}

type DKGRequestStatus int32

const (
	// DKG_REQUEST_STATUS_UNSPECIFIED defines the unknown DKG request status
	DKGRequestStatus_DKG_REQUEST_STATUS_UNSPECIFIED DKGRequestStatus = 0
	// DKG_REQUEST_STATUS_PENDING defines the status of the DKG request which is pending
	DKGRequestStatus_DKG_REQUEST_STATUS_PENDING DKGRequestStatus = 1
	// DKG_REQUEST_STATUS_COMPLETED defines the status of the DKG request which is completed
	DKGRequestStatus_DKG_REQUEST_STATUS_COMPLETED DKGRequestStatus = 2
	// DKG_REQUEST_STATUS_FAILED defines the status of the DKG request which failed
	DKGRequestStatus_DKG_REQUEST_STATUS_FAILED DKGRequestStatus = 3
	// DKG_REQUEST_STATUS_TIMEDOUT defines the status of the DKG request which timed out
	DKGRequestStatus_DKG_REQUEST_STATUS_TIMEDOUT DKGRequestStatus = 4
)

var DKGRequestStatus_name = map[int32]string{
	0: "DKG_REQUEST_STATUS_UNSPECIFIED",
	1: "DKG_REQUEST_STATUS_PENDING",
	2: "DKG_REQUEST_STATUS_COMPLETED",
	3: "DKG_REQUEST_STATUS_FAILED",
	4: "DKG_REQUEST_STATUS_TIMEDOUT",
}

var DKGRequestStatus_value = map[string]int32{
	"DKG_REQUEST_STATUS_UNSPECIFIED": 0,
	"DKG_REQUEST_STATUS_PENDING":     1,
	"DKG_REQUEST_STATUS_COMPLETED":   2,
	"DKG_REQUEST_STATUS_FAILED":      3,
	"DKG_REQUEST_STATUS_TIMEDOUT":    4,
}

func (x DKGRequestStatus) String() string {
	return proto.EnumName(DKGRequestStatus_name, int32(x))
}

func (DKGRequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9ff68b16012a2359, []int{1}
}

// Bitcoin Block Header
type BlockHeader struct {
	Version           uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Hash              string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Height            uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	PreviousBlockHash string `protobuf:"bytes,4,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	MerkleRoot        string `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Nonce             uint64 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Bits              string `protobuf:"bytes,7,opt,name=bits,proto3" json:"bits,omitempty"`
	Time              uint64 `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`
	Ntx               uint64 `protobuf:"varint,9,opt,name=ntx,proto3" json:"ntx,omitempty"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff68b16012a2359, []int{0}
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(m, src)
}
func (m *BlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeader) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeader) GetPreviousBlockHash() string {
	if m != nil {
		return m.PreviousBlockHash
	}
	return ""
}

func (m *BlockHeader) GetMerkleRoot() string {
	if m != nil {
		return m.MerkleRoot
	}
	return ""
}

func (m *BlockHeader) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetBits() string {
	if m != nil {
		return m.Bits
	}
	return ""
}

func (m *BlockHeader) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BlockHeader) GetNtx() uint64 {
	if m != nil {
		return m.Ntx
	}
	return 0
}

// Bitcoin Signing Request
type SigningRequest struct {
	Address  string        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Sequence uint64        `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Txid     string        `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	Psbt     string        `protobuf:"bytes,4,opt,name=psbt,proto3" json:"psbt,omitempty"`
	Status   SigningStatus `protobuf:"varint,5,opt,name=status,proto3,enum=side.btcbridge.SigningStatus" json:"status,omitempty"`
}

func (m *SigningRequest) Reset()         { *m = SigningRequest{} }
func (m *SigningRequest) String() string { return proto.CompactTextString(m) }
func (*SigningRequest) ProtoMessage()    {}
func (*SigningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff68b16012a2359, []int{1}
}
func (m *SigningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningRequest.Merge(m, src)
}
func (m *SigningRequest) XXX_Size() int {
	return m.Size()
}
func (m *SigningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SigningRequest proto.InternalMessageInfo

func (m *SigningRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SigningRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *SigningRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *SigningRequest) GetPsbt() string {
	if m != nil {
		return m.Psbt
	}
	return ""
}

func (m *SigningRequest) GetStatus() SigningStatus {
	if m != nil {
		return m.Status
	}
	return SigningStatus_SIGNING_STATUS_UNSPECIFIED
}

// Bitcoin UTXO
type UTXO struct {
	Txid         string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout         uint64 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	Address      string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Amount       uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Height       uint64 `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	PubKeyScript []byte `protobuf:"bytes,6,opt,name=pub_key_script,json=pubKeyScript,proto3" json:"pub_key_script,omitempty"`
	IsLocked     bool   `protobuf:"varint,7,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// rune balances associated with the UTXO
	Runes []*RuneBalance `protobuf:"bytes,8,rep,name=runes,proto3" json:"runes,omitempty"`
}

func (m *UTXO) Reset()         { *m = UTXO{} }
func (m *UTXO) String() string { return proto.CompactTextString(m) }
func (*UTXO) ProtoMessage()    {}
func (*UTXO) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff68b16012a2359, []int{2}
}
func (m *UTXO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UTXO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UTXO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UTXO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UTXO.Merge(m, src)
}
func (m *UTXO) XXX_Size() int {
	return m.Size()
}
func (m *UTXO) XXX_DiscardUnknown() {
	xxx_messageInfo_UTXO.DiscardUnknown(m)
}

var xxx_messageInfo_UTXO proto.InternalMessageInfo

func (m *UTXO) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *UTXO) GetVout() uint64 {
	if m != nil {
		return m.Vout
	}
	return 0
}

func (m *UTXO) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UTXO) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *UTXO) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *UTXO) GetPubKeyScript() []byte {
	if m != nil {
		return m.PubKeyScript
	}
	return nil
}

func (m *UTXO) GetIsLocked() bool {
	if m != nil {
		return m.IsLocked
	}
	return false
}

func (m *UTXO) GetRunes() []*RuneBalance {
	if m != nil {
		return m.Runes
	}
	return nil
}

// Rune Balance
type RuneBalance struct {
	// serialized rune id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// rune amount
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *RuneBalance) Reset()         { *m = RuneBalance{} }
func (m *RuneBalance) String() string { return proto.CompactTextString(m) }
func (*RuneBalance) ProtoMessage()    {}
func (*RuneBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff68b16012a2359, []int{3}
}
func (m *RuneBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuneBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuneBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuneBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuneBalance.Merge(m, src)
}
func (m *RuneBalance) XXX_Size() int {
	return m.Size()
}
func (m *RuneBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_RuneBalance.DiscardUnknown(m)
}

var xxx_messageInfo_RuneBalance proto.InternalMessageInfo

func (m *RuneBalance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RuneBalance) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// Rune ID
type RuneId struct {
	// block height
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
	// tx index
	Tx uint32 `protobuf:"varint,2,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *RuneId) Reset()         { *m = RuneId{} }
func (m *RuneId) String() string { return proto.CompactTextString(m) }
func (*RuneId) ProtoMessage()    {}
func (*RuneId) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff68b16012a2359, []int{4}
}
func (m *RuneId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuneId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuneId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuneId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuneId.Merge(m, src)
}
func (m *RuneId) XXX_Size() int {
	return m.Size()
}
func (m *RuneId) XXX_DiscardUnknown() {
	xxx_messageInfo_RuneId.DiscardUnknown(m)
}

var xxx_messageInfo_RuneId proto.InternalMessageInfo

func (m *RuneId) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *RuneId) GetTx() uint32 {
	if m != nil {
		return m.Tx
	}
	return 0
}

// Rune Edict
type Edict struct {
	Id     *RuneId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount string  `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Output uint32  `protobuf:"varint,3,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *Edict) Reset()         { *m = Edict{} }
func (m *Edict) String() string { return proto.CompactTextString(m) }
func (*Edict) ProtoMessage()    {}
func (*Edict) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff68b16012a2359, []int{5}
}
func (m *Edict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edict.Merge(m, src)
}
func (m *Edict) XXX_Size() int {
	return m.Size()
}
func (m *Edict) XXX_DiscardUnknown() {
	xxx_messageInfo_Edict.DiscardUnknown(m)
}

var xxx_messageInfo_Edict proto.InternalMessageInfo

func (m *Edict) GetId() *RuneId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Edict) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Edict) GetOutput() uint32 {
	if m != nil {
		return m.Output
	}
	return 0
}

// DKG Participant
type DKGParticipant struct {
	// the moniker of the corresponding validator
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// the operator address of the corresponding validator
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// the consensus address of the corresponding validator
	ConsensusAddress string `protobuf:"bytes,3,opt,name=consensus_address,json=consensusAddress,proto3" json:"consensus_address,omitempty"`
}

func (m *DKGParticipant) Reset()         { *m = DKGParticipant{} }
func (m *DKGParticipant) String() string { return proto.CompactTextString(m) }
func (*DKGParticipant) ProtoMessage()    {}
func (*DKGParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff68b16012a2359, []int{6}
}
func (m *DKGParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DKGParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DKGParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGParticipant.Merge(m, src)
}
func (m *DKGParticipant) XXX_Size() int {
	return m.Size()
}
func (m *DKGParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_DKGParticipant proto.InternalMessageInfo

func (m *DKGParticipant) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *DKGParticipant) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *DKGParticipant) GetConsensusAddress() string {
	if m != nil {
		return m.ConsensusAddress
	}
	return ""
}

// DKG Request
type DKGRequest struct {
	// the unique request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// participant set
	Participants []*DKGParticipant `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
	// threshold required to perform DKG
	Threshold uint32 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// asset types of vaults to be generated
	VaultTypes []AssetType `protobuf:"varint,4,rep,packed,name=vault_types,json=vaultTypes,proto3,enum=side.btcbridge.AssetType" json:"vault_types,omitempty"`
	// indicates if disabling bridge deposit and withdrawal
	DisableBridge bool `protobuf:"varint,5,opt,name=disable_bridge,json=disableBridge,proto3" json:"disable_bridge,omitempty"`
	// indicates if transferring assets to the newly generated vaults when the DKG request is completed
	EnableTransfer bool `protobuf:"varint,6,opt,name=enable_transfer,json=enableTransfer,proto3" json:"enable_transfer,omitempty"`
	// target number of the UTXOs to be transferred each time
	TargetUtxoNum uint32 `protobuf:"varint,7,opt,name=target_utxo_num,json=targetUtxoNum,proto3" json:"target_utxo_num,omitempty"`
	// fee rate for vault transfer
	FeeRate string `protobuf:"bytes,8,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	// expiration time
	Expiration *time.Time `protobuf:"bytes,9,opt,name=expiration,proto3,stdtime" json:"expiration,omitempty"`
	// status
	Status DKGRequestStatus `protobuf:"varint,10,opt,name=status,proto3,enum=side.btcbridge.DKGRequestStatus" json:"status,omitempty"`
}

func (m *DKGRequest) Reset()         { *m = DKGRequest{} }
func (m *DKGRequest) String() string { return proto.CompactTextString(m) }
func (*DKGRequest) ProtoMessage()    {}
func (*DKGRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff68b16012a2359, []int{7}
}
func (m *DKGRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DKGRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DKGRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGRequest.Merge(m, src)
}
func (m *DKGRequest) XXX_Size() int {
	return m.Size()
}
func (m *DKGRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DKGRequest proto.InternalMessageInfo

func (m *DKGRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DKGRequest) GetParticipants() []*DKGParticipant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *DKGRequest) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *DKGRequest) GetVaultTypes() []AssetType {
	if m != nil {
		return m.VaultTypes
	}
	return nil
}

func (m *DKGRequest) GetDisableBridge() bool {
	if m != nil {
		return m.DisableBridge
	}
	return false
}

func (m *DKGRequest) GetEnableTransfer() bool {
	if m != nil {
		return m.EnableTransfer
	}
	return false
}

func (m *DKGRequest) GetTargetUtxoNum() uint32 {
	if m != nil {
		return m.TargetUtxoNum
	}
	return 0
}

func (m *DKGRequest) GetFeeRate() string {
	if m != nil {
		return m.FeeRate
	}
	return ""
}

func (m *DKGRequest) GetExpiration() *time.Time {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *DKGRequest) GetStatus() DKGRequestStatus {
	if m != nil {
		return m.Status
	}
	return DKGRequestStatus_DKG_REQUEST_STATUS_UNSPECIFIED
}

// DKG Completion Request
type DKGCompletionRequest struct {
	// request id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// sender
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// new vaults generated by DKG
	Vaults []string `protobuf:"bytes,3,rep,name=vaults,proto3" json:"vaults,omitempty"`
	// consensus address of the corresponding validator
	ConsensusAddress string `protobuf:"bytes,4,opt,name=consensus_address,json=consensusAddress,proto3" json:"consensus_address,omitempty"`
	// hex encoded validator signature
	Signature string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DKGCompletionRequest) Reset()         { *m = DKGCompletionRequest{} }
func (m *DKGCompletionRequest) String() string { return proto.CompactTextString(m) }
func (*DKGCompletionRequest) ProtoMessage()    {}
func (*DKGCompletionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff68b16012a2359, []int{8}
}
func (m *DKGCompletionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGCompletionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DKGCompletionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DKGCompletionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGCompletionRequest.Merge(m, src)
}
func (m *DKGCompletionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DKGCompletionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGCompletionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DKGCompletionRequest proto.InternalMessageInfo

func (m *DKGCompletionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DKGCompletionRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *DKGCompletionRequest) GetVaults() []string {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *DKGCompletionRequest) GetConsensusAddress() string {
	if m != nil {
		return m.ConsensusAddress
	}
	return ""
}

func (m *DKGCompletionRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterEnum("side.btcbridge.SigningStatus", SigningStatus_name, SigningStatus_value)
	proto.RegisterEnum("side.btcbridge.DKGRequestStatus", DKGRequestStatus_name, DKGRequestStatus_value)
	proto.RegisterType((*BlockHeader)(nil), "side.btcbridge.BlockHeader")
	proto.RegisterType((*SigningRequest)(nil), "side.btcbridge.SigningRequest")
	proto.RegisterType((*UTXO)(nil), "side.btcbridge.UTXO")
	proto.RegisterType((*RuneBalance)(nil), "side.btcbridge.RuneBalance")
	proto.RegisterType((*RuneId)(nil), "side.btcbridge.RuneId")
	proto.RegisterType((*Edict)(nil), "side.btcbridge.Edict")
	proto.RegisterType((*DKGParticipant)(nil), "side.btcbridge.DKGParticipant")
	proto.RegisterType((*DKGRequest)(nil), "side.btcbridge.DKGRequest")
	proto.RegisterType((*DKGCompletionRequest)(nil), "side.btcbridge.DKGCompletionRequest")
}

func init() { proto.RegisterFile("side/btcbridge/btcbridge.proto", fileDescriptor_9ff68b16012a2359) }

var fileDescriptor_9ff68b16012a2359 = []byte{
	// 1133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xc1, 0x6e, 0x22, 0x47,
	0x13, 0xf6, 0x00, 0x66, 0xa1, 0x58, 0x58, 0xb6, 0x7f, 0xff, 0xd6, 0x18, 0x7b, 0xc7, 0x08, 0x25,
	0x1b, 0x67, 0x23, 0x81, 0xec, 0x68, 0xa5, 0x28, 0x37, 0xf0, 0x60, 0x16, 0xd9, 0xc6, 0x4e, 0x03,
	0x52, 0x94, 0xcb, 0xa8, 0x67, 0xa6, 0x0d, 0x23, 0xc3, 0xf4, 0x64, 0xba, 0xc7, 0xc2, 0xd7, 0x3c,
	0xc1, 0xbe, 0x42, 0xa4, 0xe4, 0x1d, 0xf2, 0x08, 0x7b, 0x89, 0xb4, 0xc7, 0x9c, 0x92, 0xc8, 0xbe,
	0xe7, 0x94, 0x07, 0x88, 0xba, 0x67, 0xc0, 0x80, 0x48, 0x6e, 0x55, 0x5f, 0x7d, 0xdd, 0x55, 0xd5,
	0xf5, 0x4d, 0x69, 0xc0, 0xe0, 0x9e, 0x4b, 0x1b, 0xb6, 0x70, 0xec, 0xd0, 0x73, 0x47, 0x4b, 0x56,
	0x3d, 0x08, 0x99, 0x60, 0xa8, 0x24, 0xe3, 0xf5, 0x05, 0x5a, 0xd9, 0x19, 0xb1, 0x11, 0x53, 0xa1,
	0x86, 0xb4, 0x62, 0x56, 0x65, 0x6f, 0xc4, 0xd8, 0x68, 0x42, 0x1b, 0xca, 0xb3, 0xa3, 0x9b, 0x06,
	0xf1, 0xef, 0x93, 0xd0, 0xe1, 0x7a, 0x48, 0x78, 0x53, 0xca, 0x05, 0x99, 0x06, 0x09, 0xc1, 0x70,
	0x18, 0x9f, 0x32, 0xde, 0xb0, 0x09, 0xa7, 0x8d, 0xbb, 0x63, 0x9b, 0x0a, 0x72, 0xdc, 0x70, 0x98,
	0xe7, 0xcf, 0xef, 0x8e, 0xe3, 0x56, 0x9c, 0x34, 0x76, 0x92, 0xd0, 0xfe, 0x5a, 0xf1, 0x01, 0x09,
	0xc9, 0x34, 0x09, 0xd6, 0xfe, 0xd6, 0xa0, 0xd0, 0x9a, 0x30, 0xe7, 0xf6, 0x1d, 0x25, 0x2e, 0x0d,
	0x91, 0x0e, 0xcf, 0xee, 0x68, 0xc8, 0x3d, 0xe6, 0xeb, 0x5a, 0x55, 0x3b, 0xca, 0xe0, 0xb9, 0x8b,
	0x10, 0x64, 0xc6, 0x84, 0x8f, 0xf5, 0x54, 0x55, 0x3b, 0xca, 0x63, 0x65, 0xa3, 0x5d, 0xc8, 0x8e,
	0xa9, 0x37, 0x1a, 0x0b, 0x3d, 0xad, 0xc8, 0x89, 0x87, 0xea, 0xf0, 0xbf, 0x20, 0xa4, 0x77, 0x1e,
	0x8b, 0xb8, 0x65, 0xcb, 0xdb, 0x2d, 0x75, 0x34, 0xa3, 0x8e, 0xbe, 0x9c, 0x87, 0xe2, 0xbc, 0xf2,
	0x9e, 0x43, 0x28, 0x4c, 0x69, 0x78, 0x3b, 0xa1, 0x56, 0xc8, 0x98, 0xd0, 0xb7, 0x15, 0x0f, 0x62,
	0x08, 0x33, 0x26, 0xd0, 0x0e, 0x6c, 0xfb, 0xcc, 0x77, 0xa8, 0x9e, 0x55, 0x79, 0x62, 0x47, 0x96,
	0x64, 0x7b, 0x82, 0xeb, 0xcf, 0xe2, 0x92, 0xa4, 0x2d, 0x31, 0xf9, 0x76, 0x7a, 0x4e, 0x11, 0x95,
	0x8d, 0xca, 0x90, 0xf6, 0xc5, 0x4c, 0xcf, 0x2b, 0x48, 0x9a, 0xb5, 0x9f, 0x35, 0x28, 0xf5, 0xbd,
	0x91, 0xef, 0xf9, 0x23, 0x4c, 0xbf, 0x8f, 0x28, 0x17, 0xb2, 0x73, 0xe2, 0xba, 0x21, 0xe5, 0x5c,
	0x75, 0x9e, 0xc7, 0x73, 0x17, 0x55, 0x20, 0xc7, 0x25, 0x49, 0xe6, 0x4f, 0xa9, 0x3b, 0x16, 0xbe,
	0x4a, 0x37, 0xf3, 0x5c, 0xd5, 0x7f, 0x1e, 0x2b, 0x5b, 0x62, 0x01, 0xb7, 0x45, 0xd2, 0xae, 0xb2,
	0xd1, 0x5b, 0xc8, 0x72, 0x41, 0x44, 0xc4, 0x55, 0x73, 0xa5, 0x93, 0x57, 0xf5, 0x55, 0xc9, 0xd4,
	0x93, 0x6a, 0xfa, 0x8a, 0x84, 0x13, 0x72, 0xed, 0x2f, 0x0d, 0x32, 0xc3, 0xc1, 0xb7, 0x57, 0x8b,
	0x3c, 0xda, 0x6a, 0x9e, 0x3b, 0x16, 0x89, 0xa4, 0x26, 0x65, 0x2f, 0x77, 0x91, 0x5e, 0xed, 0x62,
	0x17, 0xb2, 0x64, 0xca, 0x22, 0x3f, 0xae, 0x2b, 0x83, 0x13, 0x6f, 0x69, 0x86, 0xdb, 0x2b, 0x33,
	0xfc, 0x04, 0x4a, 0x41, 0x64, 0x5b, 0xb7, 0xf4, 0xde, 0xe2, 0x4e, 0xe8, 0x05, 0x42, 0xbd, 0xfd,
	0x73, 0xfc, 0x3c, 0x88, 0xec, 0x73, 0x7a, 0xdf, 0x57, 0x18, 0xda, 0x87, 0xbc, 0xc7, 0x2d, 0x39,
	0x48, 0xea, 0xaa, 0x39, 0xe4, 0x70, 0xce, 0xe3, 0x17, 0xca, 0x47, 0xc7, 0xb0, 0x1d, 0x46, 0x3e,
	0xe5, 0x7a, 0xae, 0x9a, 0x3e, 0x2a, 0x9c, 0xec, 0xaf, 0xf7, 0x8c, 0x23, 0x9f, 0xb6, 0xc8, 0x84,
	0xf8, 0x0e, 0xc5, 0x31, 0xb3, 0xf6, 0x16, 0x0a, 0x4b, 0x28, 0x2a, 0x41, 0x6a, 0xd1, 0x74, 0xca,
	0x73, 0x97, 0x9a, 0x88, 0x65, 0x98, 0x78, 0xb5, 0x3a, 0x64, 0xe5, 0xb1, 0xae, 0x2b, 0x95, 0xa2,
	0x14, 0x97, 0xc8, 0x37, 0x76, 0xe4, 0x3d, 0x62, 0xa6, 0xce, 0x14, 0x71, 0x4a, 0xcc, 0x6a, 0x16,
	0x6c, 0xb7, 0x5d, 0xcf, 0x11, 0xe8, 0xf5, 0x22, 0x41, 0xe1, 0x64, 0x77, 0x53, 0x7d, 0x5d, 0xf7,
	0xbf, 0x12, 0x4b, 0x9c, 0x45, 0x22, 0x88, 0xe2, 0x2f, 0xa0, 0x88, 0x13, 0xaf, 0xf6, 0x83, 0x06,
	0x25, 0xf3, 0xbc, 0x73, 0x4d, 0x42, 0xe1, 0x39, 0x5e, 0x40, 0x7c, 0x35, 0x9a, 0x29, 0xf3, 0xbd,
	0x5b, 0x1a, 0xce, 0x05, 0x96, 0xb8, 0xe8, 0x73, 0x28, 0xb3, 0x80, 0x86, 0x44, 0xb0, 0xd0, 0x9a,
	0x4f, 0x2f, 0x4e, 0xf3, 0x62, 0x8e, 0x37, 0x93, 0x29, 0x7e, 0x01, 0x2f, 0x1d, 0xe6, 0x73, 0xea,
	0xf3, 0x88, 0x5b, 0xab, 0x93, 0x2e, 0x2f, 0x02, 0x09, 0xb9, 0xf6, 0x6b, 0x1a, 0xc0, 0x3c, 0xef,
	0xcc, 0x15, 0xfe, 0xf4, 0x98, 0x19, 0xd5, 0x53, 0x0b, 0x9e, 0x07, 0x4f, 0xf5, 0xc9, 0x94, 0x72,
	0x4a, 0xc6, 0xfa, 0x2b, 0xac, 0xb6, 0x81, 0x57, 0xce, 0xa0, 0x03, 0xc8, 0x8b, 0x71, 0x48, 0xf9,
	0x98, 0x4d, 0xdc, 0xe4, 0x09, 0x9e, 0x00, 0xf4, 0x35, 0x14, 0xee, 0x48, 0x34, 0x11, 0x96, 0xb8,
	0x0f, 0x28, 0xd7, 0x33, 0xd5, 0xf4, 0x51, 0xe9, 0x64, 0x6f, 0x3d, 0x41, 0x93, 0x73, 0x2a, 0x06,
	0xf7, 0x01, 0xc5, 0xa0, 0xd8, 0xd2, 0xe4, 0xe8, 0x53, 0x28, 0xb9, 0x1e, 0x27, 0xf6, 0x84, 0x5a,
	0x31, 0x4f, 0xe9, 0x33, 0x87, 0x8b, 0x09, 0xda, 0x52, 0x20, 0xfa, 0x0c, 0x5e, 0x50, 0x5f, 0xb1,
	0x44, 0x48, 0x7c, 0x7e, 0x43, 0x43, 0xa5, 0xd3, 0x1c, 0x2e, 0xc5, 0xf0, 0x20, 0x41, 0xd1, 0x6b,
	0x78, 0x21, 0x48, 0x38, 0xa2, 0xc2, 0x8a, 0xc4, 0x8c, 0x59, 0x7e, 0x34, 0x55, 0x7a, 0x2d, 0xe2,
	0x62, 0x0c, 0x0f, 0xc5, 0x8c, 0xf5, 0xa2, 0x29, 0xda, 0x83, 0xdc, 0x0d, 0xa5, 0x56, 0x48, 0x44,
	0xbc, 0x44, 0xf2, 0xf8, 0xd9, 0x0d, 0xa5, 0x98, 0x08, 0x8a, 0x4c, 0x00, 0x3a, 0x0b, 0xbc, 0x90,
	0x08, 0xb9, 0x1f, 0xf3, 0x4a, 0x34, 0x95, 0x7a, 0xbc, 0xba, 0xeb, 0xf3, 0xd5, 0x5d, 0x1f, 0xcc,
	0x57, 0x77, 0x2b, 0xf7, 0xe1, 0xf7, 0x43, 0xed, 0xfd, 0x1f, 0x87, 0x1a, 0x5e, 0x3a, 0x87, 0xbe,
	0x5a, 0xac, 0x02, 0x50, 0xab, 0xa0, 0xba, 0xe1, 0xc1, 0x93, 0x91, 0xad, 0x6d, 0x83, 0x1f, 0x35,
	0xd8, 0x31, 0xcf, 0x3b, 0xa7, 0x6c, 0x1a, 0x4c, 0xa8, 0xbc, 0xeb, 0xdf, 0x26, 0xbb, 0x0b, 0x59,
	0x4e, 0x7d, 0x97, 0x86, 0x73, 0xb5, 0xc6, 0x9e, 0xc4, 0xd5, 0x0b, 0x4b, 0xc9, 0xa4, 0x25, 0x1e,
	0x7b, 0x9b, 0x55, 0x95, 0xd9, 0xac, 0x2a, 0x39, 0x72, 0xee, 0x8d, 0x7c, 0x22, 0xa2, 0x90, 0x26,
	0xab, 0xfa, 0x09, 0x78, 0xf3, 0x93, 0x06, 0xc5, 0x95, 0x5d, 0x86, 0x0c, 0xa8, 0xf4, 0xbb, 0x9d,
	0x5e, 0xb7, 0xd7, 0xb1, 0xfa, 0x83, 0xe6, 0x60, 0xd8, 0xb7, 0x86, 0xbd, 0xfe, 0x75, 0xfb, 0xb4,
	0x7b, 0xd6, 0x6d, 0x9b, 0xe5, 0x2d, 0x54, 0x81, 0xdd, 0xb5, 0xf8, 0x75, 0xbb, 0x67, 0x76, 0x7b,
	0x9d, 0xb2, 0xb6, 0xe1, 0x6c, 0x0b, 0x5f, 0x35, 0xcd, 0xd3, 0x66, 0x7f, 0xd0, 0x36, 0xcb, 0x29,
	0x74, 0x00, 0xfa, 0x5a, 0xfc, 0xf4, 0xaa, 0x77, 0xd6, 0xc5, 0x97, 0x6d, 0xb3, 0x9c, 0x46, 0x7b,
	0xf0, 0xff, 0xb5, 0xe8, 0x59, 0xb3, 0x7b, 0xd1, 0x36, 0xcb, 0x99, 0x37, 0xbf, 0x68, 0x50, 0x5e,
	0x7f, 0x67, 0x54, 0x03, 0xc3, 0x3c, 0xef, 0x58, 0xb8, 0xfd, 0xcd, 0xb0, 0xdd, 0x1f, 0x6c, 0xae,
	0xd6, 0x80, 0xca, 0x06, 0xce, 0x53, 0xc5, 0x55, 0x38, 0xd8, 0x10, 0x3f, 0xbd, 0xba, 0xbc, 0xbe,
	0x68, 0xc7, 0x35, 0xbf, 0x82, 0xbd, 0x0d, 0x8c, 0xa4, 0xb2, 0x34, 0x3a, 0x84, 0xfd, 0x0d, 0xe1,
	0x41, 0xf7, 0xb2, 0x6d, 0x5e, 0x0d, 0x07, 0xe5, 0x4c, 0xeb, 0xdd, 0x87, 0x07, 0x43, 0xfb, 0xf8,
	0x60, 0x68, 0x7f, 0x3e, 0x18, 0xda, 0xfb, 0x47, 0x63, 0xeb, 0xe3, 0xa3, 0xb1, 0xf5, 0xdb, 0xa3,
	0xb1, 0xf5, 0x5d, 0x7d, 0xe4, 0x89, 0x71, 0x64, 0xd7, 0x1d, 0x36, 0x6d, 0x48, 0x4d, 0x29, 0x49,
	0x3a, 0x6c, 0xa2, 0x9c, 0xc6, 0x6c, 0xe9, 0x1f, 0x40, 0x7d, 0x8f, 0x76, 0x56, 0x11, 0xbe, 0xfc,
	0x27, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xd7, 0xdd, 0x31, 0xdf, 0x08, 0x00, 0x00,
}

func (m *BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ntx != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Ntx))
		i--
		dAtA[i] = 0x48
	}
	if m.Time != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Bits) > 0 {
		i -= len(m.Bits)
		copy(dAtA[i:], m.Bits)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Bits)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Nonce != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MerkleRoot) > 0 {
		i -= len(m.MerkleRoot)
		copy(dAtA[i:], m.MerkleRoot)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.MerkleRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreviousBlockHash) > 0 {
		i -= len(m.PreviousBlockHash)
		copy(dAtA[i:], m.PreviousBlockHash)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.PreviousBlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SigningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Psbt) > 0 {
		i -= len(m.Psbt)
		copy(dAtA[i:], m.Psbt)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Psbt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Sequence != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UTXO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UTXO) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UTXO) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Runes) > 0 {
		for iNdEx := len(m.Runes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Runes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBtcbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.IsLocked {
		i--
		if m.IsLocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.PubKeyScript) > 0 {
		i -= len(m.PubKeyScript)
		copy(dAtA[i:], m.PubKeyScript)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.PubKeyScript)))
		i--
		dAtA[i] = 0x32
	}
	if m.Height != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Vout != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Vout))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuneBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuneBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuneBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuneId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuneId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuneId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tx != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Tx))
		i--
		dAtA[i] = 0x10
	}
	if m.Block != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Output))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBtcbridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DKGParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsensusAddress) > 0 {
		i -= len(m.ConsensusAddress)
		copy(dAtA[i:], m.ConsensusAddress)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.ConsensusAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DKGRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if m.Expiration != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Expiration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiration):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintBtcbridge(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FeeRate) > 0 {
		i -= len(m.FeeRate)
		copy(dAtA[i:], m.FeeRate)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.FeeRate)))
		i--
		dAtA[i] = 0x42
	}
	if m.TargetUtxoNum != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.TargetUtxoNum))
		i--
		dAtA[i] = 0x38
	}
	if m.EnableTransfer {
		i--
		if m.EnableTransfer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DisableBridge {
		i--
		if m.DisableBridge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.VaultTypes) > 0 {
		dAtA4 := make([]byte, len(m.VaultTypes)*10)
		var j3 int
		for _, num := range m.VaultTypes {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintBtcbridge(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if m.Threshold != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBtcbridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DKGCompletionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGCompletionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGCompletionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConsensusAddress) > 0 {
		i -= len(m.ConsensusAddress)
		copy(dAtA[i:], m.ConsensusAddress)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.ConsensusAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Vaults[iNdEx])
			copy(dAtA[i:], m.Vaults[iNdEx])
			i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Vaults[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintBtcbridge(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBtcbridge(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBtcbridge(dAtA []byte, offset int, v uint64) int {
	offset -= sovBtcbridge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBtcbridge(uint64(m.Version))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBtcbridge(uint64(m.Height))
	}
	l = len(m.PreviousBlockHash)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovBtcbridge(uint64(m.Nonce))
	}
	l = len(m.Bits)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovBtcbridge(uint64(m.Time))
	}
	if m.Ntx != 0 {
		n += 1 + sovBtcbridge(uint64(m.Ntx))
	}
	return n
}

func (m *SigningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovBtcbridge(uint64(m.Sequence))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.Psbt)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBtcbridge(uint64(m.Status))
	}
	return n
}

func (m *UTXO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Vout != 0 {
		n += 1 + sovBtcbridge(uint64(m.Vout))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovBtcbridge(uint64(m.Amount))
	}
	if m.Height != 0 {
		n += 1 + sovBtcbridge(uint64(m.Height))
	}
	l = len(m.PubKeyScript)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.IsLocked {
		n += 2
	}
	if len(m.Runes) > 0 {
		for _, e := range m.Runes {
			l = e.Size()
			n += 1 + l + sovBtcbridge(uint64(l))
		}
	}
	return n
}

func (m *RuneBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	return n
}

func (m *RuneId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovBtcbridge(uint64(m.Block))
	}
	if m.Tx != 0 {
		n += 1 + sovBtcbridge(uint64(m.Tx))
	}
	return n
}

func (m *Edict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Output != 0 {
		n += 1 + sovBtcbridge(uint64(m.Output))
	}
	return n
}

func (m *DKGParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.ConsensusAddress)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	return n
}

func (m *DKGRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBtcbridge(uint64(m.Id))
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovBtcbridge(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovBtcbridge(uint64(m.Threshold))
	}
	if len(m.VaultTypes) > 0 {
		l = 0
		for _, e := range m.VaultTypes {
			l += sovBtcbridge(uint64(e))
		}
		n += 1 + sovBtcbridge(uint64(l)) + l
	}
	if m.DisableBridge {
		n += 2
	}
	if m.EnableTransfer {
		n += 2
	}
	if m.TargetUtxoNum != 0 {
		n += 1 + sovBtcbridge(uint64(m.TargetUtxoNum))
	}
	l = len(m.FeeRate)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Expiration != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiration)
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBtcbridge(uint64(m.Status))
	}
	return n
}

func (m *DKGCompletionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBtcbridge(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	if len(m.Vaults) > 0 {
		for _, s := range m.Vaults {
			l = len(s)
			n += 1 + l + sovBtcbridge(uint64(l))
		}
	}
	l = len(m.ConsensusAddress)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBtcbridge(uint64(l))
	}
	return n
}

func sovBtcbridge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBtcbridge(x uint64) (n int) {
	return sovBtcbridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ntx", wireType)
			}
			m.Ntx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ntx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psbt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Psbt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SigningStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UTXO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UTXO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UTXO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vout", wireType)
			}
			m.Vout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeyScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeyScript = append(m.PubKeyScript[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKeyScript == nil {
				m.PubKeyScript = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocked = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runes = append(m.Runes, &RuneBalance{})
			if err := m.Runes[len(m.Runes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuneBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuneId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			m.Tx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Edict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Edict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &RuneId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			m.Output = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Output |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &DKGParticipant{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v AssetType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBtcbridge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AssetType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VaultTypes = append(m.VaultTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBtcbridge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBtcbridge
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBtcbridge
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.VaultTypes) == 0 {
					m.VaultTypes = make([]AssetType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AssetType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBtcbridge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AssetType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VaultTypes = append(m.VaultTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultTypes", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBridge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableBridge = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTransfer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTransfer = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUtxoNum", wireType)
			}
			m.TargetUtxoNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUtxoNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiration == nil {
				m.Expiration = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DKGRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGCompletionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGCompletionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGCompletionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcbridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcbridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcbridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBtcbridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBtcbridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBtcbridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBtcbridge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBtcbridge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBtcbridge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBtcbridge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBtcbridge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBtcbridge = fmt.Errorf("proto: unexpected end of group")
)
