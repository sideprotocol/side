// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/btcbridge/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AssetType defines the type of asset
type AssetType int32

const (
	// Unspecified asset type
	AssetType_ASSET_TYPE_UNSPECIFIED AssetType = 0
	// BTC
	AssetType_ASSET_TYPE_BTC AssetType = 1
	// BRC20: ordi, sats
	AssetType_ASSET_TYPE_BRC20 AssetType = 2
	// RUNE: dog•go•to•the•moon
	AssetType_ASSET_TYPE_RUNES AssetType = 3
)

var AssetType_name = map[int32]string{
	0: "ASSET_TYPE_UNSPECIFIED",
	1: "ASSET_TYPE_BTC",
	2: "ASSET_TYPE_BRC20",
	3: "ASSET_TYPE_RUNES",
}

var AssetType_value = map[string]int32{
	"ASSET_TYPE_UNSPECIFIED": 0,
	"ASSET_TYPE_BTC":         1,
	"ASSET_TYPE_BRC20":       2,
	"ASSET_TYPE_RUNES":       3,
}

func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}

func (AssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1d33573cda8a6d2, []int{0}
}

// Params defines the parameters for the module.
type Params struct {
	// The minimum number of confirmations required for the deposit transactions
	DepositConfirmationDepth int32 `protobuf:"varint,1,opt,name=deposit_confirmation_depth,json=depositConfirmationDepth,proto3" json:"deposit_confirmation_depth,omitempty"`
	// The minimum number of confirmations required for the withdrawal transactions
	WithdrawConfirmationDepth int32 `protobuf:"varint,2,opt,name=withdraw_confirmation_depth,json=withdrawConfirmationDepth,proto3" json:"withdraw_confirmation_depth,omitempty"`
	// The allowed maximum depth for bitcoin block reorganization
	MaxReorgDepth int32 `protobuf:"varint,3,opt,name=max_reorg_depth,json=maxReorgDepth,proto3" json:"max_reorg_depth,omitempty"`
	// Indicates the maximum depth or distance from the latest block up to which transactions are considered for acceptance.
	MaxAcceptableBlockDepth uint64 `protobuf:"varint,4,opt,name=max_acceptable_block_depth,json=maxAcceptableBlockDepth,proto3" json:"max_acceptable_block_depth,omitempty"`
	// The denomination of the voucher
	BtcVoucherDenom string `protobuf:"bytes,5,opt,name=btc_voucher_denom,json=btcVoucherDenom,proto3" json:"btc_voucher_denom,omitempty"`
	// Indicates if deposit is enabled
	DepositEnabled bool `protobuf:"varint,6,opt,name=deposit_enabled,json=depositEnabled,proto3" json:"deposit_enabled,omitempty"`
	// Indicates if withdrawal is enabled
	WithdrawEnabled bool `protobuf:"varint,7,opt,name=withdraw_enabled,json=withdrawEnabled,proto3" json:"withdraw_enabled,omitempty"`
	// Trusted relayers to submit bitcoin block headers
	TrustedBtcRelayers []string `protobuf:"bytes,8,rep,name=trusted_btc_relayers,json=trustedBtcRelayers,proto3" json:"trusted_btc_relayers,omitempty"`
	// Trusted relayers for non-btc asset deposit
	TrustedNonBtcRelayers []string `protobuf:"bytes,9,rep,name=trusted_non_btc_relayers,json=trustedNonBtcRelayers,proto3" json:"trusted_non_btc_relayers,omitempty"`
	// Trusted fee providers to submit bitcoin fee rate
	TrustedFeeProviders []string `protobuf:"bytes,10,rep,name=trusted_fee_providers,json=trustedFeeProviders,proto3" json:"trusted_fee_providers,omitempty"`
	// Period of validity for the fee rate
	FeeRateValidityPeriod int64 `protobuf:"varint,11,opt,name=fee_rate_validity_period,json=feeRateValidityPeriod,proto3" json:"fee_rate_validity_period,omitempty"`
	// Asset vaults
	Vaults []*Vault `protobuf:"bytes,12,rep,name=vaults,proto3" json:"vaults,omitempty"`
	// Withdrawal params
	WithdrawParams WithdrawParams `protobuf:"bytes,13,opt,name=withdraw_params,json=withdrawParams,proto3" json:"withdraw_params"`
	// Protocol limitations
	ProtocolLimits ProtocolLimits `protobuf:"bytes,14,opt,name=protocol_limits,json=protocolLimits,proto3" json:"protocol_limits"`
	// Protocol fees
	ProtocolFees ProtocolFees `protobuf:"bytes,15,opt,name=protocol_fees,json=protocolFees,proto3" json:"protocol_fees"`
	// TSS params
	TssParams TSSParams `protobuf:"bytes,16,opt,name=tss_params,json=tssParams,proto3" json:"tss_params"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1d33573cda8a6d2, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDepositConfirmationDepth() int32 {
	if m != nil {
		return m.DepositConfirmationDepth
	}
	return 0
}

func (m *Params) GetWithdrawConfirmationDepth() int32 {
	if m != nil {
		return m.WithdrawConfirmationDepth
	}
	return 0
}

func (m *Params) GetMaxReorgDepth() int32 {
	if m != nil {
		return m.MaxReorgDepth
	}
	return 0
}

func (m *Params) GetMaxAcceptableBlockDepth() uint64 {
	if m != nil {
		return m.MaxAcceptableBlockDepth
	}
	return 0
}

func (m *Params) GetBtcVoucherDenom() string {
	if m != nil {
		return m.BtcVoucherDenom
	}
	return ""
}

func (m *Params) GetDepositEnabled() bool {
	if m != nil {
		return m.DepositEnabled
	}
	return false
}

func (m *Params) GetWithdrawEnabled() bool {
	if m != nil {
		return m.WithdrawEnabled
	}
	return false
}

func (m *Params) GetTrustedBtcRelayers() []string {
	if m != nil {
		return m.TrustedBtcRelayers
	}
	return nil
}

func (m *Params) GetTrustedNonBtcRelayers() []string {
	if m != nil {
		return m.TrustedNonBtcRelayers
	}
	return nil
}

func (m *Params) GetTrustedFeeProviders() []string {
	if m != nil {
		return m.TrustedFeeProviders
	}
	return nil
}

func (m *Params) GetFeeRateValidityPeriod() int64 {
	if m != nil {
		return m.FeeRateValidityPeriod
	}
	return 0
}

func (m *Params) GetVaults() []*Vault {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *Params) GetWithdrawParams() WithdrawParams {
	if m != nil {
		return m.WithdrawParams
	}
	return WithdrawParams{}
}

func (m *Params) GetProtocolLimits() ProtocolLimits {
	if m != nil {
		return m.ProtocolLimits
	}
	return ProtocolLimits{}
}

func (m *Params) GetProtocolFees() ProtocolFees {
	if m != nil {
		return m.ProtocolFees
	}
	return ProtocolFees{}
}

func (m *Params) GetTssParams() TSSParams {
	if m != nil {
		return m.TssParams
	}
	return TSSParams{}
}

// Vault defines the asset vault
type Vault struct {
	// the vault address for deposit
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// public key of the vault
	PubKey string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// the asset type supported by the vault
	AssetType AssetType `protobuf:"varint,3,opt,name=asset_type,json=assetType,proto3,enum=side.btcbridge.AssetType" json:"asset_type,omitempty"`
	// version
	Version uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Vault) Reset()         { *m = Vault{} }
func (m *Vault) String() string { return proto.CompactTextString(m) }
func (*Vault) ProtoMessage()    {}
func (*Vault) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1d33573cda8a6d2, []int{1}
}
func (m *Vault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vault.Merge(m, src)
}
func (m *Vault) XXX_Size() int {
	return m.Size()
}
func (m *Vault) XXX_DiscardUnknown() {
	xxx_messageInfo_Vault.DiscardUnknown(m)
}

var xxx_messageInfo_Vault proto.InternalMessageInfo

func (m *Vault) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Vault) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *Vault) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (m *Vault) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type WithdrawParams struct {
	// Maximum number of utxos used to build the signing request; O means unlimited
	MaxUtxoNum uint32 `protobuf:"varint,1,opt,name=max_utxo_num,json=maxUtxoNum,proto3" json:"max_utxo_num,omitempty"`
	// Period for handling btc withdrawal requests
	BtcBatchWithdrawPeriod int64 `protobuf:"varint,2,opt,name=btc_batch_withdraw_period,json=btcBatchWithdrawPeriod,proto3" json:"btc_batch_withdraw_period,omitempty"`
	// Maximum number of btc withdrawal requests to be handled per batch
	MaxBtcBatchWithdrawNum uint32 `protobuf:"varint,3,opt,name=max_btc_batch_withdraw_num,json=maxBtcBatchWithdrawNum,proto3" json:"max_btc_batch_withdraw_num,omitempty"`
}

func (m *WithdrawParams) Reset()         { *m = WithdrawParams{} }
func (m *WithdrawParams) String() string { return proto.CompactTextString(m) }
func (*WithdrawParams) ProtoMessage()    {}
func (*WithdrawParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1d33573cda8a6d2, []int{2}
}
func (m *WithdrawParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawParams.Merge(m, src)
}
func (m *WithdrawParams) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawParams) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawParams.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawParams proto.InternalMessageInfo

func (m *WithdrawParams) GetMaxUtxoNum() uint32 {
	if m != nil {
		return m.MaxUtxoNum
	}
	return 0
}

func (m *WithdrawParams) GetBtcBatchWithdrawPeriod() int64 {
	if m != nil {
		return m.BtcBatchWithdrawPeriod
	}
	return 0
}

func (m *WithdrawParams) GetMaxBtcBatchWithdrawNum() uint32 {
	if m != nil {
		return m.MaxBtcBatchWithdrawNum
	}
	return 0
}

// ProtocolLimits defines the params related to the the protocol limitations
type ProtocolLimits struct {
	// The minimum deposit amount for btc in sat
	BtcMinDeposit int64 `protobuf:"varint,1,opt,name=btc_min_deposit,json=btcMinDeposit,proto3" json:"btc_min_deposit,omitempty"`
	// The minimum withdrawal amount for btc in sat
	BtcMinWithdraw int64 `protobuf:"varint,2,opt,name=btc_min_withdraw,json=btcMinWithdraw,proto3" json:"btc_min_withdraw,omitempty"`
	// The maximum withdrawal amount for btc in sat
	BtcMaxWithdraw int64 `protobuf:"varint,3,opt,name=btc_max_withdraw,json=btcMaxWithdraw,proto3" json:"btc_max_withdraw,omitempty"`
}

func (m *ProtocolLimits) Reset()         { *m = ProtocolLimits{} }
func (m *ProtocolLimits) String() string { return proto.CompactTextString(m) }
func (*ProtocolLimits) ProtoMessage()    {}
func (*ProtocolLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1d33573cda8a6d2, []int{3}
}
func (m *ProtocolLimits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtocolLimits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtocolLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolLimits.Merge(m, src)
}
func (m *ProtocolLimits) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolLimits.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolLimits proto.InternalMessageInfo

func (m *ProtocolLimits) GetBtcMinDeposit() int64 {
	if m != nil {
		return m.BtcMinDeposit
	}
	return 0
}

func (m *ProtocolLimits) GetBtcMinWithdraw() int64 {
	if m != nil {
		return m.BtcMinWithdraw
	}
	return 0
}

func (m *ProtocolLimits) GetBtcMaxWithdraw() int64 {
	if m != nil {
		return m.BtcMaxWithdraw
	}
	return 0
}

// ProtocolFees defines the params related to the protocol fees
type ProtocolFees struct {
	// Protocol fee amount for deposit in sat
	DepositFee int64 `protobuf:"varint,1,opt,name=deposit_fee,json=depositFee,proto3" json:"deposit_fee,omitempty"`
	// Protocol fee amount for withdrawal in sat
	WithdrawFee int64 `protobuf:"varint,2,opt,name=withdraw_fee,json=withdrawFee,proto3" json:"withdraw_fee,omitempty"`
	// Protocol fee collector
	Collector string `protobuf:"bytes,3,opt,name=collector,proto3" json:"collector,omitempty"`
}

func (m *ProtocolFees) Reset()         { *m = ProtocolFees{} }
func (m *ProtocolFees) String() string { return proto.CompactTextString(m) }
func (*ProtocolFees) ProtoMessage()    {}
func (*ProtocolFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1d33573cda8a6d2, []int{4}
}
func (m *ProtocolFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtocolFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtocolFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolFees.Merge(m, src)
}
func (m *ProtocolFees) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolFees) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolFees.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolFees proto.InternalMessageInfo

func (m *ProtocolFees) GetDepositFee() int64 {
	if m != nil {
		return m.DepositFee
	}
	return 0
}

func (m *ProtocolFees) GetWithdrawFee() int64 {
	if m != nil {
		return m.WithdrawFee
	}
	return 0
}

func (m *ProtocolFees) GetCollector() string {
	if m != nil {
		return m.Collector
	}
	return ""
}

// TSSParams defines the params related to TSS
type TSSParams struct {
	// Timeout duration for DKG request
	DkgTimeoutPeriod time.Duration `protobuf:"bytes,1,opt,name=dkg_timeout_period,json=dkgTimeoutPeriod,proto3,stdduration" json:"dkg_timeout_period"`
	// Transition period after which TSS participants update process is completed
	ParticipantUpdateTransitionPeriod time.Duration `protobuf:"bytes,2,opt,name=participant_update_transition_period,json=participantUpdateTransitionPeriod,proto3,stdduration" json:"participant_update_transition_period"`
}

func (m *TSSParams) Reset()         { *m = TSSParams{} }
func (m *TSSParams) String() string { return proto.CompactTextString(m) }
func (*TSSParams) ProtoMessage()    {}
func (*TSSParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1d33573cda8a6d2, []int{5}
}
func (m *TSSParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSSParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSSParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSSParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSSParams.Merge(m, src)
}
func (m *TSSParams) XXX_Size() int {
	return m.Size()
}
func (m *TSSParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TSSParams.DiscardUnknown(m)
}

var xxx_messageInfo_TSSParams proto.InternalMessageInfo

func (m *TSSParams) GetDkgTimeoutPeriod() time.Duration {
	if m != nil {
		return m.DkgTimeoutPeriod
	}
	return 0
}

func (m *TSSParams) GetParticipantUpdateTransitionPeriod() time.Duration {
	if m != nil {
		return m.ParticipantUpdateTransitionPeriod
	}
	return 0
}

func init() {
	proto.RegisterEnum("side.btcbridge.AssetType", AssetType_name, AssetType_value)
	proto.RegisterType((*Params)(nil), "side.btcbridge.Params")
	proto.RegisterType((*Vault)(nil), "side.btcbridge.Vault")
	proto.RegisterType((*WithdrawParams)(nil), "side.btcbridge.WithdrawParams")
	proto.RegisterType((*ProtocolLimits)(nil), "side.btcbridge.ProtocolLimits")
	proto.RegisterType((*ProtocolFees)(nil), "side.btcbridge.ProtocolFees")
	proto.RegisterType((*TSSParams)(nil), "side.btcbridge.TSSParams")
}

func init() { proto.RegisterFile("side/btcbridge/params.proto", fileDescriptor_f1d33573cda8a6d2) }

var fileDescriptor_f1d33573cda8a6d2 = []byte{
	// 1027 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcf, 0x6e, 0xe3, 0x44,
	0x18, 0xaf, 0x37, 0xfd, 0xe7, 0x69, 0x9b, 0x86, 0xa1, 0xed, 0xba, 0xdd, 0x55, 0x9a, 0x8d, 0x10,
	0x84, 0x95, 0x48, 0x76, 0xcb, 0x81, 0xbf, 0x5a, 0xa9, 0x69, 0x53, 0x58, 0xc1, 0x56, 0xc1, 0x49,
	0x8b, 0xe0, 0x32, 0x1a, 0xdb, 0x5f, 0xd2, 0x51, 0x63, 0x8f, 0xe5, 0x19, 0xa7, 0xc9, 0x3b, 0x20,
	0xc4, 0x11, 0x1e, 0x81, 0x37, 0xd9, 0xe3, 0x1e, 0x38, 0x70, 0x02, 0xd4, 0xbe, 0x08, 0x9a, 0xb1,
	0xc7, 0x4d, 0xba, 0x45, 0xe2, 0x66, 0xff, 0xfe, 0x7d, 0x63, 0xcf, 0xf7, 0xcd, 0xa0, 0x47, 0x82,
	0x05, 0xd0, 0xf2, 0xa4, 0xef, 0x25, 0x2c, 0x18, 0x42, 0x2b, 0xa6, 0x09, 0x0d, 0x45, 0x33, 0x4e,
	0xb8, 0xe4, 0xb8, 0xac, 0xc8, 0x66, 0x41, 0xee, 0x6d, 0x0d, 0xf9, 0x90, 0x6b, 0xaa, 0xa5, 0x9e,
	0x32, 0xd5, 0x5e, 0x75, 0xc8, 0xf9, 0x70, 0x04, 0x2d, 0xfd, 0xe6, 0xa5, 0x83, 0x56, 0x90, 0x26,
	0x54, 0x32, 0x1e, 0x19, 0xde, 0xe7, 0x22, 0xe4, 0xa2, 0xe5, 0x51, 0x01, 0xad, 0xf1, 0x73, 0x0f,
	0x24, 0x7d, 0xde, 0xf2, 0x39, 0xcb, 0xf9, 0xfa, 0x6f, 0x2b, 0x68, 0xb9, 0xab, 0xcb, 0xe2, 0x2f,
	0xd1, 0x5e, 0x00, 0x31, 0x17, 0x4c, 0x12, 0x9f, 0x47, 0x03, 0x96, 0x84, 0x3a, 0x88, 0x04, 0x10,
	0xcb, 0x0b, 0xc7, 0xaa, 0x59, 0x8d, 0x25, 0xd7, 0xc9, 0x15, 0x47, 0x33, 0x82, 0x63, 0xc5, 0xe3,
	0x17, 0xe8, 0xd1, 0x15, 0x93, 0x17, 0x41, 0x42, 0xaf, 0xee, 0xb3, 0x3f, 0xd0, 0xf6, 0x5d, 0x23,
	0x79, 0xdb, 0xff, 0x3e, 0xda, 0x0c, 0xe9, 0x84, 0x24, 0xc0, 0x93, 0x61, 0xee, 0x29, 0x69, 0xcf,
	0x46, 0x48, 0x27, 0xae, 0x42, 0x33, 0xdd, 0x17, 0x68, 0x4f, 0xe9, 0xa8, 0xef, 0x43, 0x2c, 0xa9,
	0x37, 0x02, 0xe2, 0x8d, 0xb8, 0x7f, 0x99, 0x5b, 0x16, 0x6b, 0x56, 0x63, 0xd1, 0x7d, 0x18, 0xd2,
	0xc9, 0x61, 0x21, 0x68, 0x2b, 0x3e, 0x33, 0x3f, 0x45, 0xef, 0x78, 0xd2, 0x27, 0x63, 0x9e, 0xfa,
	0x17, 0x90, 0x90, 0x00, 0x22, 0x1e, 0x3a, 0x4b, 0x35, 0xab, 0x61, 0xbb, 0x9b, 0x9e, 0xf4, 0xcf,
	0x33, 0xfc, 0x58, 0xc1, 0xf8, 0x03, 0xb4, 0x69, 0x7e, 0x07, 0x44, 0x2a, 0x27, 0x70, 0x96, 0x6b,
	0x56, 0x63, 0xd5, 0x2d, 0xe7, 0x70, 0x27, 0x43, 0xf1, 0x87, 0xa8, 0x52, 0x7c, 0xb9, 0x51, 0xae,
	0x68, 0xe5, 0xa6, 0xc1, 0x8d, 0xf4, 0x19, 0xda, 0x92, 0x49, 0x2a, 0x24, 0x04, 0x44, 0xad, 0x23,
	0x81, 0x11, 0x9d, 0x42, 0x22, 0x9c, 0xd5, 0x5a, 0xa9, 0x61, 0xbb, 0x38, 0xe7, 0xda, 0xd2, 0x77,
	0x73, 0x06, 0x7f, 0x82, 0x1c, 0xe3, 0x88, 0x78, 0x34, 0xef, 0xb2, 0xb5, 0x6b, 0x3b, 0xe7, 0x4f,
	0x79, 0x34, 0x6b, 0x3c, 0x40, 0x86, 0x20, 0x03, 0x00, 0x12, 0x27, 0x7c, 0xcc, 0x02, 0xe5, 0x42,
	0xda, 0xf5, 0x6e, 0x4e, 0x9e, 0x00, 0x74, 0x0d, 0xa5, 0x8a, 0x29, 0x6d, 0x42, 0x25, 0x90, 0x31,
	0x1d, 0xb1, 0x80, 0xc9, 0x29, 0x89, 0x21, 0x61, 0x3c, 0x70, 0xd6, 0x6a, 0x56, 0xa3, 0xe4, 0x6e,
	0x0f, 0x00, 0x5c, 0x2a, 0xe1, 0x3c, 0x67, 0xbb, 0x9a, 0xc4, 0x1f, 0xa1, 0xe5, 0x31, 0x4d, 0x47,
	0x52, 0x38, 0xeb, 0xb5, 0x52, 0x63, 0xed, 0x60, 0xbb, 0x39, 0xdf, 0xbc, 0xcd, 0x73, 0xc5, 0xba,
	0xb9, 0x08, 0xbf, 0x42, 0xc5, 0x9f, 0x21, 0x59, 0xcf, 0x3b, 0x1b, 0x35, 0xab, 0xb1, 0x76, 0x50,
	0xbd, 0xeb, 0xfb, 0x3e, 0x97, 0x65, 0x2d, 0xda, 0x5e, 0x7c, 0xfd, 0xd7, 0xfe, 0x82, 0x5b, 0xbe,
	0x9a, 0x43, 0x55, 0x9c, 0x6e, 0x66, 0x9f, 0x8f, 0xc8, 0x88, 0x85, 0x4c, 0x0a, 0xa7, 0x7c, 0x7f,
	0x5c, 0x37, 0x97, 0x7d, 0xab, 0x55, 0x26, 0x2e, 0x9e, 0x43, 0xf1, 0x57, 0x68, 0xa3, 0x88, 0x1b,
	0x00, 0x08, 0x67, 0x53, 0x87, 0x3d, 0xfe, 0xaf, 0xb0, 0x13, 0x00, 0x13, 0xb5, 0x1e, 0xcf, 0x60,
	0xf8, 0x05, 0x42, 0x52, 0x08, 0xf3, 0x85, 0x15, 0x9d, 0xb2, 0x7b, 0x37, 0xa5, 0xdf, 0xeb, 0xcd,
	0x7d, 0x9c, 0x2d, 0x85, 0xc8, 0x80, 0xfa, 0xcf, 0x16, 0x5a, 0xd2, 0x3f, 0x0e, 0x3b, 0x68, 0x85,
	0x06, 0x41, 0x02, 0x42, 0xe8, 0x39, 0xb4, 0x5d, 0xf3, 0x8a, 0x1f, 0xa2, 0x95, 0x38, 0xf5, 0xc8,
	0x25, 0x4c, 0xf5, 0x88, 0xd9, 0xee, 0x72, 0x9c, 0x7a, 0xdf, 0xc0, 0x14, 0x7f, 0x8a, 0x10, 0x15,
	0x02, 0x24, 0x91, 0xd3, 0x18, 0xf4, 0x28, 0x95, 0xdf, 0x2e, 0x7e, 0xa8, 0x14, 0xfd, 0x69, 0x0c,
	0xae, 0x4d, 0xcd, 0xa3, 0x2a, 0x36, 0x86, 0x44, 0x30, 0x1e, 0xe5, 0xe3, 0x64, 0x5e, 0xeb, 0xbf,
	0x5b, 0xa8, 0x3c, 0xbf, 0x23, 0xb8, 0x86, 0xd6, 0xd5, 0x38, 0xa6, 0x72, 0xc2, 0x49, 0x94, 0x86,
	0x7a, 0x79, 0x1b, 0x2e, 0x0a, 0xe9, 0xe4, 0x4c, 0x4e, 0xf8, 0x69, 0x1a, 0xe2, 0xcf, 0xd0, 0xae,
	0xea, 0x5a, 0x8f, 0x4a, 0xff, 0x82, 0xdc, 0x6e, 0x7b, 0xd6, 0x55, 0x0f, 0x74, 0x57, 0xed, 0x78,
	0xd2, 0x6f, 0x2b, 0xbe, 0x08, 0xcf, 0xda, 0xea, 0xf3, 0x6c, 0xd6, 0xef, 0xb1, 0xab, 0x52, 0x25,
	0x5d, 0x6a, 0x27, 0xa4, 0x93, 0xf6, 0x1d, 0xfb, 0x69, 0x1a, 0xd6, 0x7f, 0xb2, 0x50, 0x79, 0x7e,
	0xbb, 0xd5, 0x11, 0xa3, 0xa2, 0x42, 0xa6, 0x0f, 0x25, 0x35, 0xc2, 0x7a, 0xb9, 0x25, 0x77, 0xc3,
	0x93, 0xfe, 0x2b, 0xa6, 0x0e, 0x22, 0x05, 0xe2, 0x06, 0xaa, 0x18, 0x9d, 0x29, 0x98, 0x2f, 0xb4,
	0x9c, 0x09, 0x4d, 0x9d, 0x42, 0x49, 0x27, 0xb7, 0xca, 0xd2, 0xad, 0x92, 0x4e, 0x8c, 0xb2, 0x1e,
	0xa3, 0xf5, 0xd9, 0x7e, 0xc1, 0xfb, 0x68, 0xcd, 0x9c, 0x2e, 0x03, 0x80, 0x7c, 0x1d, 0x28, 0x87,
	0x4e, 0x00, 0xf0, 0x13, 0xb4, 0x5e, 0x7c, 0xad, 0x52, 0x64, 0x0b, 0x58, 0x33, 0x98, 0x92, 0x3c,
	0x46, 0xb6, 0xcf, 0x47, 0x23, 0xf0, 0x25, 0x4f, 0x74, 0x59, 0xdb, 0xbd, 0x05, 0xea, 0x7f, 0x58,
	0xc8, 0x2e, 0x9a, 0x0b, 0x7f, 0x87, 0x70, 0x70, 0x39, 0x24, 0x92, 0x85, 0xc0, 0x53, 0x69, 0x7e,
	0xbf, 0x95, 0xf7, 0x64, 0x76, 0x89, 0x34, 0xcd, 0x25, 0xd2, 0x3c, 0xce, 0x2f, 0x91, 0xf6, 0xaa,
	0xea, 0xc9, 0x5f, 0xff, 0xde, 0xb7, 0xdc, 0x4a, 0x70, 0x39, 0xec, 0x67, 0xee, 0x7c, 0x77, 0x24,
	0x7a, 0x2f, 0xa6, 0x89, 0x64, 0x3e, 0x8b, 0x69, 0x24, 0x49, 0x1a, 0x07, 0xea, 0xdc, 0x90, 0x09,
	0x8d, 0x04, 0xd3, 0x27, 0xff, 0xcc, 0x1e, 0xff, 0xcf, 0x22, 0x4f, 0x66, 0x02, 0xcf, 0x74, 0x5e,
	0xbf, 0x88, 0xcb, 0xaa, 0x3e, 0x1d, 0x22, 0xbb, 0xe8, 0x5a, 0xbc, 0x87, 0x76, 0x0e, 0x7b, 0xbd,
	0x4e, 0x9f, 0xf4, 0x7f, 0xe8, 0x76, 0xc8, 0xd9, 0x69, 0xaf, 0xdb, 0x39, 0x7a, 0x79, 0xf2, 0xb2,
	0x73, 0x5c, 0x59, 0xc0, 0x18, 0x95, 0x67, 0xb8, 0x76, 0xff, 0xa8, 0x62, 0xe1, 0x2d, 0x54, 0x99,
	0xc5, 0xdc, 0xa3, 0x83, 0x67, 0x95, 0x07, 0x77, 0x50, 0xf7, 0xec, 0xb4, 0xd3, 0xab, 0x94, 0xda,
	0x5f, 0xbf, 0xbe, 0xae, 0x5a, 0x6f, 0xae, 0xab, 0xd6, 0x3f, 0xd7, 0x55, 0xeb, 0x97, 0x9b, 0xea,
	0xc2, 0x9b, 0x9b, 0xea, 0xc2, 0x9f, 0x37, 0xd5, 0x85, 0x1f, 0x9b, 0x43, 0x26, 0x2f, 0x52, 0xaf,
	0xe9, 0xf3, 0xb0, 0xa5, 0x06, 0xca, 0x0c, 0xbd, 0x7e, 0x69, 0x4d, 0x66, 0x2e, 0x74, 0x35, 0x7b,
	0xc2, 0x5b, 0xd6, 0x82, 0x8f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xcb, 0xe3, 0x5e, 0xef,
	0x07, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TssParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.ProtocolFees.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.ProtocolLimits.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.WithdrawParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.FeeRateValidityPeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.FeeRateValidityPeriod))
		i--
		dAtA[i] = 0x58
	}
	if len(m.TrustedFeeProviders) > 0 {
		for iNdEx := len(m.TrustedFeeProviders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustedFeeProviders[iNdEx])
			copy(dAtA[i:], m.TrustedFeeProviders[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.TrustedFeeProviders[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TrustedNonBtcRelayers) > 0 {
		for iNdEx := len(m.TrustedNonBtcRelayers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustedNonBtcRelayers[iNdEx])
			copy(dAtA[i:], m.TrustedNonBtcRelayers[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.TrustedNonBtcRelayers[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.TrustedBtcRelayers) > 0 {
		for iNdEx := len(m.TrustedBtcRelayers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustedBtcRelayers[iNdEx])
			copy(dAtA[i:], m.TrustedBtcRelayers[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.TrustedBtcRelayers[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.WithdrawEnabled {
		i--
		if m.WithdrawEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DepositEnabled {
		i--
		if m.DepositEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.BtcVoucherDenom) > 0 {
		i -= len(m.BtcVoucherDenom)
		copy(dAtA[i:], m.BtcVoucherDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BtcVoucherDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxAcceptableBlockDepth != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxAcceptableBlockDepth))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxReorgDepth != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxReorgDepth))
		i--
		dAtA[i] = 0x18
	}
	if m.WithdrawConfirmationDepth != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.WithdrawConfirmationDepth))
		i--
		dAtA[i] = 0x10
	}
	if m.DepositConfirmationDepth != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DepositConfirmationDepth))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if m.AssetType != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxBtcBatchWithdrawNum != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxBtcBatchWithdrawNum))
		i--
		dAtA[i] = 0x18
	}
	if m.BtcBatchWithdrawPeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BtcBatchWithdrawPeriod))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxUtxoNum != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxUtxoNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtocolLimits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolLimits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtocolLimits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BtcMaxWithdraw != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BtcMaxWithdraw))
		i--
		dAtA[i] = 0x18
	}
	if m.BtcMinWithdraw != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BtcMinWithdraw))
		i--
		dAtA[i] = 0x10
	}
	if m.BtcMinDeposit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BtcMinDeposit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtocolFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtocolFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Collector) > 0 {
		i -= len(m.Collector)
		copy(dAtA[i:], m.Collector)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Collector)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WithdrawFee != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.WithdrawFee))
		i--
		dAtA[i] = 0x10
	}
	if m.DepositFee != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DepositFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TSSParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSSParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSSParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.ParticipantUpdateTransitionPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ParticipantUpdateTransitionPeriod):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintParams(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	n6, err6 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.DkgTimeoutPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.DkgTimeoutPeriod):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintParams(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepositConfirmationDepth != 0 {
		n += 1 + sovParams(uint64(m.DepositConfirmationDepth))
	}
	if m.WithdrawConfirmationDepth != 0 {
		n += 1 + sovParams(uint64(m.WithdrawConfirmationDepth))
	}
	if m.MaxReorgDepth != 0 {
		n += 1 + sovParams(uint64(m.MaxReorgDepth))
	}
	if m.MaxAcceptableBlockDepth != 0 {
		n += 1 + sovParams(uint64(m.MaxAcceptableBlockDepth))
	}
	l = len(m.BtcVoucherDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.DepositEnabled {
		n += 2
	}
	if m.WithdrawEnabled {
		n += 2
	}
	if len(m.TrustedBtcRelayers) > 0 {
		for _, s := range m.TrustedBtcRelayers {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.TrustedNonBtcRelayers) > 0 {
		for _, s := range m.TrustedNonBtcRelayers {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.TrustedFeeProviders) > 0 {
		for _, s := range m.TrustedFeeProviders {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.FeeRateValidityPeriod != 0 {
		n += 1 + sovParams(uint64(m.FeeRateValidityPeriod))
	}
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.WithdrawParams.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ProtocolLimits.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ProtocolFees.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.TssParams.Size()
	n += 2 + l + sovParams(uint64(l))
	return n
}

func (m *Vault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.AssetType != 0 {
		n += 1 + sovParams(uint64(m.AssetType))
	}
	if m.Version != 0 {
		n += 1 + sovParams(uint64(m.Version))
	}
	return n
}

func (m *WithdrawParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxUtxoNum != 0 {
		n += 1 + sovParams(uint64(m.MaxUtxoNum))
	}
	if m.BtcBatchWithdrawPeriod != 0 {
		n += 1 + sovParams(uint64(m.BtcBatchWithdrawPeriod))
	}
	if m.MaxBtcBatchWithdrawNum != 0 {
		n += 1 + sovParams(uint64(m.MaxBtcBatchWithdrawNum))
	}
	return n
}

func (m *ProtocolLimits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcMinDeposit != 0 {
		n += 1 + sovParams(uint64(m.BtcMinDeposit))
	}
	if m.BtcMinWithdraw != 0 {
		n += 1 + sovParams(uint64(m.BtcMinWithdraw))
	}
	if m.BtcMaxWithdraw != 0 {
		n += 1 + sovParams(uint64(m.BtcMaxWithdraw))
	}
	return n
}

func (m *ProtocolFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepositFee != 0 {
		n += 1 + sovParams(uint64(m.DepositFee))
	}
	if m.WithdrawFee != 0 {
		n += 1 + sovParams(uint64(m.WithdrawFee))
	}
	l = len(m.Collector)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *TSSParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.DkgTimeoutPeriod)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ParticipantUpdateTransitionPeriod)
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositConfirmationDepth", wireType)
			}
			m.DepositConfirmationDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositConfirmationDepth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawConfirmationDepth", wireType)
			}
			m.WithdrawConfirmationDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawConfirmationDepth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReorgDepth", wireType)
			}
			m.MaxReorgDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReorgDepth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAcceptableBlockDepth", wireType)
			}
			m.MaxAcceptableBlockDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAcceptableBlockDepth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcVoucherDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcVoucherDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DepositEnabled = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawEnabled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedBtcRelayers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedBtcRelayers = append(m.TrustedBtcRelayers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedNonBtcRelayers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedNonBtcRelayers = append(m.TrustedNonBtcRelayers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedFeeProviders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedFeeProviders = append(m.TrustedFeeProviders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRateValidityPeriod", wireType)
			}
			m.FeeRateValidityPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRateValidityPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, &Vault{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolLimits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TssParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUtxoNum", wireType)
			}
			m.MaxUtxoNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUtxoNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcBatchWithdrawPeriod", wireType)
			}
			m.BtcBatchWithdrawPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcBatchWithdrawPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBtcBatchWithdrawNum", wireType)
			}
			m.MaxBtcBatchWithdrawNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBtcBatchWithdrawNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtocolLimits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolLimits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolLimits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcMinDeposit", wireType)
			}
			m.BtcMinDeposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcMinDeposit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcMinWithdraw", wireType)
			}
			m.BtcMinWithdraw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcMinWithdraw |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcMaxWithdraw", wireType)
			}
			m.BtcMaxWithdraw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcMaxWithdraw |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtocolFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositFee", wireType)
			}
			m.DepositFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawFee", wireType)
			}
			m.WithdrawFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSSParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSSParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSSParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DkgTimeoutPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.DkgTimeoutPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantUpdateTransitionPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.ParticipantUpdateTransitionPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
