// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/btcbridge/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QuerySigningRequestsRequest is request type for the Query/SigningRequests RPC method.
type QuerySigningRequestsRequest struct {
	Status     SigningRequestStatus `protobuf:"varint,1,opt,name=status,proto3,enum=side.btcbridge.SigningRequestStatus" json:"status,omitempty"`
	Pagination *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySigningRequestsRequest) Reset()         { *m = QuerySigningRequestsRequest{} }
func (m *QuerySigningRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestsRequest) ProtoMessage()    {}
func (*QuerySigningRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{0}
}
func (m *QuerySigningRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestsRequest.Merge(m, src)
}
func (m *QuerySigningRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestsRequest proto.InternalMessageInfo

func (m *QuerySigningRequestsRequest) GetStatus() SigningRequestStatus {
	if m != nil {
		return m.Status
	}
	return SigningRequestStatus_SIGNING_REQUEST_STATUS_UNSPECIFIED
}

func (m *QuerySigningRequestsRequest) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySigningRequestsResponse is response type for the Query/SigningRequests RPC method.
type QuerySigningRequestsResponse struct {
	Requests   []*SigningRequest   `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySigningRequestsResponse) Reset()         { *m = QuerySigningRequestsResponse{} }
func (m *QuerySigningRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestsResponse) ProtoMessage()    {}
func (*QuerySigningRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{1}
}
func (m *QuerySigningRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestsResponse.Merge(m, src)
}
func (m *QuerySigningRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestsResponse proto.InternalMessageInfo

func (m *QuerySigningRequestsResponse) GetRequests() []*SigningRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *QuerySigningRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySigningRequestsByAddressRequest is request type for the Query/SigningRequestsByAddress RPC method.
type QuerySigningRequestsByAddressRequest struct {
	Address    string              `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySigningRequestsByAddressRequest) Reset()         { *m = QuerySigningRequestsByAddressRequest{} }
func (m *QuerySigningRequestsByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestsByAddressRequest) ProtoMessage()    {}
func (*QuerySigningRequestsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{2}
}
func (m *QuerySigningRequestsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestsByAddressRequest.Merge(m, src)
}
func (m *QuerySigningRequestsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestsByAddressRequest proto.InternalMessageInfo

func (m *QuerySigningRequestsByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QuerySigningRequestsByAddressRequest) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySigningRequestsByAddressResponse is response type for the Query/SigningRequestsByAddress RPC method.
type QuerySigningRequestsByAddressResponse struct {
	Requests   []*SigningRequest   `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySigningRequestsByAddressResponse) Reset()         { *m = QuerySigningRequestsByAddressResponse{} }
func (m *QuerySigningRequestsByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestsByAddressResponse) ProtoMessage()    {}
func (*QuerySigningRequestsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{3}
}
func (m *QuerySigningRequestsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestsByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestsByAddressResponse.Merge(m, src)
}
func (m *QuerySigningRequestsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestsByAddressResponse proto.InternalMessageInfo

func (m *QuerySigningRequestsByAddressResponse) GetRequests() []*SigningRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *QuerySigningRequestsByAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySigningRequestByTxHashRequest is request type for the Query/SigningRequestByTxHash RPC method.
type QuerySigningRequestByTxHashRequest struct {
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (m *QuerySigningRequestByTxHashRequest) Reset()         { *m = QuerySigningRequestByTxHashRequest{} }
func (m *QuerySigningRequestByTxHashRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestByTxHashRequest) ProtoMessage()    {}
func (*QuerySigningRequestByTxHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{4}
}
func (m *QuerySigningRequestByTxHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestByTxHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestByTxHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestByTxHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestByTxHashRequest.Merge(m, src)
}
func (m *QuerySigningRequestByTxHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestByTxHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestByTxHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestByTxHashRequest proto.InternalMessageInfo

func (m *QuerySigningRequestByTxHashRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

// QuerySigningRequestByTxHashResponse is response type for the Query/SigningRequestByTxHashResponse RPC method.
type QuerySigningRequestByTxHashResponse struct {
	Request *SigningRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *QuerySigningRequestByTxHashResponse) Reset()         { *m = QuerySigningRequestByTxHashResponse{} }
func (m *QuerySigningRequestByTxHashResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySigningRequestByTxHashResponse) ProtoMessage()    {}
func (*QuerySigningRequestByTxHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{5}
}
func (m *QuerySigningRequestByTxHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningRequestByTxHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningRequestByTxHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningRequestByTxHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningRequestByTxHashResponse.Merge(m, src)
}
func (m *QuerySigningRequestByTxHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningRequestByTxHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningRequestByTxHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningRequestByTxHashResponse proto.InternalMessageInfo

func (m *QuerySigningRequestByTxHashResponse) GetRequest() *SigningRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// QueryWithdrawNetworkFeeRequest is request type for the Query/WithdrawNetworkFee RPC method.
type QueryWithdrawNetworkFeeRequest struct {
	Sender  string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FeeRate string `protobuf:"bytes,3,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (m *QueryWithdrawNetworkFeeRequest) Reset()         { *m = QueryWithdrawNetworkFeeRequest{} }
func (m *QueryWithdrawNetworkFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawNetworkFeeRequest) ProtoMessage()    {}
func (*QueryWithdrawNetworkFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{6}
}
func (m *QueryWithdrawNetworkFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawNetworkFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawNetworkFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawNetworkFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawNetworkFeeRequest.Merge(m, src)
}
func (m *QueryWithdrawNetworkFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawNetworkFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawNetworkFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawNetworkFeeRequest proto.InternalMessageInfo

func (m *QueryWithdrawNetworkFeeRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *QueryWithdrawNetworkFeeRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryWithdrawNetworkFeeRequest) GetFeeRate() string {
	if m != nil {
		return m.FeeRate
	}
	return ""
}

// QueryWithdrawNetworkFeeResponse is response type for the Query/WithdrawNetworkFee RPC method.
type QueryWithdrawNetworkFeeResponse struct {
	Fee int64 `protobuf:"varint,1,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *QueryWithdrawNetworkFeeResponse) Reset()         { *m = QueryWithdrawNetworkFeeResponse{} }
func (m *QueryWithdrawNetworkFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawNetworkFeeResponse) ProtoMessage()    {}
func (*QueryWithdrawNetworkFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{7}
}
func (m *QueryWithdrawNetworkFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawNetworkFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawNetworkFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawNetworkFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawNetworkFeeResponse.Merge(m, src)
}
func (m *QueryWithdrawNetworkFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawNetworkFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawNetworkFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawNetworkFeeResponse proto.InternalMessageInfo

func (m *QueryWithdrawNetworkFeeResponse) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{8}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{9}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryChainTipRequest is request type for the Query/ChainTip RPC method.
type QueryChainTipRequest struct {
}

func (m *QueryChainTipRequest) Reset()         { *m = QueryChainTipRequest{} }
func (m *QueryChainTipRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainTipRequest) ProtoMessage()    {}
func (*QueryChainTipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{10}
}
func (m *QueryChainTipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainTipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainTipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainTipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainTipRequest.Merge(m, src)
}
func (m *QueryChainTipRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainTipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainTipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainTipRequest proto.InternalMessageInfo

// QueryChainTipResponse is response type for the Query/ChainTip RPC method.
type QueryChainTipResponse struct {
	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryChainTipResponse) Reset()         { *m = QueryChainTipResponse{} }
func (m *QueryChainTipResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainTipResponse) ProtoMessage()    {}
func (*QueryChainTipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{11}
}
func (m *QueryChainTipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainTipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainTipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainTipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainTipResponse.Merge(m, src)
}
func (m *QueryChainTipResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainTipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainTipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainTipResponse proto.InternalMessageInfo

func (m *QueryChainTipResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *QueryChainTipResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryBlockHeaderByHeightRequest is the request type for the Query/BlockHeaderByHeight RPC method.
type QueryBlockHeaderByHeightRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryBlockHeaderByHeightRequest) Reset()         { *m = QueryBlockHeaderByHeightRequest{} }
func (m *QueryBlockHeaderByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderByHeightRequest) ProtoMessage()    {}
func (*QueryBlockHeaderByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{12}
}
func (m *QueryBlockHeaderByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderByHeightRequest.Merge(m, src)
}
func (m *QueryBlockHeaderByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderByHeightRequest proto.InternalMessageInfo

func (m *QueryBlockHeaderByHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryBlockHeaderByHeightResponse is the response type for the Query/BlockHeaderByHeight RPC method.
type QueryBlockHeaderByHeightResponse struct {
	BlockHeader *BlockHeader `protobuf:"bytes,1,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
}

func (m *QueryBlockHeaderByHeightResponse) Reset()         { *m = QueryBlockHeaderByHeightResponse{} }
func (m *QueryBlockHeaderByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderByHeightResponse) ProtoMessage()    {}
func (*QueryBlockHeaderByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{13}
}
func (m *QueryBlockHeaderByHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderByHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderByHeightResponse.Merge(m, src)
}
func (m *QueryBlockHeaderByHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderByHeightResponse proto.InternalMessageInfo

func (m *QueryBlockHeaderByHeightResponse) GetBlockHeader() *BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

// QueryBlockHeaderByHashRequest is the request type for the Query/BlockHeaderByHash RPC method.
type QueryBlockHeaderByHashRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryBlockHeaderByHashRequest) Reset()         { *m = QueryBlockHeaderByHashRequest{} }
func (m *QueryBlockHeaderByHashRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderByHashRequest) ProtoMessage()    {}
func (*QueryBlockHeaderByHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{14}
}
func (m *QueryBlockHeaderByHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderByHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderByHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderByHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderByHashRequest.Merge(m, src)
}
func (m *QueryBlockHeaderByHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderByHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderByHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderByHashRequest proto.InternalMessageInfo

func (m *QueryBlockHeaderByHashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// QueryBlockHeaderByHashResponse is the response type for the Query/BlockHeaderByHash RPC method.
type QueryBlockHeaderByHashResponse struct {
	BlockHeader *BlockHeader `protobuf:"bytes,1,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
}

func (m *QueryBlockHeaderByHashResponse) Reset()         { *m = QueryBlockHeaderByHashResponse{} }
func (m *QueryBlockHeaderByHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeaderByHashResponse) ProtoMessage()    {}
func (*QueryBlockHeaderByHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{15}
}
func (m *QueryBlockHeaderByHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeaderByHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeaderByHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeaderByHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeaderByHashResponse.Merge(m, src)
}
func (m *QueryBlockHeaderByHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeaderByHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeaderByHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeaderByHashResponse proto.InternalMessageInfo

func (m *QueryBlockHeaderByHashResponse) GetBlockHeader() *BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

// QueryUTXOsRequest is the request type for the Query/UTXOs RPC method.
type QueryUTXOsRequest struct {
}

func (m *QueryUTXOsRequest) Reset()         { *m = QueryUTXOsRequest{} }
func (m *QueryUTXOsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUTXOsRequest) ProtoMessage()    {}
func (*QueryUTXOsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{16}
}
func (m *QueryUTXOsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOsRequest.Merge(m, src)
}
func (m *QueryUTXOsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOsRequest proto.InternalMessageInfo

// QueryUTXOsResponse is the response type for the Query/UTXOs RPC method.
type QueryUTXOsResponse struct {
	Utxos []*UTXO `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (m *QueryUTXOsResponse) Reset()         { *m = QueryUTXOsResponse{} }
func (m *QueryUTXOsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUTXOsResponse) ProtoMessage()    {}
func (*QueryUTXOsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{17}
}
func (m *QueryUTXOsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOsResponse.Merge(m, src)
}
func (m *QueryUTXOsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOsResponse proto.InternalMessageInfo

func (m *QueryUTXOsResponse) GetUtxos() []*UTXO {
	if m != nil {
		return m.Utxos
	}
	return nil
}

// QueryUTXOsByAddressRequest is the request type for the Query/UTXOsByAddress RPC method.
type QueryUTXOsByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUTXOsByAddressRequest) Reset()         { *m = QueryUTXOsByAddressRequest{} }
func (m *QueryUTXOsByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUTXOsByAddressRequest) ProtoMessage()    {}
func (*QueryUTXOsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{18}
}
func (m *QueryUTXOsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOsByAddressRequest.Merge(m, src)
}
func (m *QueryUTXOsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOsByAddressRequest proto.InternalMessageInfo

func (m *QueryUTXOsByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryUTXOsByAddressResponse is the response type for the Query/UTXOsByAddress RPC method.
type QueryUTXOsByAddressResponse struct {
	Utxos []*UTXO `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (m *QueryUTXOsByAddressResponse) Reset()         { *m = QueryUTXOsByAddressResponse{} }
func (m *QueryUTXOsByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUTXOsByAddressResponse) ProtoMessage()    {}
func (*QueryUTXOsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{19}
}
func (m *QueryUTXOsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOsByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOsByAddressResponse.Merge(m, src)
}
func (m *QueryUTXOsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOsByAddressResponse proto.InternalMessageInfo

func (m *QueryUTXOsByAddressResponse) GetUtxos() []*UTXO {
	if m != nil {
		return m.Utxos
	}
	return nil
}

// QueryUTXOCountAndBalancesByAddressRequest is the request type for the Query/UTXOCountAndBalancesByAddress RPC method.
type QueryUTXOCountAndBalancesByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUTXOCountAndBalancesByAddressRequest) Reset() {
	*m = QueryUTXOCountAndBalancesByAddressRequest{}
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryUTXOCountAndBalancesByAddressRequest) ProtoMessage() {}
func (*QueryUTXOCountAndBalancesByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{20}
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOCountAndBalancesByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOCountAndBalancesByAddressRequest.Merge(m, src)
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOCountAndBalancesByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOCountAndBalancesByAddressRequest proto.InternalMessageInfo

func (m *QueryUTXOCountAndBalancesByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryUTXOCountAndBalancesByAddressResponse is the response type for the Query/UTXOCountAndBalancesByAddress RPC method.
type QueryUTXOCountAndBalancesByAddressResponse struct {
	Count        uint32         `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Value        int64          `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	RuneBalances []*RuneBalance `protobuf:"bytes,3,rep,name=runeBalances,proto3" json:"runeBalances,omitempty"`
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) Reset() {
	*m = QueryUTXOCountAndBalancesByAddressResponse{}
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryUTXOCountAndBalancesByAddressResponse) ProtoMessage() {}
func (*QueryUTXOCountAndBalancesByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{21}
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUTXOCountAndBalancesByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUTXOCountAndBalancesByAddressResponse.Merge(m, src)
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUTXOCountAndBalancesByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUTXOCountAndBalancesByAddressResponse proto.InternalMessageInfo

func (m *QueryUTXOCountAndBalancesByAddressResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) GetRuneBalances() []*RuneBalance {
	if m != nil {
		return m.RuneBalances
	}
	return nil
}

// QueryDKGRequestRequest is the request type for the Query/DKGRequest RPC method.
type QueryDKGRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryDKGRequestRequest) Reset()         { *m = QueryDKGRequestRequest{} }
func (m *QueryDKGRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDKGRequestRequest) ProtoMessage()    {}
func (*QueryDKGRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{22}
}
func (m *QueryDKGRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGRequestRequest.Merge(m, src)
}
func (m *QueryDKGRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGRequestRequest proto.InternalMessageInfo

func (m *QueryDKGRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryDKGRequestResponse is the response type for the Query/DKGRequest RPC method.
type QueryDKGRequestResponse struct {
	Request *DKGRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *QueryDKGRequestResponse) Reset()         { *m = QueryDKGRequestResponse{} }
func (m *QueryDKGRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDKGRequestResponse) ProtoMessage()    {}
func (*QueryDKGRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{23}
}
func (m *QueryDKGRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGRequestResponse.Merge(m, src)
}
func (m *QueryDKGRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGRequestResponse proto.InternalMessageInfo

func (m *QueryDKGRequestResponse) GetRequest() *DKGRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// QueryDKGRequestsRequest is the request type for the Query/DKGRequests RPC method.
type QueryDKGRequestsRequest struct {
	Status DKGRequestStatus `protobuf:"varint,1,opt,name=status,proto3,enum=side.btcbridge.DKGRequestStatus" json:"status,omitempty"`
}

func (m *QueryDKGRequestsRequest) Reset()         { *m = QueryDKGRequestsRequest{} }
func (m *QueryDKGRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDKGRequestsRequest) ProtoMessage()    {}
func (*QueryDKGRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{24}
}
func (m *QueryDKGRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGRequestsRequest.Merge(m, src)
}
func (m *QueryDKGRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGRequestsRequest proto.InternalMessageInfo

func (m *QueryDKGRequestsRequest) GetStatus() DKGRequestStatus {
	if m != nil {
		return m.Status
	}
	return DKGRequestStatus_DKG_REQUEST_STATUS_UNSPECIFIED
}

// QueryDKGRequestsResponse is the response type for the Query/DKGRequests RPC method.
type QueryDKGRequestsResponse struct {
	Requests []*DKGRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *QueryDKGRequestsResponse) Reset()         { *m = QueryDKGRequestsResponse{} }
func (m *QueryDKGRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDKGRequestsResponse) ProtoMessage()    {}
func (*QueryDKGRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{25}
}
func (m *QueryDKGRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGRequestsResponse.Merge(m, src)
}
func (m *QueryDKGRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGRequestsResponse proto.InternalMessageInfo

func (m *QueryDKGRequestsResponse) GetRequests() []*DKGRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// QueryAllDKGRequestsRequest is the request type for the Query/AllDKGRequests RPC method.
type QueryAllDKGRequestsRequest struct {
}

func (m *QueryAllDKGRequestsRequest) Reset()         { *m = QueryAllDKGRequestsRequest{} }
func (m *QueryAllDKGRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDKGRequestsRequest) ProtoMessage()    {}
func (*QueryAllDKGRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{26}
}
func (m *QueryAllDKGRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDKGRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDKGRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDKGRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDKGRequestsRequest.Merge(m, src)
}
func (m *QueryAllDKGRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDKGRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDKGRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDKGRequestsRequest proto.InternalMessageInfo

// QueryAllDKGRequestsResponse is the response type for the Query/AllDKGRequests RPC method.
type QueryAllDKGRequestsResponse struct {
	Requests []*DKGRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *QueryAllDKGRequestsResponse) Reset()         { *m = QueryAllDKGRequestsResponse{} }
func (m *QueryAllDKGRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDKGRequestsResponse) ProtoMessage()    {}
func (*QueryAllDKGRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{27}
}
func (m *QueryAllDKGRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDKGRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDKGRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDKGRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDKGRequestsResponse.Merge(m, src)
}
func (m *QueryAllDKGRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDKGRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDKGRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDKGRequestsResponse proto.InternalMessageInfo

func (m *QueryAllDKGRequestsResponse) GetRequests() []*DKGRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// QueryDKGCompletionRequestsRequest is the request type for the Query/DKGCompletionRequests RPC method.
type QueryDKGCompletionRequestsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryDKGCompletionRequestsRequest) Reset()         { *m = QueryDKGCompletionRequestsRequest{} }
func (m *QueryDKGCompletionRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDKGCompletionRequestsRequest) ProtoMessage()    {}
func (*QueryDKGCompletionRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{28}
}
func (m *QueryDKGCompletionRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGCompletionRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGCompletionRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGCompletionRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGCompletionRequestsRequest.Merge(m, src)
}
func (m *QueryDKGCompletionRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGCompletionRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGCompletionRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGCompletionRequestsRequest proto.InternalMessageInfo

func (m *QueryDKGCompletionRequestsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryDKGCompletionRequestsResponse is the response type for the Query/DKGCompletionRequests RPC method.
type QueryDKGCompletionRequestsResponse struct {
	Requests []*DKGCompletionRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *QueryDKGCompletionRequestsResponse) Reset()         { *m = QueryDKGCompletionRequestsResponse{} }
func (m *QueryDKGCompletionRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDKGCompletionRequestsResponse) ProtoMessage()    {}
func (*QueryDKGCompletionRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb547edb49d5502d, []int{29}
}
func (m *QueryDKGCompletionRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDKGCompletionRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDKGCompletionRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDKGCompletionRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDKGCompletionRequestsResponse.Merge(m, src)
}
func (m *QueryDKGCompletionRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDKGCompletionRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDKGCompletionRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDKGCompletionRequestsResponse proto.InternalMessageInfo

func (m *QueryDKGCompletionRequestsResponse) GetRequests() []*DKGCompletionRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func init() {
	proto.RegisterType((*QuerySigningRequestsRequest)(nil), "side.btcbridge.QuerySigningRequestsRequest")
	proto.RegisterType((*QuerySigningRequestsResponse)(nil), "side.btcbridge.QuerySigningRequestsResponse")
	proto.RegisterType((*QuerySigningRequestsByAddressRequest)(nil), "side.btcbridge.QuerySigningRequestsByAddressRequest")
	proto.RegisterType((*QuerySigningRequestsByAddressResponse)(nil), "side.btcbridge.QuerySigningRequestsByAddressResponse")
	proto.RegisterType((*QuerySigningRequestByTxHashRequest)(nil), "side.btcbridge.QuerySigningRequestByTxHashRequest")
	proto.RegisterType((*QuerySigningRequestByTxHashResponse)(nil), "side.btcbridge.QuerySigningRequestByTxHashResponse")
	proto.RegisterType((*QueryWithdrawNetworkFeeRequest)(nil), "side.btcbridge.QueryWithdrawNetworkFeeRequest")
	proto.RegisterType((*QueryWithdrawNetworkFeeResponse)(nil), "side.btcbridge.QueryWithdrawNetworkFeeResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "side.btcbridge.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "side.btcbridge.QueryParamsResponse")
	proto.RegisterType((*QueryChainTipRequest)(nil), "side.btcbridge.QueryChainTipRequest")
	proto.RegisterType((*QueryChainTipResponse)(nil), "side.btcbridge.QueryChainTipResponse")
	proto.RegisterType((*QueryBlockHeaderByHeightRequest)(nil), "side.btcbridge.QueryBlockHeaderByHeightRequest")
	proto.RegisterType((*QueryBlockHeaderByHeightResponse)(nil), "side.btcbridge.QueryBlockHeaderByHeightResponse")
	proto.RegisterType((*QueryBlockHeaderByHashRequest)(nil), "side.btcbridge.QueryBlockHeaderByHashRequest")
	proto.RegisterType((*QueryBlockHeaderByHashResponse)(nil), "side.btcbridge.QueryBlockHeaderByHashResponse")
	proto.RegisterType((*QueryUTXOsRequest)(nil), "side.btcbridge.QueryUTXOsRequest")
	proto.RegisterType((*QueryUTXOsResponse)(nil), "side.btcbridge.QueryUTXOsResponse")
	proto.RegisterType((*QueryUTXOsByAddressRequest)(nil), "side.btcbridge.QueryUTXOsByAddressRequest")
	proto.RegisterType((*QueryUTXOsByAddressResponse)(nil), "side.btcbridge.QueryUTXOsByAddressResponse")
	proto.RegisterType((*QueryUTXOCountAndBalancesByAddressRequest)(nil), "side.btcbridge.QueryUTXOCountAndBalancesByAddressRequest")
	proto.RegisterType((*QueryUTXOCountAndBalancesByAddressResponse)(nil), "side.btcbridge.QueryUTXOCountAndBalancesByAddressResponse")
	proto.RegisterType((*QueryDKGRequestRequest)(nil), "side.btcbridge.QueryDKGRequestRequest")
	proto.RegisterType((*QueryDKGRequestResponse)(nil), "side.btcbridge.QueryDKGRequestResponse")
	proto.RegisterType((*QueryDKGRequestsRequest)(nil), "side.btcbridge.QueryDKGRequestsRequest")
	proto.RegisterType((*QueryDKGRequestsResponse)(nil), "side.btcbridge.QueryDKGRequestsResponse")
	proto.RegisterType((*QueryAllDKGRequestsRequest)(nil), "side.btcbridge.QueryAllDKGRequestsRequest")
	proto.RegisterType((*QueryAllDKGRequestsResponse)(nil), "side.btcbridge.QueryAllDKGRequestsResponse")
	proto.RegisterType((*QueryDKGCompletionRequestsRequest)(nil), "side.btcbridge.QueryDKGCompletionRequestsRequest")
	proto.RegisterType((*QueryDKGCompletionRequestsResponse)(nil), "side.btcbridge.QueryDKGCompletionRequestsResponse")
}

func init() { proto.RegisterFile("side/btcbridge/query.proto", fileDescriptor_fb547edb49d5502d) }

var fileDescriptor_fb547edb49d5502d = []byte{
	// 1378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdf, 0x6f, 0x14, 0xd5,
	0x17, 0xef, 0x74, 0x4b, 0x81, 0x5b, 0xe0, 0xcb, 0xf7, 0x50, 0xca, 0x3a, 0x2d, 0xc3, 0x72, 0x29,
	0x74, 0x2d, 0xb0, 0x23, 0xbb, 0x48, 0x80, 0x18, 0x85, 0xad, 0x4a, 0x0d, 0x89, 0xe0, 0x00, 0xd1,
	0xf8, 0x82, 0x77, 0x77, 0x6f, 0x77, 0x27, 0xdd, 0xce, 0x2c, 0x33, 0xb3, 0xd0, 0x4d, 0xd3, 0x17,
	0xdf, 0x34, 0x3e, 0x98, 0x68, 0x62, 0x8c, 0x3e, 0xa9, 0xf1, 0xc9, 0x3f, 0xc0, 0xf8, 0x17, 0x10,
	0x9f, 0x48, 0x4c, 0x8c, 0x4f, 0xc6, 0x50, 0xff, 0x10, 0x33, 0x77, 0xce, 0xcc, 0xee, 0xde, 0x99,
	0xd9, 0xd9, 0x62, 0x1f, 0x7c, 0xa1, 0x73, 0xef, 0x3d, 0x3f, 0x3e, 0xe7, 0xdc, 0x73, 0xcf, 0xf9,
	0x2c, 0x44, 0x75, 0xcd, 0x06, 0xd7, 0x6b, 0x5e, 0xbd, 0xe6, 0x98, 0x8d, 0x26, 0xd7, 0x1f, 0x75,
	0xb9, 0xd3, 0x2b, 0x75, 0x1c, 0xdb, 0xb3, 0xe1, 0x88, 0x7f, 0x56, 0x8a, 0xce, 0xd4, 0xd9, 0xa6,
	0xdd, 0xb4, 0xc5, 0x91, 0xee, 0x7f, 0x05, 0x52, 0xea, 0x42, 0xd3, 0xb6, 0x9b, 0x6d, 0xae, 0xb3,
	0x8e, 0xa9, 0x33, 0xcb, 0xb2, 0x3d, 0xe6, 0x99, 0xb6, 0xe5, 0xe2, 0xe9, 0x72, 0xdd, 0x76, 0x37,
	0x6c, 0x57, 0xaf, 0x31, 0x17, 0x8d, 0xeb, 0x8f, 0x2f, 0xd5, 0xb8, 0xc7, 0x2e, 0xe9, 0x1d, 0xd6,
	0x34, 0x2d, 0x21, 0x8c, 0xb2, 0xf3, 0x12, 0x96, 0x0e, 0x73, 0xd8, 0x46, 0x68, 0x48, 0x93, 0x0e,
	0xa3, 0xaf, 0xe0, 0x9c, 0xfe, 0xa0, 0x90, 0xf9, 0xf7, 0x7c, 0xfb, 0xf7, 0xcc, 0xa6, 0x65, 0x5a,
	0x4d, 0x83, 0x3f, 0xea, 0x72, 0xd7, 0x73, 0xf1, 0x2f, 0xbc, 0x46, 0xa6, 0x5d, 0x8f, 0x79, 0x5d,
	0x37, 0xaf, 0x14, 0x94, 0xe2, 0x91, 0xf2, 0x62, 0x69, 0x38, 0xba, 0xd2, 0xb0, 0xde, 0x3d, 0x21,
	0x6b, 0xa0, 0x0e, 0xdc, 0x22, 0xa4, 0x0f, 0x37, 0x3f, 0x59, 0x50, 0x8a, 0x33, 0xe5, 0xa5, 0x52,
	0x10, 0x5b, 0xc9, 0x8f, 0xad, 0x14, 0x24, 0x0e, 0x63, 0x2b, 0xdd, 0x65, 0x4d, 0x6e, 0x70, 0xb7,
	0x63, 0x5b, 0x2e, 0x37, 0x06, 0x54, 0xe9, 0xf7, 0x0a, 0x59, 0x48, 0x86, 0x19, 0x08, 0xc3, 0x75,
	0x72, 0xc0, 0xc1, 0xbd, 0xbc, 0x52, 0xc8, 0x15, 0x67, 0xca, 0xda, 0x68, 0xa4, 0x46, 0x24, 0xbf,
	0x77, 0x28, 0x3f, 0x51, 0xc8, 0x62, 0x12, 0xca, 0x6a, 0xef, 0x66, 0xa3, 0xe1, 0x70, 0x37, 0xca,
	0x6a, 0x9e, 0xec, 0x67, 0xc1, 0x8e, 0x48, 0xeb, 0x41, 0x23, 0x5c, 0xee, 0x1d, 0x96, 0x9f, 0x14,
	0x72, 0x36, 0x03, 0xcb, 0x7f, 0x29, 0x75, 0x57, 0x09, 0x4d, 0x40, 0x5b, 0xed, 0xdd, 0xdf, 0x5c,
	0x65, 0x6e, 0x2b, 0xcc, 0x1b, 0x90, 0x29, 0x6f, 0xd3, 0x6c, 0x60, 0xd2, 0xc4, 0x37, 0x7d, 0x48,
	0xce, 0x8c, 0xd4, 0xc4, 0x28, 0xaf, 0x92, 0xfd, 0x88, 0x5a, 0x68, 0x67, 0x07, 0x19, 0x8a, 0xd3,
	0x75, 0xa2, 0x09, 0x07, 0xef, 0x9b, 0x5e, 0xab, 0xe1, 0xb0, 0x27, 0xef, 0x72, 0xef, 0x89, 0xed,
	0xac, 0xbf, 0xcd, 0x79, 0x08, 0x6b, 0x8e, 0x4c, 0xbb, 0xdc, 0x6a, 0x70, 0x07, 0x81, 0xe1, 0xca,
	0xdf, 0x67, 0x1b, 0x76, 0xd7, 0xf2, 0x44, 0x66, 0x0e, 0x1a, 0xb8, 0x82, 0x97, 0xc8, 0x81, 0x35,
	0xce, 0x1f, 0x3a, 0xcc, 0xe3, 0xf9, 0x5c, 0x70, 0xff, 0x6b, 0x9c, 0x1b, 0xcc, 0xe3, 0xb4, 0x42,
	0x4e, 0xa5, 0x3a, 0xc3, 0x48, 0x8e, 0x92, 0xdc, 0x1a, 0xe7, 0xc2, 0x55, 0xce, 0xf0, 0x3f, 0xe9,
	0x2c, 0x01, 0xa1, 0x74, 0x57, 0xbc, 0x7c, 0x44, 0x45, 0x6f, 0x93, 0x63, 0x43, 0xbb, 0xa8, 0x7e,
	0x99, 0x4c, 0x07, 0x1d, 0x02, 0xf3, 0x30, 0x27, 0xe7, 0x21, 0x90, 0xaf, 0x4e, 0x3d, 0xfd, 0xf3,
	0xd4, 0x84, 0x81, 0xb2, 0x74, 0x8e, 0xcc, 0x0a, 0x63, 0x2b, 0x2d, 0x66, 0x5a, 0xf7, 0xcd, 0x4e,
	0xe8, 0x64, 0x85, 0x1c, 0x97, 0xf6, 0xd1, 0x0d, 0x90, 0xa9, 0x16, 0x73, 0x5b, 0xe1, 0x55, 0xf9,
	0xdf, 0x7e, 0x3e, 0x5a, 0xdc, 0x6c, 0xb6, 0x82, 0x7c, 0x4c, 0x19, 0xb8, 0xa2, 0xd7, 0x30, 0xe8,
	0x6a, 0xdb, 0xae, 0xaf, 0xaf, 0x72, 0xd6, 0xe0, 0x4e, 0xb5, 0xb7, 0x2a, 0xce, 0x06, 0x52, 0x8c,
	0xaa, 0xca, 0x90, 0x6a, 0x8d, 0x14, 0xd2, 0x55, 0x11, 0xca, 0xeb, 0xe4, 0x50, 0xcd, 0x3f, 0x7e,
	0xd8, 0x12, 0xe7, 0x18, 0xf7, 0xbc, 0x1c, 0xf7, 0x80, 0x09, 0x63, 0xa6, 0xd6, 0x5f, 0xd0, 0x0a,
	0x39, 0x99, 0xe0, 0x63, 0xb8, 0x2c, 0xe5, 0x58, 0xe9, 0x47, 0x58, 0x35, 0x09, 0x4a, 0x7b, 0x04,
	0xeb, 0x18, 0xf9, 0xbf, 0xf0, 0xf0, 0xe0, 0xfe, 0x07, 0x77, 0xa2, 0x4b, 0xbf, 0x81, 0xa5, 0x80,
	0x9b, 0xe8, 0x6a, 0x99, 0xec, 0xeb, 0x7a, 0x9b, 0x76, 0xf8, 0xbe, 0x67, 0x65, 0x1f, 0xbe, 0xb4,
	0x11, 0x88, 0xd0, 0x2b, 0x44, 0xed, 0x5b, 0x18, 0xbf, 0x73, 0xd1, 0x77, 0x70, 0x90, 0xc8, 0x7a,
	0x2f, 0x00, 0xe1, 0x2d, 0xf2, 0x72, 0x64, 0x6a, 0xc5, 0x7f, 0x31, 0x37, 0xad, 0x46, 0x95, 0xb5,
	0x99, 0x55, 0xe7, 0xbb, 0x41, 0xf4, 0xb5, 0x42, 0x96, 0xc7, 0xb1, 0x83, 0x08, 0x67, 0xc9, 0xbe,
	0xba, 0x78, 0xac, 0xbe, 0x99, 0xc3, 0x46, 0xb0, 0xf0, 0x77, 0x1f, 0xb3, 0x76, 0x97, 0x8b, 0x92,
	0xcd, 0x19, 0xc1, 0x02, 0xde, 0x20, 0x87, 0x9c, 0xae, 0xc5, 0x43, 0x63, 0xf9, 0x9c, 0x08, 0x2a,
	0x76, 0x77, 0x46, 0x5f, 0xc6, 0x18, 0x52, 0xa0, 0x45, 0x32, 0x27, 0xa0, 0xbd, 0x79, 0xfb, 0x56,
	0xd8, 0x70, 0x30, 0x9e, 0x23, 0x64, 0x12, 0x3b, 0xdc, 0x94, 0x31, 0x69, 0x36, 0xe8, 0x1d, 0x72,
	0x22, 0x26, 0x19, 0x3d, 0x65, 0xa9, 0xa7, 0xa9, 0x32, 0x80, 0x01, 0xa5, 0xa8, 0x9f, 0xdd, 0x8b,
	0x19, 0x8c, 0x72, 0x79, 0x55, 0x9a, 0xf6, 0x85, 0x74, 0x7b, 0xc3, 0x93, 0x9e, 0x1a, 0x24, 0x1f,
	0x37, 0x8a, 0x30, 0xaf, 0xc4, 0x06, 0xcc, 0x28, 0x9c, 0x91, 0x2c, 0x5d, 0xc0, 0x4a, 0xbc, 0xd9,
	0x6e, 0xc7, 0xb1, 0xd2, 0x07, 0x58, 0x6f, 0xf2, 0xe9, 0xbf, 0x74, 0x5a, 0x21, 0xa7, 0xc3, 0x40,
	0x56, 0xec, 0x8d, 0x4e, 0x9b, 0xfb, 0xe3, 0x49, 0xce, 0x93, 0x7c, 0x47, 0x6b, 0x38, 0xbd, 0x52,
	0x94, 0x10, 0xd2, 0x8d, 0x18, 0xa4, 0xc5, 0x04, 0x48, 0x31, 0x03, 0x7d, 0x70, 0xe5, 0xdf, 0x81,
	0xec, 0x13, 0x8e, 0xe0, 0x31, 0x99, 0x19, 0x68, 0xee, 0x40, 0x65, 0x43, 0xf1, 0x79, 0xa0, 0x9e,
	0x19, 0x29, 0x13, 0x60, 0xa4, 0xda, 0xc7, 0xbf, 0xfd, 0xfd, 0xc5, 0x64, 0x1e, 0xe6, 0xf4, 0x44,
	0x56, 0x09, 0x3d, 0x72, 0x78, 0xa8, 0xdf, 0xc3, 0x62, 0xa2, 0x55, 0x69, 0x4c, 0xa8, 0x67, 0x33,
	0xa4, 0xd0, 0xfb, 0xbc, 0xf0, 0x7e, 0x1c, 0x8e, 0xc9, 0xde, 0x3d, 0xb3, 0x03, 0x3f, 0x2a, 0x58,
	0x63, 0x09, 0xbd, 0x1e, 0xf4, 0x44, 0x07, 0xe9, 0x03, 0x45, 0x7d, 0x65, 0x7c, 0x05, 0x04, 0xb7,
	0x24, 0xc0, 0x9d, 0x86, 0x53, 0x32, 0xb8, 0x60, 0x14, 0xe9, 0x5b, 0xc1, 0xdf, 0x6d, 0xf8, 0x56,
	0xc1, 0xc7, 0x1d, 0xeb, 0xfd, 0x70, 0x71, 0x0c, 0xaf, 0xfd, 0xc1, 0xa2, 0x96, 0xc6, 0x15, 0x47,
	0x88, 0x67, 0x04, 0xc4, 0x93, 0x30, 0x1f, 0x83, 0xc8, 0xdc, 0x96, 0xbe, 0xe5, 0xff, 0xbb, 0x0d,
	0xdf, 0x28, 0x38, 0xcb, 0x25, 0x66, 0x08, 0xe7, 0x13, 0xbd, 0x25, 0xff, 0x30, 0x50, 0x2f, 0x8c,
	0x27, 0x8c, 0xc0, 0x8a, 0x02, 0x18, 0x85, 0x82, 0x0c, 0xcc, 0x0d, 0x14, 0xf4, 0x88, 0x51, 0x3e,
	0x55, 0x70, 0xda, 0xa6, 0xf1, 0x56, 0xb8, 0x3c, 0x8e, 0x67, 0x79, 0x4c, 0xa8, 0xaf, 0xee, 0x52,
	0x0b, 0x81, 0x5f, 0x17, 0xc0, 0x2f, 0x43, 0x39, 0x0b, 0xb8, 0x8e, 0x53, 0x47, 0xdf, 0xc2, 0x8f,
	0x6d, 0xf8, 0x25, 0xf9, 0xb7, 0x55, 0x48, 0x4d, 0xa1, 0x3c, 0x06, 0x24, 0x89, 0x01, 0xab, 0x95,
	0x5d, 0xe9, 0x60, 0x10, 0x65, 0x11, 0xc4, 0x05, 0x58, 0xce, 0x0c, 0xc2, 0xdb, 0xd4, 0xb7, 0x7c,
	0x56, 0xbd, 0x0d, 0xdf, 0x29, 0x38, 0x26, 0xe2, 0x4c, 0x14, 0x92, 0xcb, 0x32, 0x95, 0x1f, 0xab,
	0xfa, 0xd8, 0xf2, 0x08, 0xf8, 0x9c, 0x00, 0x5c, 0x00, 0x4d, 0x06, 0xfc, 0x04, 0x75, 0x58, 0x5b,
	0x5f, 0xe3, 0x1c, 0x1c, 0x42, 0xfa, 0x9c, 0x03, 0x4e, 0x27, 0xba, 0x19, 0xa4, 0x47, 0x2a, 0x1d,
	0x25, 0x82, 0xce, 0x4f, 0x0a, 0xe7, 0x27, 0xe0, 0xb8, 0xec, 0x5c, 0x90, 0x13, 0xf8, 0x4a, 0x41,
	0x5e, 0x3d, 0x4c, 0x74, 0x60, 0x39, 0xdd, 0x74, 0xac, 0x18, 0xcf, 0x8f, 0x25, 0x9b, 0xd5, 0x77,
	0x04, 0x9e, 0x81, 0x7a, 0xfb, 0x55, 0xc1, 0x31, 0x34, 0x92, 0xef, 0xc0, 0xb5, 0x54, 0xe7, 0x59,
	0x5c, 0x4b, 0xbd, 0xfe, 0x22, 0xaa, 0x18, 0xc6, 0x45, 0x11, 0xc6, 0x12, 0x9c, 0xcd, 0x08, 0x43,
	0xf7, 0x19, 0x85, 0x0b, 0x9f, 0x29, 0xe4, 0x7f, 0x12, 0xa3, 0x80, 0x73, 0x89, 0xee, 0x63, 0x14,
	0x4a, 0x5d, 0xca, 0x94, 0xcb, 0x6a, 0x4b, 0x8d, 0xf5, 0xe8, 0x51, 0xe8, 0x5b, 0xfe, 0x73, 0xf8,
	0x54, 0x21, 0x47, 0x65, 0x82, 0x03, 0x59, 0x7e, 0xa2, 0xbc, 0x15, 0xb3, 0x05, 0xb3, 0x3a, 0xf8,
	0x00, 0x22, 0xf8, 0x32, 0x2c, 0xc1, 0x61, 0xee, 0x93, 0x52, 0x82, 0x89, 0xf4, 0x29, 0xa5, 0x04,
	0x93, 0xc9, 0x14, 0x5d, 0x14, 0xa8, 0x34, 0x58, 0x18, 0x81, 0xca, 0x85, 0x9f, 0x15, 0x24, 0x6c,
	0x89, 0x34, 0x08, 0x2e, 0xa5, 0x25, 0x21, 0x95, 0x67, 0xa9, 0xe5, 0xdd, 0xa8, 0x20, 0xd6, 0x8a,
	0xc0, 0x7a, 0x11, 0xce, 0x27, 0x61, 0xad, 0x47, 0x7a, 0x43, 0xd7, 0x5b, 0x5d, 0x7d, 0xfa, 0x5c,
	0x53, 0x9e, 0x3d, 0xd7, 0x94, 0xbf, 0x9e, 0x6b, 0xca, 0xe7, 0x3b, 0xda, 0xc4, 0xb3, 0x1d, 0x6d,
	0xe2, 0x8f, 0x1d, 0x6d, 0xe2, 0xc3, 0x52, 0xd3, 0xf4, 0x5a, 0xdd, 0x5a, 0xa9, 0x6e, 0x6f, 0x08,
	0x83, 0xe2, 0xbf, 0xcd, 0xea, 0x76, 0x3b, 0xb0, 0xbe, 0x39, 0xc8, 0x51, 0x7a, 0x1d, 0xee, 0xd6,
	0xa6, 0x85, 0x40, 0xe5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x60, 0x7a, 0x55, 0x22, 0x14,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ChainTip queries the chain tip of the module.
	QueryChainTip(ctx context.Context, in *QueryChainTipRequest, opts ...grpc.CallOption) (*QueryChainTipResponse, error)
	// BlockHeaderByHeight queries the block header by height.
	QueryBlockHeaderByHeight(ctx context.Context, in *QueryBlockHeaderByHeightRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHeightResponse, error)
	// BlockHeaderByHash queries the block header by hash.
	QueryBlockHeaderByHash(ctx context.Context, in *QueryBlockHeaderByHashRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHashResponse, error)
	// QuerySigningRequests queries the signing requests by the given status.
	QuerySigningRequests(ctx context.Context, in *QuerySigningRequestsRequest, opts ...grpc.CallOption) (*QuerySigningRequestsResponse, error)
	// QuerySigningRequestsByAddress queries the signing requests by the given address.
	QuerySigningRequestsByAddress(ctx context.Context, in *QuerySigningRequestsByAddressRequest, opts ...grpc.CallOption) (*QuerySigningRequestsByAddressResponse, error)
	// QuerySigningRequestByTxHash queries the signing request by the given tx hash.
	QuerySigningRequestByTxHash(ctx context.Context, in *QuerySigningRequestByTxHashRequest, opts ...grpc.CallOption) (*QuerySigningRequestByTxHashResponse, error)
	// QueryWithdrawNetworkFee queries the bitcoin network fee for withdrawal.
	QueryWithdrawNetworkFee(ctx context.Context, in *QueryWithdrawNetworkFeeRequest, opts ...grpc.CallOption) (*QueryWithdrawNetworkFeeResponse, error)
	// QueryUTXOs queries all utxos.
	QueryUTXOs(ctx context.Context, in *QueryUTXOsRequest, opts ...grpc.CallOption) (*QueryUTXOsResponse, error)
	// QueryUTXOsByAddress queries the utxos of the given address.
	QueryUTXOsByAddress(ctx context.Context, in *QueryUTXOsByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOsByAddressResponse, error)
	// QueryUTXOCountAndBalancesByAddress queries the total count and balances of the unlocked utxos by the given address.
	QueryUTXOCountAndBalancesByAddress(ctx context.Context, in *QueryUTXOCountAndBalancesByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOCountAndBalancesByAddressResponse, error)
	// QueryDKGRequest queries the DKG request by the given id.
	QueryDKGRequest(ctx context.Context, in *QueryDKGRequestRequest, opts ...grpc.CallOption) (*QueryDKGRequestResponse, error)
	// QueryDKGRequests queries the DKG requests by the given status
	QueryDKGRequests(ctx context.Context, in *QueryDKGRequestsRequest, opts ...grpc.CallOption) (*QueryDKGRequestsResponse, error)
	// QueryAllDKGRequests queries all DKG requests.
	QueryAllDKGRequests(ctx context.Context, in *QueryAllDKGRequestsRequest, opts ...grpc.CallOption) (*QueryAllDKGRequestsResponse, error)
	// QueryDKGCompletionRequests queries DKG completion requests by the given id.
	QueryDKGCompletionRequests(ctx context.Context, in *QueryDKGCompletionRequestsRequest, opts ...grpc.CallOption) (*QueryDKGCompletionRequestsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryChainTip(ctx context.Context, in *QueryChainTipRequest, opts ...grpc.CallOption) (*QueryChainTipResponse, error) {
	out := new(QueryChainTipResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryChainTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBlockHeaderByHeight(ctx context.Context, in *QueryBlockHeaderByHeightRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHeightResponse, error) {
	out := new(QueryBlockHeaderByHeightResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryBlockHeaderByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBlockHeaderByHash(ctx context.Context, in *QueryBlockHeaderByHashRequest, opts ...grpc.CallOption) (*QueryBlockHeaderByHashResponse, error) {
	out := new(QueryBlockHeaderByHashResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryBlockHeaderByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySigningRequests(ctx context.Context, in *QuerySigningRequestsRequest, opts ...grpc.CallOption) (*QuerySigningRequestsResponse, error) {
	out := new(QuerySigningRequestsResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QuerySigningRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySigningRequestsByAddress(ctx context.Context, in *QuerySigningRequestsByAddressRequest, opts ...grpc.CallOption) (*QuerySigningRequestsByAddressResponse, error) {
	out := new(QuerySigningRequestsByAddressResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QuerySigningRequestsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySigningRequestByTxHash(ctx context.Context, in *QuerySigningRequestByTxHashRequest, opts ...grpc.CallOption) (*QuerySigningRequestByTxHashResponse, error) {
	out := new(QuerySigningRequestByTxHashResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QuerySigningRequestByTxHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWithdrawNetworkFee(ctx context.Context, in *QueryWithdrawNetworkFeeRequest, opts ...grpc.CallOption) (*QueryWithdrawNetworkFeeResponse, error) {
	out := new(QueryWithdrawNetworkFeeResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryWithdrawNetworkFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUTXOs(ctx context.Context, in *QueryUTXOsRequest, opts ...grpc.CallOption) (*QueryUTXOsResponse, error) {
	out := new(QueryUTXOsResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryUTXOs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUTXOsByAddress(ctx context.Context, in *QueryUTXOsByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOsByAddressResponse, error) {
	out := new(QueryUTXOsByAddressResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryUTXOsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUTXOCountAndBalancesByAddress(ctx context.Context, in *QueryUTXOCountAndBalancesByAddressRequest, opts ...grpc.CallOption) (*QueryUTXOCountAndBalancesByAddressResponse, error) {
	out := new(QueryUTXOCountAndBalancesByAddressResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryUTXOCountAndBalancesByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDKGRequest(ctx context.Context, in *QueryDKGRequestRequest, opts ...grpc.CallOption) (*QueryDKGRequestResponse, error) {
	out := new(QueryDKGRequestResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryDKGRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDKGRequests(ctx context.Context, in *QueryDKGRequestsRequest, opts ...grpc.CallOption) (*QueryDKGRequestsResponse, error) {
	out := new(QueryDKGRequestsResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryDKGRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllDKGRequests(ctx context.Context, in *QueryAllDKGRequestsRequest, opts ...grpc.CallOption) (*QueryAllDKGRequestsResponse, error) {
	out := new(QueryAllDKGRequestsResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryAllDKGRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDKGCompletionRequests(ctx context.Context, in *QueryDKGCompletionRequestsRequest, opts ...grpc.CallOption) (*QueryDKGCompletionRequestsResponse, error) {
	out := new(QueryDKGCompletionRequestsResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Query/QueryDKGCompletionRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ChainTip queries the chain tip of the module.
	QueryChainTip(context.Context, *QueryChainTipRequest) (*QueryChainTipResponse, error)
	// BlockHeaderByHeight queries the block header by height.
	QueryBlockHeaderByHeight(context.Context, *QueryBlockHeaderByHeightRequest) (*QueryBlockHeaderByHeightResponse, error)
	// BlockHeaderByHash queries the block header by hash.
	QueryBlockHeaderByHash(context.Context, *QueryBlockHeaderByHashRequest) (*QueryBlockHeaderByHashResponse, error)
	// QuerySigningRequests queries the signing requests by the given status.
	QuerySigningRequests(context.Context, *QuerySigningRequestsRequest) (*QuerySigningRequestsResponse, error)
	// QuerySigningRequestsByAddress queries the signing requests by the given address.
	QuerySigningRequestsByAddress(context.Context, *QuerySigningRequestsByAddressRequest) (*QuerySigningRequestsByAddressResponse, error)
	// QuerySigningRequestByTxHash queries the signing request by the given tx hash.
	QuerySigningRequestByTxHash(context.Context, *QuerySigningRequestByTxHashRequest) (*QuerySigningRequestByTxHashResponse, error)
	// QueryWithdrawNetworkFee queries the bitcoin network fee for withdrawal.
	QueryWithdrawNetworkFee(context.Context, *QueryWithdrawNetworkFeeRequest) (*QueryWithdrawNetworkFeeResponse, error)
	// QueryUTXOs queries all utxos.
	QueryUTXOs(context.Context, *QueryUTXOsRequest) (*QueryUTXOsResponse, error)
	// QueryUTXOsByAddress queries the utxos of the given address.
	QueryUTXOsByAddress(context.Context, *QueryUTXOsByAddressRequest) (*QueryUTXOsByAddressResponse, error)
	// QueryUTXOCountAndBalancesByAddress queries the total count and balances of the unlocked utxos by the given address.
	QueryUTXOCountAndBalancesByAddress(context.Context, *QueryUTXOCountAndBalancesByAddressRequest) (*QueryUTXOCountAndBalancesByAddressResponse, error)
	// QueryDKGRequest queries the DKG request by the given id.
	QueryDKGRequest(context.Context, *QueryDKGRequestRequest) (*QueryDKGRequestResponse, error)
	// QueryDKGRequests queries the DKG requests by the given status
	QueryDKGRequests(context.Context, *QueryDKGRequestsRequest) (*QueryDKGRequestsResponse, error)
	// QueryAllDKGRequests queries all DKG requests.
	QueryAllDKGRequests(context.Context, *QueryAllDKGRequestsRequest) (*QueryAllDKGRequestsResponse, error)
	// QueryDKGCompletionRequests queries DKG completion requests by the given id.
	QueryDKGCompletionRequests(context.Context, *QueryDKGCompletionRequestsRequest) (*QueryDKGCompletionRequestsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryChainTip(ctx context.Context, req *QueryChainTipRequest) (*QueryChainTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChainTip not implemented")
}
func (*UnimplementedQueryServer) QueryBlockHeaderByHeight(ctx context.Context, req *QueryBlockHeaderByHeightRequest) (*QueryBlockHeaderByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockHeaderByHeight not implemented")
}
func (*UnimplementedQueryServer) QueryBlockHeaderByHash(ctx context.Context, req *QueryBlockHeaderByHashRequest) (*QueryBlockHeaderByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockHeaderByHash not implemented")
}
func (*UnimplementedQueryServer) QuerySigningRequests(ctx context.Context, req *QuerySigningRequestsRequest) (*QuerySigningRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySigningRequests not implemented")
}
func (*UnimplementedQueryServer) QuerySigningRequestsByAddress(ctx context.Context, req *QuerySigningRequestsByAddressRequest) (*QuerySigningRequestsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySigningRequestsByAddress not implemented")
}
func (*UnimplementedQueryServer) QuerySigningRequestByTxHash(ctx context.Context, req *QuerySigningRequestByTxHashRequest) (*QuerySigningRequestByTxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySigningRequestByTxHash not implemented")
}
func (*UnimplementedQueryServer) QueryWithdrawNetworkFee(ctx context.Context, req *QueryWithdrawNetworkFeeRequest) (*QueryWithdrawNetworkFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithdrawNetworkFee not implemented")
}
func (*UnimplementedQueryServer) QueryUTXOs(ctx context.Context, req *QueryUTXOsRequest) (*QueryUTXOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUTXOs not implemented")
}
func (*UnimplementedQueryServer) QueryUTXOsByAddress(ctx context.Context, req *QueryUTXOsByAddressRequest) (*QueryUTXOsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUTXOsByAddress not implemented")
}
func (*UnimplementedQueryServer) QueryUTXOCountAndBalancesByAddress(ctx context.Context, req *QueryUTXOCountAndBalancesByAddressRequest) (*QueryUTXOCountAndBalancesByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUTXOCountAndBalancesByAddress not implemented")
}
func (*UnimplementedQueryServer) QueryDKGRequest(ctx context.Context, req *QueryDKGRequestRequest) (*QueryDKGRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDKGRequest not implemented")
}
func (*UnimplementedQueryServer) QueryDKGRequests(ctx context.Context, req *QueryDKGRequestsRequest) (*QueryDKGRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDKGRequests not implemented")
}
func (*UnimplementedQueryServer) QueryAllDKGRequests(ctx context.Context, req *QueryAllDKGRequestsRequest) (*QueryAllDKGRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllDKGRequests not implemented")
}
func (*UnimplementedQueryServer) QueryDKGCompletionRequests(ctx context.Context, req *QueryDKGCompletionRequestsRequest) (*QueryDKGCompletionRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDKGCompletionRequests not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryChainTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryChainTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryChainTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryChainTip(ctx, req.(*QueryChainTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBlockHeaderByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockHeaderByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBlockHeaderByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryBlockHeaderByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBlockHeaderByHeight(ctx, req.(*QueryBlockHeaderByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBlockHeaderByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockHeaderByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBlockHeaderByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryBlockHeaderByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBlockHeaderByHash(ctx, req.(*QueryBlockHeaderByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySigningRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySigningRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QuerySigningRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySigningRequests(ctx, req.(*QuerySigningRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySigningRequestsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySigningRequestsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QuerySigningRequestsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySigningRequestsByAddress(ctx, req.(*QuerySigningRequestsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySigningRequestByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequestByTxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySigningRequestByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QuerySigningRequestByTxHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySigningRequestByTxHash(ctx, req.(*QuerySigningRequestByTxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWithdrawNetworkFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawNetworkFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWithdrawNetworkFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryWithdrawNetworkFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWithdrawNetworkFee(ctx, req.(*QueryWithdrawNetworkFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUTXOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUTXOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUTXOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryUTXOs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUTXOs(ctx, req.(*QueryUTXOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUTXOsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUTXOsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUTXOsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryUTXOsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUTXOsByAddress(ctx, req.(*QueryUTXOsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUTXOCountAndBalancesByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUTXOCountAndBalancesByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUTXOCountAndBalancesByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryUTXOCountAndBalancesByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUTXOCountAndBalancesByAddress(ctx, req.(*QueryUTXOCountAndBalancesByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDKGRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDKGRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryDKGRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDKGRequest(ctx, req.(*QueryDKGRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDKGRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDKGRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryDKGRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDKGRequests(ctx, req.(*QueryDKGRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllDKGRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDKGRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllDKGRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryAllDKGRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllDKGRequests(ctx, req.(*QueryAllDKGRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDKGCompletionRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDKGCompletionRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDKGCompletionRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Query/QueryDKGCompletionRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDKGCompletionRequests(ctx, req.(*QueryDKGCompletionRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "side.btcbridge.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryChainTip",
			Handler:    _Query_QueryChainTip_Handler,
		},
		{
			MethodName: "QueryBlockHeaderByHeight",
			Handler:    _Query_QueryBlockHeaderByHeight_Handler,
		},
		{
			MethodName: "QueryBlockHeaderByHash",
			Handler:    _Query_QueryBlockHeaderByHash_Handler,
		},
		{
			MethodName: "QuerySigningRequests",
			Handler:    _Query_QuerySigningRequests_Handler,
		},
		{
			MethodName: "QuerySigningRequestsByAddress",
			Handler:    _Query_QuerySigningRequestsByAddress_Handler,
		},
		{
			MethodName: "QuerySigningRequestByTxHash",
			Handler:    _Query_QuerySigningRequestByTxHash_Handler,
		},
		{
			MethodName: "QueryWithdrawNetworkFee",
			Handler:    _Query_QueryWithdrawNetworkFee_Handler,
		},
		{
			MethodName: "QueryUTXOs",
			Handler:    _Query_QueryUTXOs_Handler,
		},
		{
			MethodName: "QueryUTXOsByAddress",
			Handler:    _Query_QueryUTXOsByAddress_Handler,
		},
		{
			MethodName: "QueryUTXOCountAndBalancesByAddress",
			Handler:    _Query_QueryUTXOCountAndBalancesByAddress_Handler,
		},
		{
			MethodName: "QueryDKGRequest",
			Handler:    _Query_QueryDKGRequest_Handler,
		},
		{
			MethodName: "QueryDKGRequests",
			Handler:    _Query_QueryDKGRequests_Handler,
		},
		{
			MethodName: "QueryAllDKGRequests",
			Handler:    _Query_QueryAllDKGRequests_Handler,
		},
		{
			MethodName: "QueryDKGCompletionRequests",
			Handler:    _Query_QueryDKGCompletionRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "side/btcbridge/query.proto",
}

func (m *QuerySigningRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestsByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestByTxHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestByTxHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestByTxHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningRequestByTxHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningRequestByTxHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningRequestByTxHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawNetworkFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawNetworkFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawNetworkFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeRate) > 0 {
		i -= len(m.FeeRate)
		copy(dAtA[i:], m.FeeRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeeRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawNetworkFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawNetworkFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawNetworkFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChainTipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainTipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainTipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChainTipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainTipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainTipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderByHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderByHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderByHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderByHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderByHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderByHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeaderByHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeaderByHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeaderByHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUTXOsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryUTXOsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Utxos) > 0 {
		for iNdEx := len(m.Utxos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Utxos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUTXOsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUTXOsByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Utxos) > 0 {
		for iNdEx := len(m.Utxos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Utxos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUTXOCountAndBalancesByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOCountAndBalancesByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOCountAndBalancesByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuneBalances) > 0 {
		for iNdEx := len(m.RuneBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RuneBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Value != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDKGRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDKGRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDKGRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllDKGRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDKGRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDKGRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGCompletionRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGCompletionRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGCompletionRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDKGCompletionRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDKGCompletionRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDKGCompletionRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySigningRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestsByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestsByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestByTxHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningRequestByTxHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawNetworkFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FeeRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawNetworkFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fee != 0 {
		n += 1 + sovQuery(uint64(m.Fee))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChainTipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChainTipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryBlockHeaderByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryBlockHeaderByHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlockHeaderByHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlockHeaderByHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUTXOsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryUTXOsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Utxos) > 0 {
		for _, e := range m.Utxos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUTXOsByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUTXOsByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Utxos) > 0 {
		for _, e := range m.Utxos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUTXOCountAndBalancesByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUTXOCountAndBalancesByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	if m.Value != 0 {
		n += 1 + sovQuery(uint64(m.Value))
	}
	if len(m.RuneBalances) > 0 {
		for _, e := range m.RuneBalances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDKGRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryDKGRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDKGRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryDKGRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllDKGRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllDKGRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDKGCompletionRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryDKGCompletionRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySigningRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SigningRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &SigningRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestsByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &SigningRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestByTxHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestByTxHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestByTxHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningRequestByTxHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningRequestByTxHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningRequestByTxHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &SigningRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawNetworkFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawNetworkFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawNetworkFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawNetworkFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawNetworkFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawNetworkFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainTipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainTipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainTipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainTipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainTipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainTipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderByHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderByHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderByHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeader == nil {
				m.BlockHeader = &BlockHeader{}
			}
			if err := m.BlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderByHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderByHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderByHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeaderByHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeaderByHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeaderByHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeader == nil {
				m.BlockHeader = &BlockHeader{}
			}
			if err := m.BlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utxos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utxos = append(m.Utxos, &UTXO{})
			if err := m.Utxos[len(m.Utxos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOsByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utxos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utxos = append(m.Utxos, &UTXO{})
			if err := m.Utxos[len(m.Utxos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOCountAndBalancesByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOCountAndBalancesByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOCountAndBalancesByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUTXOCountAndBalancesByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUTXOCountAndBalancesByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUTXOCountAndBalancesByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneBalances = append(m.RuneBalances, &RuneBalance{})
			if err := m.RuneBalances[len(m.RuneBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &DKGRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DKGRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &DKGRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDKGRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDKGRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDKGRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDKGRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDKGRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDKGRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &DKGRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGCompletionRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGCompletionRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGCompletionRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDKGCompletionRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDKGCompletionRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDKGCompletionRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &DKGCompletionRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
